{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Network Operating System (ONOS) \u00b5ONOS is a code-name for the next generation architecture of ONOS - an open-source SDN control and configuration platform. The \u00b5ONOS architecture is: Natively based on new generation of control and configuration interfaces and standards, e.g. P4/P4Runtime , gNMI/OpenConfig , gNOI Provides basis for zero-touch operations support Implemented in systems-level languages - primarily Go, some C/C++ as necessary Modular and based on established and efficient polyglot interface mechanism - gRPC Composed as a set of micro-services and deployable on cloud and data-center infrastructures - Kubernetes Highly available, dynamically scalable and high performance in terms of throughput (control/config ops/sec) and latency for implementing control-loops Available in ready-to-deploy form with a set of tools required for sustained operation, e.g. Docker images, Helm charts, monitoring and troubleshooting tools, etc. \u00b5ONOS is based on our 5+ years of experience building and deploying ONOS which has been a leader in the SDN control plane space when it comes to high availability, performance and scalability. The platform enables comprehensive set of network operations: Configuration, monitoring and maintenance of network devices for zero touch operation Configuration and programming of the forwarding plane structure (forwarding pipelines specified in P4) Validation of network topology and of forwarding plane behaviour Efficient collection of fine-grained network performance metrics (INT) \u00b5ONOS Deployment Architecture Additional Resources Talks at ONF Connect 2019 \u00b5ONOS Project Overview \u00b5ONOS for Developers Device Configuration in \u00b5ONOS","title":"ONOS"},{"location":"#open-network-operating-system-onos","text":"\u00b5ONOS is a code-name for the next generation architecture of ONOS - an open-source SDN control and configuration platform. The \u00b5ONOS architecture is: Natively based on new generation of control and configuration interfaces and standards, e.g. P4/P4Runtime , gNMI/OpenConfig , gNOI Provides basis for zero-touch operations support Implemented in systems-level languages - primarily Go, some C/C++ as necessary Modular and based on established and efficient polyglot interface mechanism - gRPC Composed as a set of micro-services and deployable on cloud and data-center infrastructures - Kubernetes Highly available, dynamically scalable and high performance in terms of throughput (control/config ops/sec) and latency for implementing control-loops Available in ready-to-deploy form with a set of tools required for sustained operation, e.g. Docker images, Helm charts, monitoring and troubleshooting tools, etc. \u00b5ONOS is based on our 5+ years of experience building and deploying ONOS which has been a leader in the SDN control plane space when it comes to high availability, performance and scalability. The platform enables comprehensive set of network operations: Configuration, monitoring and maintenance of network devices for zero touch operation Configuration and programming of the forwarding plane structure (forwarding pipelines specified in P4) Validation of network topology and of forwarding plane behaviour Efficient collection of fine-grained network performance metrics (INT)","title":"Open Network Operating System (ONOS)"},{"location":"#onos-deployment-architecture","text":"","title":"\u00b5ONOS Deployment Architecture"},{"location":"#additional-resources","text":"","title":"Additional Resources"},{"location":"#talks-at-onf-connect-2019","text":"\u00b5ONOS Project Overview \u00b5ONOS for Developers Device Configuration in \u00b5ONOS","title":"Talks at ONF Connect 2019"},{"location":"developers/community-info/","text":"Contacts and Calendars Mailing list The \u00b5ONOS project currently leverages the ONOS developers mailing list: onos-dev@onosproject.org Note We kindly ask to have the start of the subject to be [micro-onos] Slack channel The \u00b5ONOS project has a slack channel in the onosproject slack: #micro-onos . If you want to join the onosproject slack please join here and the subscribe to our channel. Calendar The \u00b5ONOS project leverages the common ONOS calendar which can be found at this link . If you instead would like to add the calendar to your personal Google Calendar, please add the copy the following string onosproject.org_6l261cnjim09dv9sulta3bgcmc@group.calendar.google.com to your external calendar (left bar in the Google Calendar online application). Daily Stand-up The \u00b5ONOS project team holds a short stand-up every day at 10 AM PST, 6 PM GMT, 7 PM CET. Feel free to join to learn what the team is up to and discuss your latest work with us. meeting link Technical Steering Team The technical steering team has PUBLIC and RECORDED meetings at 9 AM PST, 5 PM GMT, 6 PM CET on Wednesday every 2 weeks to discuss different topics. You can find a detailed agenda and next meeting information on the TST Wiki .","title":"Contacts and Calenders"},{"location":"developers/community-info/#contacts-and-calendars","text":"","title":"Contacts and Calendars"},{"location":"developers/community-info/#mailing-list","text":"The \u00b5ONOS project currently leverages the ONOS developers mailing list: onos-dev@onosproject.org Note We kindly ask to have the start of the subject to be [micro-onos]","title":"Mailing list"},{"location":"developers/community-info/#slack-channel","text":"The \u00b5ONOS project has a slack channel in the onosproject slack: #micro-onos . If you want to join the onosproject slack please join here and the subscribe to our channel.","title":"Slack channel"},{"location":"developers/community-info/#calendar","text":"The \u00b5ONOS project leverages the common ONOS calendar which can be found at this link . If you instead would like to add the calendar to your personal Google Calendar, please add the copy the following string onosproject.org_6l261cnjim09dv9sulta3bgcmc@group.calendar.google.com to your external calendar (left bar in the Google Calendar online application).","title":"Calendar"},{"location":"developers/community-info/#daily-stand-up","text":"The \u00b5ONOS project team holds a short stand-up every day at 10 AM PST, 6 PM GMT, 7 PM CET. Feel free to join to learn what the team is up to and discuss your latest work with us. meeting link","title":"Daily Stand-up"},{"location":"developers/community-info/#technical-steering-team","text":"The technical steering team has PUBLIC and RECORDED meetings at 9 AM PST, 5 PM GMT, 6 PM CET on Wednesday every 2 weeks to discuss different topics. You can find a detailed agenda and next meeting information on the TST Wiki .","title":"Technical Steering Team"},{"location":"developers/contributing/","text":"Contributing to onosproject The ONOS team hopes for and welcomes contributions from the community at large. To become a contributor, you will first need to sign a CLA. After that, simply follow the process outlined below for submitting your patches on GitHub. Workflow Contributions are accepted via GitHub Pull Requests submitted from the developer's own Fork of the onos-config repository. The following diagram illustrates the steps required to establish such a Fork and to create a Pull Request. [!NOTE] In the following subsections, we explain the contribution workflow for one of the repositories, namely onos-config . The same workflow can be used for all the other repos under onosproject . In the following examples just substitute any onos-config reference with the name of the repo you are working on, such as onos-topo or simulators . Any step that do not have onos-config in them can be used as is. 1. Fork on GitHub Visit https://github.com/onosproject/onos-config Click Fork button (top right) to establish your own GitHub repository fork. 2. Clone Fork The onos-config code should be placed under your GOPATH (per Go workspace conventions ) using the following procedure: If you have not set and exported the GOPATH environment variable, please do so: export GOPATH = $( go env GOPATH ) Similarly, set and export the GIT_USER environment variable to match your github profile name: export GIT_USER ={ your github profile name } Then, clone your fork of the onos-config repository: ONOS_ROOT = $GOPATH /src/github.com/onosproject mkdir -p $ONOS_ROOT && cd $ONOS_ROOT git clone https://github.com/ $GIT_USER /onos-config.git # or: git clone git@github.com:$GIT_USER/onos-config.git cd $ONOS_ROOT /onos-config git remote add upstream https://github.com/onosproject/onos-config.git # or: git remote add upstream git@github.com:onosproject/onos-config.git # Never push to upstream master git remote set-url --push upstream no_push # Confirm that your remotes make sense: git remote -v 3. Branch Get your local master up to date: cd $GOPATH /src/github.com/onosproject/onos-config git fetch upstream git checkout master git rebase upstream/master Branch from it: git checkout -b myfeature Then edit code on the myfeature branch. 4. Keep Branch in Sync While on your myfeature branch git fetch upstream git rebase upstream/master Please don't use git pull instead of the above fetch / rebase . git pull does a merge, which leaves merge commits. These make the commit history messy and violate the principle that commits ought to be individually understandable and useful (see below). You can also consider changing your .git/config file via git config branch.autoSetupRebase always to change the behavior of git pull . 5. Commit Commit your changes. git commit If you make other changes pleas add them to a new commit and thus keep the history of your work. Your branch, after you open a pull request, will be merged with a squash and commit strategy, thus showing as only one commit. 6. Push When ready to review (or just to establish an offsite backup or your work), push your branch to your fork on github.com : git push origin myfeature 7. Create a Pull Request Visit your fork at https://github.com/$user/onos-config Click the Compare & Pull Request button next to your myfeature branch. Please follow the pull request guidelines . If you have upstream write access , please refrain from using the GitHub UI for creating PRs, because GitHub will create the PR branch inside the main repository rather than inside your fork. Get a Code Review Once your pull request has been opened it will be assigned to one or more reviewers. Those reviewers will do a thorough code review, looking for correctness, bugs, opportunities for improvement, documentation and comments, and style. Commit changes made in response to review comments to the same branch on your fork. Very small PRs are easy to review. Very large PRs are very difficult to review. Squash and Merge Upon merge (by either you or your reviewer), all commits left on the review branch should represent meaningful milestones or units of work. Use commits to add clarity to the development and review process. Before merging a PR, squash any fix review feedback , typo , merged , and rebased sorts of commits. It is not imperative that every commit in a PR compile and pass tests independently, but it is worth striving for. In particular, if you happened to have used git merge and have merge commits, please squash those away: they do not meet the above test. A nifty way to manage the commits in your PR is to do an interactive rebase , which will let you tell git what to do with every commit: git fetch upstream git rebase -i upstream/master For mass automated fixups (e.g. automated doc formatting), use one or more commits for the changes to tooling and a final commit to apply the fixup en masse. This makes reviews easier. How to Revert a Commit In case you wish to revert a commit, use the following instructions. If you have upstream write access , please refrain from using the Revert button in the GitHub UI for creating the PR, because GitHub will create the PR branch inside the main repository rather than inside your fork. 1. Create a branch and sync it with upstream # create a branch git checkout -b myrevert # sync the branch with upstream git fetch upstream git rebase upstream/master 2. Revert the prior commit(s) If the commit you wish to revert it a merge commit, run this: # SHA is the hash of the merge commit you wish to revert git revert -m 1 SHA If it is a single commit, then run the following: # SHA is the hash of the single commit you wish to revert git revert SHA The above will create a new commit reverting the changes. 3. Push this new commit to your remote git push ${ your_remote_name } myrevert 4. Create a pull request using this branch Community Guidelines This project follows Google's Open Source Community Guidelines . Contributing to ONOS Docs See documentation.md for details on how to add to the documentation.","title":"Contribution Guidelines"},{"location":"developers/contributing/#contributing-to-onosproject","text":"The ONOS team hopes for and welcomes contributions from the community at large. To become a contributor, you will first need to sign a CLA. After that, simply follow the process outlined below for submitting your patches on GitHub.","title":"Contributing to onosproject"},{"location":"developers/contributing/#workflow","text":"Contributions are accepted via GitHub Pull Requests submitted from the developer's own Fork of the onos-config repository. The following diagram illustrates the steps required to establish such a Fork and to create a Pull Request. [!NOTE] In the following subsections, we explain the contribution workflow for one of the repositories, namely onos-config . The same workflow can be used for all the other repos under onosproject . In the following examples just substitute any onos-config reference with the name of the repo you are working on, such as onos-topo or simulators . Any step that do not have onos-config in them can be used as is.","title":"Workflow"},{"location":"developers/contributing/#1-fork-on-github","text":"Visit https://github.com/onosproject/onos-config Click Fork button (top right) to establish your own GitHub repository fork.","title":"1. Fork on GitHub"},{"location":"developers/contributing/#2-clone-fork","text":"The onos-config code should be placed under your GOPATH (per Go workspace conventions ) using the following procedure: If you have not set and exported the GOPATH environment variable, please do so: export GOPATH = $( go env GOPATH ) Similarly, set and export the GIT_USER environment variable to match your github profile name: export GIT_USER ={ your github profile name } Then, clone your fork of the onos-config repository: ONOS_ROOT = $GOPATH /src/github.com/onosproject mkdir -p $ONOS_ROOT && cd $ONOS_ROOT git clone https://github.com/ $GIT_USER /onos-config.git # or: git clone git@github.com:$GIT_USER/onos-config.git cd $ONOS_ROOT /onos-config git remote add upstream https://github.com/onosproject/onos-config.git # or: git remote add upstream git@github.com:onosproject/onos-config.git # Never push to upstream master git remote set-url --push upstream no_push # Confirm that your remotes make sense: git remote -v","title":"2. Clone Fork"},{"location":"developers/contributing/#3-branch","text":"Get your local master up to date: cd $GOPATH /src/github.com/onosproject/onos-config git fetch upstream git checkout master git rebase upstream/master Branch from it: git checkout -b myfeature Then edit code on the myfeature branch.","title":"3. Branch"},{"location":"developers/contributing/#4-keep-branch-in-sync","text":"While on your myfeature branch git fetch upstream git rebase upstream/master Please don't use git pull instead of the above fetch / rebase . git pull does a merge, which leaves merge commits. These make the commit history messy and violate the principle that commits ought to be individually understandable and useful (see below). You can also consider changing your .git/config file via git config branch.autoSetupRebase always to change the behavior of git pull .","title":"4. Keep Branch in Sync"},{"location":"developers/contributing/#5-commit","text":"Commit your changes. git commit If you make other changes pleas add them to a new commit and thus keep the history of your work. Your branch, after you open a pull request, will be merged with a squash and commit strategy, thus showing as only one commit.","title":"5. Commit"},{"location":"developers/contributing/#6-push","text":"When ready to review (or just to establish an offsite backup or your work), push your branch to your fork on github.com : git push origin myfeature","title":"6. Push"},{"location":"developers/contributing/#7-create-a-pull-request","text":"Visit your fork at https://github.com/$user/onos-config Click the Compare & Pull Request button next to your myfeature branch. Please follow the pull request guidelines . If you have upstream write access , please refrain from using the GitHub UI for creating PRs, because GitHub will create the PR branch inside the main repository rather than inside your fork.","title":"7. Create a Pull Request"},{"location":"developers/contributing/#get-a-code-review","text":"Once your pull request has been opened it will be assigned to one or more reviewers. Those reviewers will do a thorough code review, looking for correctness, bugs, opportunities for improvement, documentation and comments, and style. Commit changes made in response to review comments to the same branch on your fork. Very small PRs are easy to review. Very large PRs are very difficult to review.","title":"Get a Code Review"},{"location":"developers/contributing/#squash-and-merge","text":"Upon merge (by either you or your reviewer), all commits left on the review branch should represent meaningful milestones or units of work. Use commits to add clarity to the development and review process. Before merging a PR, squash any fix review feedback , typo , merged , and rebased sorts of commits. It is not imperative that every commit in a PR compile and pass tests independently, but it is worth striving for. In particular, if you happened to have used git merge and have merge commits, please squash those away: they do not meet the above test. A nifty way to manage the commits in your PR is to do an interactive rebase , which will let you tell git what to do with every commit: git fetch upstream git rebase -i upstream/master For mass automated fixups (e.g. automated doc formatting), use one or more commits for the changes to tooling and a final commit to apply the fixup en masse. This makes reviews easier.","title":"Squash and Merge"},{"location":"developers/contributing/#how-to-revert-a-commit","text":"In case you wish to revert a commit, use the following instructions. If you have upstream write access , please refrain from using the Revert button in the GitHub UI for creating the PR, because GitHub will create the PR branch inside the main repository rather than inside your fork.","title":"How to Revert a Commit"},{"location":"developers/contributing/#1-create-a-branch-and-sync-it-with-upstream","text":"# create a branch git checkout -b myrevert # sync the branch with upstream git fetch upstream git rebase upstream/master","title":"1. Create a branch and sync it with upstream"},{"location":"developers/contributing/#2-revert-the-prior-commits","text":"If the commit you wish to revert it a merge commit, run this: # SHA is the hash of the merge commit you wish to revert git revert -m 1 SHA If it is a single commit, then run the following: # SHA is the hash of the single commit you wish to revert git revert SHA The above will create a new commit reverting the changes.","title":"2. Revert the prior commit(s)"},{"location":"developers/contributing/#3-push-this-new-commit-to-your-remote","text":"git push ${ your_remote_name } myrevert","title":"3. Push this new commit to your remote"},{"location":"developers/contributing/#4-create-a-pull-request-using-this-branch","text":"","title":"4. Create a pull request using this branch"},{"location":"developers/contributing/#community-guidelines","text":"This project follows Google's Open Source Community Guidelines .","title":"Community Guidelines"},{"location":"developers/contributing/#contributing-to-onos-docs","text":"See documentation.md for details on how to add to the documentation.","title":"Contributing to ONOS Docs"},{"location":"developers/deploy_with_helm/","text":"Deploying onos micro-services with HELM One of the goals of the micro-onos project is to provide simple deployment options that integrate with modern technologies. Deployment configurations can be found in the /deployments/helm folder in every repository that posses the Helm charts. For example see the onos-config/deplyments/helm folder. Deploying on Kubernetes with Helm Helm is a package manager for Kubernetes that allows projects to provide a collection of templates for all the resources needed to deploy on k8s. ONOS Config provides a Helm chart for deploying a cluster for development and testing. In the future, this chart will be extended for production use. Resources The Helm chart provides resources for deploying the config service and accessing it over the network, both inside and outside the k8s cluster: Deployment - Provides a template for ONOS Config pods ConfigMap - Provides test configurations for the application Service - Exposes ONOS Config to other applications on the network Secret - Provides TLS certificates for end-to-end encryption Ingress - Optionally provides support for external load balancing Local Deployment Setup To deploy the Helm chart locally first install Kind following the instructions . Helm is also required. On OSX, this Helm can be installed using Brew : > brew install kubernetes-helm You will also need Docker to build and deploy an image locally. * Docker installation instructions Once Kind has been installed, start it with kind create cluster . Once Kind has started, set your environment to the Kubernetes cluster: > export KUBECONFIG = \" $( kind get kubeconfig-path --name = \"kind\" ) \" Deploy Atomix Controller The various onos services leverage Atomix as the distributed store for HA, scale and redundancy. The first thing that needs to be deployed in any onos deployment is the Atomix go controller. Fetch the atomix-controller.yaml file: curl -o atomix-controller.yaml https://raw.githubusercontent.com/atomix/atomix-k8s-controller/master/deploy/atomix-controller.yaml if you want to deploy the cluster in the non default namespace please edit atomix-controller.yaml , replacing default with your namespace. To then deploy the atomix controller issue: kubectl create -f atomix-controller.yaml with the correct return output being customresourcedefinition.apiextensions.k8s.io/partitionsets.k8s.atomix.io created customresourcedefinition.apiextensions.k8s.io/partitions.k8s.atomix.io created clusterrole.rbac.authorization.k8s.io/atomix-controller created clusterrolebinding.rbac.authorization.k8s.io/atomix-controller created serviceaccount/atomix-controller created deployment.apps/atomix-controller created service/atomix-controller created If you watch the pods you should now see: kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE default atomix-controller-b579b9f48-lgvxf 1 /1 Running 0 152m Deploy services Once you have exported the KUBECONFIG flag you can start deploy onos services through helm charts. Please refer to each service's deployment file to get the exact command for each helm chart. Example for onos-config .","title":"Deploy with Helm"},{"location":"developers/deploy_with_helm/#deploying-onos-micro-services-with-helm","text":"One of the goals of the micro-onos project is to provide simple deployment options that integrate with modern technologies. Deployment configurations can be found in the /deployments/helm folder in every repository that posses the Helm charts. For example see the onos-config/deplyments/helm folder.","title":"Deploying onos micro-services with HELM"},{"location":"developers/deploy_with_helm/#deploying-on-kubernetes-with-helm","text":"Helm is a package manager for Kubernetes that allows projects to provide a collection of templates for all the resources needed to deploy on k8s. ONOS Config provides a Helm chart for deploying a cluster for development and testing. In the future, this chart will be extended for production use.","title":"Deploying on Kubernetes with Helm"},{"location":"developers/deploy_with_helm/#resources","text":"The Helm chart provides resources for deploying the config service and accessing it over the network, both inside and outside the k8s cluster: Deployment - Provides a template for ONOS Config pods ConfigMap - Provides test configurations for the application Service - Exposes ONOS Config to other applications on the network Secret - Provides TLS certificates for end-to-end encryption Ingress - Optionally provides support for external load balancing","title":"Resources"},{"location":"developers/deploy_with_helm/#local-deployment-setup","text":"To deploy the Helm chart locally first install Kind following the instructions . Helm is also required. On OSX, this Helm can be installed using Brew : > brew install kubernetes-helm You will also need Docker to build and deploy an image locally. * Docker installation instructions Once Kind has been installed, start it with kind create cluster . Once Kind has started, set your environment to the Kubernetes cluster: > export KUBECONFIG = \" $( kind get kubeconfig-path --name = \"kind\" ) \"","title":"Local Deployment Setup"},{"location":"developers/deploy_with_helm/#deploy-atomix-controller","text":"The various onos services leverage Atomix as the distributed store for HA, scale and redundancy. The first thing that needs to be deployed in any onos deployment is the Atomix go controller. Fetch the atomix-controller.yaml file: curl -o atomix-controller.yaml https://raw.githubusercontent.com/atomix/atomix-k8s-controller/master/deploy/atomix-controller.yaml if you want to deploy the cluster in the non default namespace please edit atomix-controller.yaml , replacing default with your namespace. To then deploy the atomix controller issue: kubectl create -f atomix-controller.yaml with the correct return output being customresourcedefinition.apiextensions.k8s.io/partitionsets.k8s.atomix.io created customresourcedefinition.apiextensions.k8s.io/partitions.k8s.atomix.io created clusterrole.rbac.authorization.k8s.io/atomix-controller created clusterrolebinding.rbac.authorization.k8s.io/atomix-controller created serviceaccount/atomix-controller created deployment.apps/atomix-controller created service/atomix-controller created If you watch the pods you should now see: kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE default atomix-controller-b579b9f48-lgvxf 1 /1 Running 0 152m","title":"Deploy Atomix Controller"},{"location":"developers/deploy_with_helm/#deploy-services","text":"Once you have exported the KUBECONFIG flag you can start deploy onos services through helm charts. Please refer to each service's deployment file to get the exact command for each helm chart. Example for onos-config .","title":"Deploy services"},{"location":"developers/dev_workflow/","text":"Developer Workflow Steps outlined in this page assume that the development prerequisites are met. Create Workspace Before making your first contribution, you should follow the steps to create your own GitHub fork and local workspace as outlined in the contributor guide . After this, you can browse the code and start making changes as necessary. Build and Test After you made some changes to the code locally, before opening a pull request you should run a few steps to make sure the code will pass validation by the CI: Run and pass make build Run and pass make test You can find more information on the full build process in the building onos-config document. Submit a Pull Request If the build and the test passed, you can commit your code and open a new pull request as described in more detail in the contributing to onos-config document. Pull Request Review process The pull request you just opened will be checked by our Travis CI system and reviewed by the community. Once it is approved, it will be merged it with a squash and merge strategy. If you are requested for changes in your pull request please go back and start again with step number 4 in the contributing to onos-config guide .","title":"Developer Workflow"},{"location":"developers/dev_workflow/#developer-workflow","text":"Steps outlined in this page assume that the development prerequisites are met.","title":"Developer Workflow"},{"location":"developers/dev_workflow/#create-workspace","text":"Before making your first contribution, you should follow the steps to create your own GitHub fork and local workspace as outlined in the contributor guide . After this, you can browse the code and start making changes as necessary.","title":"Create Workspace"},{"location":"developers/dev_workflow/#build-and-test","text":"After you made some changes to the code locally, before opening a pull request you should run a few steps to make sure the code will pass validation by the CI: Run and pass make build Run and pass make test You can find more information on the full build process in the building onos-config document.","title":"Build and Test"},{"location":"developers/dev_workflow/#submit-a-pull-request","text":"If the build and the test passed, you can commit your code and open a new pull request as described in more detail in the contributing to onos-config document.","title":"Submit a Pull Request"},{"location":"developers/dev_workflow/#pull-request-review-process","text":"The pull request you just opened will be checked by our Travis CI system and reviewed by the community. Once it is approved, it will be merged it with a squash and merge strategy. If you are requested for changes in your pull request please go back and start again with step number 4 in the contributing to onos-config guide .","title":"Pull Request Review process"},{"location":"developers/documentation/","text":"How does onos-docs work? Multi-repo docs is a process that collects docs from multiple repos and publishes them on a single website. \u00b5ONOS project uses the Multi-repo docs process to achieve following design goals: Distributed docs and a centralized representation : Support Documentation as Code - store and version documentation alongside code, or in it's own version controlled repo for each subsystem. In addition, onos-docs repo stores common documents (e.g. developer guidelines) and website related files Easy to maintain : Support adding new projects and their docs in the building and publishing process of onos docs with a minimum effort. Versioning : Support versioning to build different version of docs based on different releases of ONOS subsystems. ONOS Docs Manager Software onos-docs project uses Mkdocs for building the docs website and Travis to publish it on web. To automate the workflow and achieve the above design goals, a software is developed called onos-docs-manager that is written in Golang that automates the following functionalities: Collect docs from multiple repos, organize them, and build the onos-docs website Support versioning of multi-repo docs to build different version of docs based on different releases of ONOS subsystems. Support dynamic navigation layout to change navigation layout automatically per version of docs The onos-docs building and publishing process is illustrated as follows: Note : onos-docs-manager uses some of the utility functions that are implemented part of structor project. How to build and browse onos docs locally? To build and browse onos docs locally, : First, clone onos-docs repo using git clone or follow dev_workflow to setup your workspace for onos-docs repo. To build and browse onos-docs locally run the following commands: bash $ cd onos-docs $ make docs-serve Finally, open your browser and enter the following address: 127.0.0.1:8000 to render onos docs website locally. Note : To build onos docs without rendering the website locally, run the following command: make docs How does onos-docs-manager support versioning and dynamic navigation layout? onos-docs-manager performs the following steps to build onos docs website related files for each version of onos docs: Read and parse the information about each version of docs from a config file . Clone repos and build website (under /site directory) for each version of docs based on the given config file and a specific navigation layout under navigation layouts directory Adding to documentation Documents from the individual repositories of the \u00b5ONOS project (e.g. onos-config, onos-topo) should be maintained in those projects. This documentation will be visible in GitHub for each of these projects individually and also collectively in through mkdocs with the onos-docs project at onos-docs . Github and MkDocs (python based) each use their own renderer of Markdown to display the text in HTML. Authors should ensure their Markdown should work in both situations. Rules for GitHub markdown are at https://guides.github.com/features/mastering-markdown/ Rules for MkDocs (Python) are at https://daringfireball.net/projects/markdown/syntax The rules are mostly the same for both platforms, with the following caveats: With the python interpreter there must be a new empty line before any ordered or unordered list","title":"How does onos-docs work?"},{"location":"developers/documentation/#how-does-onos-docs-work","text":"Multi-repo docs is a process that collects docs from multiple repos and publishes them on a single website. \u00b5ONOS project uses the Multi-repo docs process to achieve following design goals: Distributed docs and a centralized representation : Support Documentation as Code - store and version documentation alongside code, or in it's own version controlled repo for each subsystem. In addition, onos-docs repo stores common documents (e.g. developer guidelines) and website related files Easy to maintain : Support adding new projects and their docs in the building and publishing process of onos docs with a minimum effort. Versioning : Support versioning to build different version of docs based on different releases of ONOS subsystems.","title":"How does onos-docs work?"},{"location":"developers/documentation/#onos-docs-manager-software","text":"onos-docs project uses Mkdocs for building the docs website and Travis to publish it on web. To automate the workflow and achieve the above design goals, a software is developed called onos-docs-manager that is written in Golang that automates the following functionalities: Collect docs from multiple repos, organize them, and build the onos-docs website Support versioning of multi-repo docs to build different version of docs based on different releases of ONOS subsystems. Support dynamic navigation layout to change navigation layout automatically per version of docs The onos-docs building and publishing process is illustrated as follows: Note : onos-docs-manager uses some of the utility functions that are implemented part of structor project.","title":"ONOS Docs Manager Software"},{"location":"developers/documentation/#how-to-build-and-browse-onos-docs-locally","text":"To build and browse onos docs locally, : First, clone onos-docs repo using git clone or follow dev_workflow to setup your workspace for onos-docs repo. To build and browse onos-docs locally run the following commands: bash $ cd onos-docs $ make docs-serve Finally, open your browser and enter the following address: 127.0.0.1:8000 to render onos docs website locally. Note : To build onos docs without rendering the website locally, run the following command: make docs","title":"How to build and browse onos docs locally?"},{"location":"developers/documentation/#how-does-onos-docs-manager-support-versioning-and-dynamic-navigation-layout","text":"onos-docs-manager performs the following steps to build onos docs website related files for each version of onos docs: Read and parse the information about each version of docs from a config file . Clone repos and build website (under /site directory) for each version of docs based on the given config file and a specific navigation layout under navigation layouts directory","title":"How does onos-docs-manager support versioning and dynamic navigation layout?"},{"location":"developers/documentation/#adding-to-documentation","text":"Documents from the individual repositories of the \u00b5ONOS project (e.g. onos-config, onos-topo) should be maintained in those projects. This documentation will be visible in GitHub for each of these projects individually and also collectively in through mkdocs with the onos-docs project at onos-docs . Github and MkDocs (python based) each use their own renderer of Markdown to display the text in HTML. Authors should ensure their Markdown should work in both situations. Rules for GitHub markdown are at https://guides.github.com/features/mastering-markdown/ Rules for MkDocs (Python) are at https://daringfireball.net/projects/markdown/syntax The rules are mostly the same for both platforms, with the following caveats: With the python interpreter there must be a new empty line before any ordered or unordered list","title":"Adding to documentation"},{"location":"developers/godocs/","text":"Links To GoDoc Pages Configuration Subsystem GoDoc Topology Subsystem GoDoc Command Line Interface Subsystem GoDoc Zero-Touch Provisioning Subsystem GoDoc Test Tools GoDoc Graphical User Interface GoDoc","title":"GoDoc Pages"},{"location":"developers/godocs/#links-to-godoc-pages","text":"Configuration Subsystem GoDoc Topology Subsystem GoDoc Command Line Interface Subsystem GoDoc Zero-Touch Provisioning Subsystem GoDoc Test Tools GoDoc Graphical User Interface GoDoc","title":"Links To GoDoc Pages"},{"location":"developers/license_goland/","text":"GoLand Copyright Profile Setup GoLand IDE can be configured to automatically include the required Apache 2.0 license text in Go source files. Steps to do this are shown below: Open Preferences window Select Editor->Copyright->Copyright Profiles Click the plus icon Name the new profie onos Cut and paste the text from here into the copyright field Click Apply Open Formatting then Go Click check box for Use Custom Formatting Options Click checkbox Use Line Comment Click Apply Once the new copyright profile is created, it needs to be applied to the project: * Select Editor->Copyright * Choose onos in the Default Project Copyright drop-down list * Click OK","title":"GoLand Copyright Profile Setup"},{"location":"developers/license_goland/#goland-copyright-profile-setup","text":"GoLand IDE can be configured to automatically include the required Apache 2.0 license text in Go source files. Steps to do this are shown below: Open Preferences window Select Editor->Copyright->Copyright Profiles Click the plus icon Name the new profie onos Cut and paste the text from here into the copyright field Click Apply Open Formatting then Go Click check box for Use Custom Formatting Options Click checkbox Use Line Comment Click Apply Once the new copyright profile is created, it needs to be applied to the project: * Select Editor->Copyright * Choose onos in the Default Project Copyright drop-down list * Click OK","title":"GoLand Copyright Profile Setup"},{"location":"developers/prerequisites/","text":"Development Prerequisites This document provides an overview of the tools and packages needed to work on and to build onos-config. Developers are expected to have these tools installed on the machine where the project is built. Go Tools Since the project is authored mainly in the Go programming language, the project requires Go tools in order to build and execute the code. Go Linters golangci-lint is required to validate that the Go source code complies with the established style guidelines. To install the tool, use this command: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $( go env GOPATH ) /bin latest The directory ~/go/bin needs to be present in your $PATH environment variable for this to work after being installed Docker Docker is required to build the project Docker images and also to compile *.proto files into Go source files. Local kubernetes environment Some form of local kubernetes development environment is also needed. The core team uses Kind , but there are other options such as Minikube and MicroK8s . Some docker containers may need access to privileged rights e.g. onos-config:debug , onos-topo:debug and opennetworking/mn-stratum and so may not be suited to Kubernetes environments that cannot grant these rights Python 3 Python 3 needs to be installed to run the license checking tool in many on the Makefiles. The version provided by your OS will usually be sufficient Verify it is installed with python3 --version IDE Some form of an integrated development environment is also recommended. The core team uses the GoLand IDE from JetBrains, but there are many other options. Microsoft's Visual Studio Code is one such option and is available as a free download. Note that when using GoLand IDE you should enable integration with Go modules in Preferences -> Go -> Go Modules . License The project requires that all Go source files are properly annotated using the Apache 2.0 License. Since this requirement is enforced by the CI process, it is strongly recommended that developers setup their IDE to include the license text automatically. GoLand IDE can be easily setup to do this and other IDEs will have a similar mechanism.","title":"Development Prerequisites"},{"location":"developers/prerequisites/#development-prerequisites","text":"This document provides an overview of the tools and packages needed to work on and to build onos-config. Developers are expected to have these tools installed on the machine where the project is built.","title":"Development Prerequisites"},{"location":"developers/prerequisites/#go-tools","text":"Since the project is authored mainly in the Go programming language, the project requires Go tools in order to build and execute the code.","title":"Go Tools"},{"location":"developers/prerequisites/#go-linters","text":"golangci-lint is required to validate that the Go source code complies with the established style guidelines. To install the tool, use this command: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $( go env GOPATH ) /bin latest The directory ~/go/bin needs to be present in your $PATH environment variable for this to work after being installed","title":"Go Linters"},{"location":"developers/prerequisites/#docker","text":"Docker is required to build the project Docker images and also to compile *.proto files into Go source files.","title":"Docker"},{"location":"developers/prerequisites/#local-kubernetes-environment","text":"Some form of local kubernetes development environment is also needed. The core team uses Kind , but there are other options such as Minikube and MicroK8s . Some docker containers may need access to privileged rights e.g. onos-config:debug , onos-topo:debug and opennetworking/mn-stratum and so may not be suited to Kubernetes environments that cannot grant these rights","title":"Local kubernetes environment"},{"location":"developers/prerequisites/#python-3","text":"Python 3 needs to be installed to run the license checking tool in many on the Makefiles. The version provided by your OS will usually be sufficient Verify it is installed with python3 --version","title":"Python 3"},{"location":"developers/prerequisites/#ide","text":"Some form of an integrated development environment is also recommended. The core team uses the GoLand IDE from JetBrains, but there are many other options. Microsoft's Visual Studio Code is one such option and is available as a free download. Note that when using GoLand IDE you should enable integration with Go modules in Preferences -> Go -> Go Modules .","title":"IDE"},{"location":"developers/prerequisites/#license","text":"The project requires that all Go source files are properly annotated using the Apache 2.0 License. Since this requirement is enforced by the CI process, it is strongly recommended that developers setup their IDE to include the license text automatically. GoLand IDE can be easily setup to do this and other IDEs will have a similar mechanism.","title":"License"},{"location":"developers/pull_requests/","text":"Issues and Pull Requests The onos-config project uses GitHub Issues to track work items and bugs that were discovered. Instructions on this page show how to relate Issues to Pull Requests during the development workflow. Issues Issues are units of work to be done in the onos project and can represent new features to be developed or defects to be fixed. Find an Issue You can browse through the existing issues or you can search for a specific one. Open an Issue If you want to work on a new feature that is not yet tracked, please create a new issue to represent the work and assign it to an appropriate project, e.g. Core, Northbound. Work on an Issue After you found or created an issue to work on (e.g. for onos-config project), you should: assign that issue to yourself go to the projects select the project you have assigned the issue to drag and drop the issue to the In Progress column to let people know that you are working on it Pull Requests This section describes how to open a pull request and assign it to one of the several projects in onos-config. Reference an Issue from Your Commit If you have an issue identifying your work in onos-config issues , To automatically link your pull request an issue, before pushing a commit to your fork of onos-config please insert fixes #<issue-number> into the commit message. The following is an example of a complete commit message: Adding pull request workflow Fixes #90 # Please enter the commit message for your changes . Lines starting # with ' # ' will be ignored , and an empty message aborts the commit . # # Date : Fri May 10 11 : 36 : 26 2019 + 0200 # # On branch pr - process # Changes to be committed : # new file : docs / Pull_requests . md # # Changes not staged for commit : # modified : docs / Pull_requests . md # Open a Pull Request When you open a pull request for myfeature you need to add the PR to a project (e.g. Northbound) through the github UI. Please also assign a reviewer out of the suggested ones. If none are suggested please pick one from the core team. More information on opening pull requests can be found in the GitHub documentation . Track a Pull Request After your pull request is included into a onos-config project you can find it under the In Progress tab. At this point in time the PR will go through a lifecycle: Review from different people --> your PR will go into Review in progress state if changes are requested you will have to go back and address them when your PR is approved and Testing is passed it will go under Reviewer approved state after the PR is in Reviewer approved it can be merged when the PR is merged both the PR and the issue will move under Done state","title":"Issues and Pull Requests"},{"location":"developers/pull_requests/#issues-and-pull-requests","text":"The onos-config project uses GitHub Issues to track work items and bugs that were discovered. Instructions on this page show how to relate Issues to Pull Requests during the development workflow.","title":"Issues and Pull Requests"},{"location":"developers/pull_requests/#issues","text":"Issues are units of work to be done in the onos project and can represent new features to be developed or defects to be fixed.","title":"Issues"},{"location":"developers/pull_requests/#find-an-issue","text":"You can browse through the existing issues or you can search for a specific one.","title":"Find an Issue"},{"location":"developers/pull_requests/#open-an-issue","text":"If you want to work on a new feature that is not yet tracked, please create a new issue to represent the work and assign it to an appropriate project, e.g. Core, Northbound.","title":"Open an Issue"},{"location":"developers/pull_requests/#work-on-an-issue","text":"After you found or created an issue to work on (e.g. for onos-config project), you should: assign that issue to yourself go to the projects select the project you have assigned the issue to drag and drop the issue to the In Progress column to let people know that you are working on it","title":"Work on an Issue"},{"location":"developers/pull_requests/#pull-requests","text":"This section describes how to open a pull request and assign it to one of the several projects in onos-config.","title":"Pull Requests"},{"location":"developers/pull_requests/#reference-an-issue-from-your-commit","text":"If you have an issue identifying your work in onos-config issues , To automatically link your pull request an issue, before pushing a commit to your fork of onos-config please insert fixes #<issue-number> into the commit message. The following is an example of a complete commit message: Adding pull request workflow Fixes #90 # Please enter the commit message for your changes . Lines starting # with ' # ' will be ignored , and an empty message aborts the commit . # # Date : Fri May 10 11 : 36 : 26 2019 + 0200 # # On branch pr - process # Changes to be committed : # new file : docs / Pull_requests . md # # Changes not staged for commit : # modified : docs / Pull_requests . md #","title":"Reference an Issue from Your Commit"},{"location":"developers/pull_requests/#open-a-pull-request","text":"When you open a pull request for myfeature you need to add the PR to a project (e.g. Northbound) through the github UI. Please also assign a reviewer out of the suggested ones. If none are suggested please pick one from the core team. More information on opening pull requests can be found in the GitHub documentation .","title":"Open a Pull Request"},{"location":"developers/pull_requests/#track-a-pull-request","text":"After your pull request is included into a onos-config project you can find it under the In Progress tab. At this point in time the PR will go through a lifecycle: Review from different people --> your PR will go into Review in progress state if changes are requested you will have to go back and address them when your PR is approved and Testing is passed it will go under Reviewer approved state after the PR is in Reviewer approved it can be merged when the PR is merged both the PR and the issue will move under Done state","title":"Track a Pull Request"},{"location":"onos-cli/docs/deployment/","text":"Deploying onos-cli with Helm This guide deploys onos-cli through it's Helm chart assumes you have a Kubernetes cluster running with an atomix controller deployed in a namespace. If you dont' specify the --namespace in the commands below atomix controller must be deployed in the default namespace. onos-cli Helm chart is based on Helm 3.0 version, with no need for the Tiller pod to be present. If you don't have a cluster running and want to try on your local machine please follow first the Kubernetes setup steps outlined in deploy with Helm . Installing the Chart To install the chart, simply run helm install deployments/helm/onos-cli from the root directory of this project: helm install onos-cli deployments/helm/onos-cli NAME: onos-cli LAST DEPLOYED: Tue Nov 26 13 :31:42 2019 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None helm install assigns a unique name to the chart and displays all the k8s resources that were created by it. To list the charts that are installed and view their statuses, run helm ls : helm ls NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ... onos-cli 1 Tue May 14 18 :56:39 2019 DEPLOYED onos-cli-0.0.1 0 .0.1 default Installing the chart in a different namespace. To install the chart in a different namespace please modify the default occurances in the values.yaml file. Please be aware to change also atomix-controller.default.svc.cluster.local:5679 to atomix-controller.<your_name_space_here>.svc.cluster.local:5679 . Then issue the helm install command helm install onos-cli --namespace <your_name_space> deployments/helm/onos-cli Installing the chart with debug. onos-cli offers the capability to open a debug port (4000) to the image. To enable the debug capabilities please set the debug flag to true in values.yaml or pass it to helm install helm install onos-cli deployments/helm/onos-cli --set debug = true Troubleshoot If your chart does not install or the pod is not running for some reason and/or you modified values Helm offers two flags to help you debug your chart: --dry-run check the chart without actually installing the pod. --debug prints out more information about your chart helm install onos-cli --debug --dry-run ./deployments/helm/onos-cli/ Uninstalling the chart. To remove the onos-cli pod issue helm delete onos-cli Pod Information To view the pods that are deployed, run kubectl get pods . Getting access to the onos-cli console To gain acess to the onos-cli console and be able of issuing the different cli commands the following command is need: > kubectl -n default exec <cli_pod_name> -it -- /bin/sh At this point you can execute topo , config and all the other commands. For example: onos topo get devices","title":"How To Deploy with Helm"},{"location":"onos-cli/docs/deployment/#deploying-onos-cli-with-helm","text":"This guide deploys onos-cli through it's Helm chart assumes you have a Kubernetes cluster running with an atomix controller deployed in a namespace. If you dont' specify the --namespace in the commands below atomix controller must be deployed in the default namespace. onos-cli Helm chart is based on Helm 3.0 version, with no need for the Tiller pod to be present. If you don't have a cluster running and want to try on your local machine please follow first the Kubernetes setup steps outlined in deploy with Helm .","title":"Deploying onos-cli with Helm"},{"location":"onos-cli/docs/deployment/#installing-the-chart","text":"To install the chart, simply run helm install deployments/helm/onos-cli from the root directory of this project: helm install onos-cli deployments/helm/onos-cli NAME: onos-cli LAST DEPLOYED: Tue Nov 26 13 :31:42 2019 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None helm install assigns a unique name to the chart and displays all the k8s resources that were created by it. To list the charts that are installed and view their statuses, run helm ls : helm ls NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ... onos-cli 1 Tue May 14 18 :56:39 2019 DEPLOYED onos-cli-0.0.1 0 .0.1 default","title":"Installing the Chart"},{"location":"onos-cli/docs/deployment/#installing-the-chart-in-a-different-namespace","text":"To install the chart in a different namespace please modify the default occurances in the values.yaml file. Please be aware to change also atomix-controller.default.svc.cluster.local:5679 to atomix-controller.<your_name_space_here>.svc.cluster.local:5679 . Then issue the helm install command helm install onos-cli --namespace <your_name_space> deployments/helm/onos-cli","title":"Installing the chart in a different namespace."},{"location":"onos-cli/docs/deployment/#installing-the-chart-with-debug","text":"onos-cli offers the capability to open a debug port (4000) to the image. To enable the debug capabilities please set the debug flag to true in values.yaml or pass it to helm install helm install onos-cli deployments/helm/onos-cli --set debug = true","title":"Installing the chart with debug."},{"location":"onos-cli/docs/deployment/#troubleshoot","text":"If your chart does not install or the pod is not running for some reason and/or you modified values Helm offers two flags to help you debug your chart: --dry-run check the chart without actually installing the pod. --debug prints out more information about your chart helm install onos-cli --debug --dry-run ./deployments/helm/onos-cli/","title":"Troubleshoot"},{"location":"onos-cli/docs/deployment/#uninstalling-the-chart","text":"To remove the onos-cli pod issue helm delete onos-cli","title":"Uninstalling the chart."},{"location":"onos-cli/docs/deployment/#pod-information","text":"To view the pods that are deployed, run kubectl get pods .","title":"Pod Information"},{"location":"onos-cli/docs/deployment/#getting-access-to-the-onos-cli-console","text":"To gain acess to the onos-cli console and be able of issuing the different cli commands the following command is need: > kubectl -n default exec <cli_pod_name> -it -- /bin/sh At this point you can execute topo , config and all the other commands. For example: onos topo get devices","title":"Getting access to the onos-cli console"},{"location":"onos-cli/docs/setup/","text":"How to install and run onos-cli? To install onos command line client, run the following command: > export GO111MODULE = on > go get github.com/onosproject/onos-cli/cmd/onos ONOS-CLI Auto Completion The onos client supports shell auto-completion for its various commands, sub-commands and flags. You can enable this feature for bash or zsh as follows: Bash Auto-Completion > eval \" $( onos completion bash ) \" After that, you should be able to use the TAB key to obtain suggestions for valid options. Zsh Auto-Completion > source < ( onos completion zsh ) Note : Note: We also recommend to add the output of the above commands to .bashrc or .zshrc . How to run onos client? After the above steps, if you run onos from command line interface, you should be able to see an output like this: > onos ONOS command line client Usage: onos [ command ] Available Commands: changes Lists records of configuration changes completion Generated bash or zsh auto-completion script config Read and update CLI configuration options configs Lists details of device configuration changes devices Manages inventory of network devices devicetree Lists devices and their configuration in tree format help Help about any command init Initialize the ONOS CLI configuration models Manages model plugins net-changes Lists network configuration changes rollback Rolls-back a network configuration change Flags: -a, --address string the controller address ( default \":5150\" ) -c, --certPath string path to client certificate ( default \"client1.crt\" ) --config string config file ( default: $HOME /.onos/config.yaml ) -h, --help help for onos -k, --keyPath string path to client private key ( default \"client1.key\" ) Use \"onos [command] --help\" for more information about a command.","title":"How To Install and Run CLI Subsystem?"},{"location":"onos-cli/docs/setup/#how-to-install-and-run-onos-cli","text":"To install onos command line client, run the following command: > export GO111MODULE = on > go get github.com/onosproject/onos-cli/cmd/onos","title":"How to install and run onos-cli?"},{"location":"onos-cli/docs/setup/#onos-cli-auto-completion","text":"The onos client supports shell auto-completion for its various commands, sub-commands and flags. You can enable this feature for bash or zsh as follows:","title":"ONOS-CLI Auto Completion"},{"location":"onos-cli/docs/setup/#bash-auto-completion","text":"> eval \" $( onos completion bash ) \" After that, you should be able to use the TAB key to obtain suggestions for valid options.","title":"Bash Auto-Completion"},{"location":"onos-cli/docs/setup/#zsh-auto-completion","text":"> source < ( onos completion zsh ) Note : Note: We also recommend to add the output of the above commands to .bashrc or .zshrc .","title":"Zsh Auto-Completion"},{"location":"onos-cli/docs/setup/#how-to-run-onos-client","text":"After the above steps, if you run onos from command line interface, you should be able to see an output like this: > onos ONOS command line client Usage: onos [ command ] Available Commands: changes Lists records of configuration changes completion Generated bash or zsh auto-completion script config Read and update CLI configuration options configs Lists details of device configuration changes devices Manages inventory of network devices devicetree Lists devices and their configuration in tree format help Help about any command init Initialize the ONOS CLI configuration models Manages model plugins net-changes Lists network configuration changes rollback Rolls-back a network configuration change Flags: -a, --address string the controller address ( default \":5150\" ) -c, --certPath string path to client certificate ( default \"client1.crt\" ) --config string config file ( default: $HOME /.onos/config.yaml ) -h, --help help for onos -k, --keyPath string path to client private key ( default \"client1.key\" ) Use \"onos [command] --help\" for more information about a command.","title":"How to run onos client?"},{"location":"onos-cli/docs/cli/onos/","text":"onos ONOS command line client Synopsis ONOS command line client Options - h , -- help help for onos SEE ALSO onos completion - Generated bash or zsh auto-completion script onos config - ONOS configuration subsystem commands onos topo - onos ztp - ONOS zero-touch provisioning subsystem commands Auto generated by spf13/cobra on 18-Nov-2019","title":"ONOS CLI Commands"},{"location":"onos-cli/docs/cli/onos/#onos","text":"ONOS command line client","title":"onos"},{"location":"onos-cli/docs/cli/onos/#synopsis","text":"ONOS command line client","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos/#options","text":"- h , -- help help for onos","title":"Options"},{"location":"onos-cli/docs/cli/onos/#see-also","text":"onos completion - Generated bash or zsh auto-completion script onos config - ONOS configuration subsystem commands onos topo - onos ztp - ONOS zero-touch provisioning subsystem commands","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_completion/","text":"onos completion Generated bash or zsh auto-completion script Synopsis Generated bash or zsh auto-completion script onos completion < shell > [ flags ] Examples For bash run the following command from the shell : eval $ ( onos completion bash ) . For zsh run the following command from the shell : source < ( onos completion zsh ) . Options - h , -- help help for completion SEE ALSO onos - ONOS command line client Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos completion"},{"location":"onos-cli/docs/cli/onos_completion/#onos-completion","text":"Generated bash or zsh auto-completion script","title":"onos completion"},{"location":"onos-cli/docs/cli/onos_completion/#synopsis","text":"Generated bash or zsh auto-completion script onos completion < shell > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_completion/#examples","text":"For bash run the following command from the shell : eval $ ( onos completion bash ) . For zsh run the following command from the shell : source < ( onos completion zsh ) .","title":"Examples"},{"location":"onos-cli/docs/cli/onos_completion/#options","text":"- h , -- help help for completion","title":"Options"},{"location":"onos-cli/docs/cli/onos_completion/#see-also","text":"onos - ONOS command line client","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_completion/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config/","text":"onos config ONOS configuration subsystem commands Synopsis ONOS configuration subsystem commands Options - h , -- help help for config SEE ALSO onos - ONOS command line client onos config add - Add a config resource onos config compact-changes - Takes a snapshot of network and device changes onos config get - Get config resources onos config rollback - Rolls-back a network change onos config snapshot - Commands for managing snapshots onos config watch - Watch for updates to a config resource type Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config"},{"location":"onos-cli/docs/cli/onos_config/#onos-config","text":"ONOS configuration subsystem commands","title":"onos config"},{"location":"onos-cli/docs/cli/onos_config/#synopsis","text":"ONOS configuration subsystem commands","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config/#options","text":"- h , -- help help for config","title":"Options"},{"location":"onos-cli/docs/cli/onos_config/#see-also","text":"onos - ONOS command line client onos config add - Add a config resource onos config compact-changes - Takes a snapshot of network and device changes onos config get - Get config resources onos config rollback - Rolls-back a network change onos config snapshot - Commands for managing snapshots onos config watch - Watch for updates to a config resource type","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_add/","text":"onos config add Add a config resource Synopsis Add a config resource Options - h , -- help help for add SEE ALSO onos config - ONOS configuration subsystem commands onos config add plugin - Loads a new model plugin from server Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config add"},{"location":"onos-cli/docs/cli/onos_config_add/#onos-config-add","text":"Add a config resource","title":"onos config add"},{"location":"onos-cli/docs/cli/onos_config_add/#synopsis","text":"Add a config resource","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_add/#options","text":"- h , -- help help for add","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_add/#see-also","text":"onos config - ONOS configuration subsystem commands onos config add plugin - Loads a new model plugin from server","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_add/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_add_plugin/","text":"onos config add plugin Loads a new model plugin from server Synopsis Loads a new model plugin from server onos config add plugin < plugin path and filename > [ flags ] Options - h , -- help help for plugin SEE ALSO onos config add - Add a config resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config add plugin"},{"location":"onos-cli/docs/cli/onos_config_add_plugin/#onos-config-add-plugin","text":"Loads a new model plugin from server","title":"onos config add plugin"},{"location":"onos-cli/docs/cli/onos_config_add_plugin/#synopsis","text":"Loads a new model plugin from server onos config add plugin < plugin path and filename > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_add_plugin/#options","text":"- h , -- help help for plugin","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_add_plugin/#see-also","text":"onos config add - Add a config resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_add_plugin/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_compact-changes/","text":"onos config compact-changes Takes a snapshot of network and device changes Synopsis Takes a snapshot of network and device changes onos config compact - changes [ flags ] Options - h , -- help help for compact - changes - r , -- retention - period duration the period for which to retain all changes SEE ALSO onos config - ONOS configuration subsystem commands Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config compact changes"},{"location":"onos-cli/docs/cli/onos_config_compact-changes/#onos-config-compact-changes","text":"Takes a snapshot of network and device changes","title":"onos config compact-changes"},{"location":"onos-cli/docs/cli/onos_config_compact-changes/#synopsis","text":"Takes a snapshot of network and device changes onos config compact - changes [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_compact-changes/#options","text":"- h , -- help help for compact - changes - r , -- retention - period duration the period for which to retain all changes","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_compact-changes/#see-also","text":"onos config - ONOS configuration subsystem commands","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_compact-changes/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_get/","text":"onos config get Get config resources Synopsis Get config resources Options - h , -- help help for get SEE ALSO onos config - ONOS configuration subsystem commands onos config get device-changes - List current changes on a device onos config get network-changes - List current network changes onos config get opstate - Get the Opstate cache for a device onos config get plugins - Lists the loaded model plugins Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config get"},{"location":"onos-cli/docs/cli/onos_config_get/#onos-config-get","text":"Get config resources","title":"onos config get"},{"location":"onos-cli/docs/cli/onos_config_get/#synopsis","text":"Get config resources","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_get/#options","text":"- h , -- help help for get","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_get/#see-also","text":"onos config - ONOS configuration subsystem commands onos config get device-changes - List current changes on a device onos config get network-changes - List current network changes onos config get opstate - Get the Opstate cache for a device onos config get plugins - Lists the loaded model plugins","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_get/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_get_device-changes/","text":"onos config get device-changes List current changes on a device Synopsis List current changes on a device onos config get device - changes < deviceid > [ flags ] Options - h , -- help help for device - changes -- no - headers disables output headers - v , -- version string device version SEE ALSO onos config get - Get config resources Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config get device changes"},{"location":"onos-cli/docs/cli/onos_config_get_device-changes/#onos-config-get-device-changes","text":"List current changes on a device","title":"onos config get device-changes"},{"location":"onos-cli/docs/cli/onos_config_get_device-changes/#synopsis","text":"List current changes on a device onos config get device - changes < deviceid > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_get_device-changes/#options","text":"- h , -- help help for device - changes -- no - headers disables output headers - v , -- version string device version","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_get_device-changes/#see-also","text":"onos config get - Get config resources","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_get_device-changes/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_get_network-changes/","text":"onos config get network-changes List current network changes Synopsis List current network changes onos config get network - changes [ changeId wildcard ] [ flags ] Options - h , -- help help for network - changes -- no - headers disables output headers - v , -- verbose whether to print the change with verbose output SEE ALSO onos config get - Get config resources Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config get network changes"},{"location":"onos-cli/docs/cli/onos_config_get_network-changes/#onos-config-get-network-changes","text":"List current network changes","title":"onos config get network-changes"},{"location":"onos-cli/docs/cli/onos_config_get_network-changes/#synopsis","text":"List current network changes onos config get network - changes [ changeId wildcard ] [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_get_network-changes/#options","text":"- h , -- help help for network - changes -- no - headers disables output headers - v , -- verbose whether to print the change with verbose output","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_get_network-changes/#see-also","text":"onos config get - Get config resources","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_get_network-changes/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_get_opstate/","text":"onos config get opstate Get the Opstate cache for a device Synopsis Get the Opstate cache for a device onos config get opstate < deviceid > [ flags ] Options - h , -- help help for opstate -- no - headers disables output headers SEE ALSO onos config get - Get config resources Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config get opstate"},{"location":"onos-cli/docs/cli/onos_config_get_opstate/#onos-config-get-opstate","text":"Get the Opstate cache for a device","title":"onos config get opstate"},{"location":"onos-cli/docs/cli/onos_config_get_opstate/#synopsis","text":"Get the Opstate cache for a device onos config get opstate < deviceid > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_get_opstate/#options","text":"- h , -- help help for opstate -- no - headers disables output headers","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_get_opstate/#see-also","text":"onos config get - Get config resources","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_get_opstate/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_get_plugins/","text":"onos config get plugins Lists the loaded model plugins Synopsis Lists the loaded model plugins onos config get plugins [ flags ] Options - h , -- help help for plugins - v , -- verbose display verbose output SEE ALSO onos config get - Get config resources Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config get plugins"},{"location":"onos-cli/docs/cli/onos_config_get_plugins/#onos-config-get-plugins","text":"Lists the loaded model plugins","title":"onos config get plugins"},{"location":"onos-cli/docs/cli/onos_config_get_plugins/#synopsis","text":"Lists the loaded model plugins onos config get plugins [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_get_plugins/#options","text":"- h , -- help help for plugins - v , -- verbose display verbose output","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_get_plugins/#see-also","text":"onos config get - Get config resources","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_get_plugins/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_rollback/","text":"onos config rollback Rolls-back a network change Synopsis Rolls-back a network change onos config rollback < changeId > [ flags ] Options - h , -- help help for rollback SEE ALSO onos config - ONOS configuration subsystem commands Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config rollback"},{"location":"onos-cli/docs/cli/onos_config_rollback/#onos-config-rollback","text":"Rolls-back a network change","title":"onos config rollback"},{"location":"onos-cli/docs/cli/onos_config_rollback/#synopsis","text":"Rolls-back a network change onos config rollback < changeId > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_rollback/#options","text":"- h , -- help help for rollback","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_rollback/#see-also","text":"onos config - ONOS configuration subsystem commands","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_rollback/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_snapshot/","text":"onos config snapshot Commands for managing snapshots Synopsis Commands for managing snapshots onos config snapshot [ flags ] Options - h , -- help help for snapshot - v , -- version string device version SEE ALSO onos config - ONOS configuration subsystem commands Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config snapshot"},{"location":"onos-cli/docs/cli/onos_config_snapshot/#onos-config-snapshot","text":"Commands for managing snapshots","title":"onos config snapshot"},{"location":"onos-cli/docs/cli/onos_config_snapshot/#synopsis","text":"Commands for managing snapshots onos config snapshot [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_snapshot/#options","text":"- h , -- help help for snapshot - v , -- version string device version","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_snapshot/#see-also","text":"onos config - ONOS configuration subsystem commands","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_snapshot/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_watch/","text":"onos config watch Watch for updates to a config resource type Synopsis Watch for updates to a config resource type Options - h , -- help help for watch SEE ALSO onos config - ONOS configuration subsystem commands onos config watch device-changes - Watch for changes on a device with updates onos config watch network-changes - Watch for network changes with updates onos config watch opstate - Watch the Opstate cache for a device Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config watch"},{"location":"onos-cli/docs/cli/onos_config_watch/#onos-config-watch","text":"Watch for updates to a config resource type","title":"onos config watch"},{"location":"onos-cli/docs/cli/onos_config_watch/#synopsis","text":"Watch for updates to a config resource type","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_watch/#options","text":"- h , -- help help for watch","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_watch/#see-also","text":"onos config - ONOS configuration subsystem commands onos config watch device-changes - Watch for changes on a device with updates onos config watch network-changes - Watch for network changes with updates onos config watch opstate - Watch the Opstate cache for a device","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_watch/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_watch_device-changes/","text":"onos config watch device-changes Watch for changes on a device with updates Synopsis Watch for changes on a device with updates onos config watch device - changes < deviceid > [ flags ] Options - h , -- help help for device - changes -- no - headers disables output headers - v , -- version string an optional version SEE ALSO onos config watch - Watch for updates to a config resource type Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config watch device changes"},{"location":"onos-cli/docs/cli/onos_config_watch_device-changes/#onos-config-watch-device-changes","text":"Watch for changes on a device with updates","title":"onos config watch device-changes"},{"location":"onos-cli/docs/cli/onos_config_watch_device-changes/#synopsis","text":"Watch for changes on a device with updates onos config watch device - changes < deviceid > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_watch_device-changes/#options","text":"- h , -- help help for device - changes -- no - headers disables output headers - v , -- version string an optional version","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_watch_device-changes/#see-also","text":"onos config watch - Watch for updates to a config resource type","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_watch_device-changes/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_watch_network-changes/","text":"onos config watch network-changes Watch for network changes with updates Synopsis Watch for network changes with updates onos config watch network - changes [ changeId wildcard ] [ flags ] Options - h , -- help help for network - changes -- no - headers disables output headers - v , -- verbose whether to print the change with verbose output SEE ALSO onos config watch - Watch for updates to a config resource type Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config watch network changes"},{"location":"onos-cli/docs/cli/onos_config_watch_network-changes/#onos-config-watch-network-changes","text":"Watch for network changes with updates","title":"onos config watch network-changes"},{"location":"onos-cli/docs/cli/onos_config_watch_network-changes/#synopsis","text":"Watch for network changes with updates onos config watch network - changes [ changeId wildcard ] [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_watch_network-changes/#options","text":"- h , -- help help for network - changes -- no - headers disables output headers - v , -- verbose whether to print the change with verbose output","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_watch_network-changes/#see-also","text":"onos config watch - Watch for updates to a config resource type","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_watch_network-changes/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_config_watch_opstate/","text":"onos config watch opstate Watch the Opstate cache for a device Synopsis Watch the Opstate cache for a device onos config watch opstate < deviceid > [ flags ] Options - h , -- help help for opstate -- no - headers disables output headers SEE ALSO onos config watch - Watch for updates to a config resource type Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos config watch opstate"},{"location":"onos-cli/docs/cli/onos_config_watch_opstate/#onos-config-watch-opstate","text":"Watch the Opstate cache for a device","title":"onos config watch opstate"},{"location":"onos-cli/docs/cli/onos_config_watch_opstate/#synopsis","text":"Watch the Opstate cache for a device onos config watch opstate < deviceid > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_config_watch_opstate/#options","text":"- h , -- help help for opstate -- no - headers disables output headers","title":"Options"},{"location":"onos-cli/docs/cli/onos_config_watch_opstate/#see-also","text":"onos config watch - Watch for updates to a config resource type","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_config_watch_opstate/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo/","text":"onos topo Synopsis Options - h , -- help help for topo SEE ALSO onos - ONOS command line client onos topo add - Add a topology resource onos topo get - Get topology resources onos topo remove - Remove a topology resource onos topo update - Update a topology resource onos topo watch - Watch for changes to a topology resource type Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo"},{"location":"onos-cli/docs/cli/onos_topo/#onos-topo","text":"","title":"onos topo"},{"location":"onos-cli/docs/cli/onos_topo/#synopsis","text":"","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo/#options","text":"- h , -- help help for topo","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo/#see-also","text":"onos - ONOS command line client onos topo add - Add a topology resource onos topo get - Get topology resources onos topo remove - Remove a topology resource onos topo update - Update a topology resource onos topo watch - Watch for changes to a topology resource type","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_add/","text":"onos topo add Add a topology resource Synopsis Add a topology resource Options - h , -- help help for add SEE ALSO onos topo - onos topo add device - Add a device Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo add"},{"location":"onos-cli/docs/cli/onos_topo_add/#onos-topo-add","text":"Add a topology resource","title":"onos topo add"},{"location":"onos-cli/docs/cli/onos_topo_add/#synopsis","text":"Add a topology resource","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_add/#options","text":"- h , -- help help for add","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_add/#see-also","text":"onos topo - onos topo add device - Add a device","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_add/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_add_device/","text":"onos topo add device Add a device Synopsis Add a device onos topo add device < id > [ args ] [ flags ] Options - a , -- address string the address of the device -- attributes stringToString an arbitrary mapping of device attributes ( default [] ) -- ca - cert string the TLS CA certificate -- cert string the TLS certificate - h , -- help help for device -- insecure whether to enable skip verification -- key string the TLS key - p , -- password string the device password -- plain whether to connect over a plaintext connection - r , -- role string the device role - g , -- target string the device target name -- timeout duration the device connection timeout ( default 5 s ) - t , -- type string the type of the device - u , -- user string the device username - v , -- version string the device software version SEE ALSO onos topo add - Add a topology resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo add device"},{"location":"onos-cli/docs/cli/onos_topo_add_device/#onos-topo-add-device","text":"Add a device","title":"onos topo add device"},{"location":"onos-cli/docs/cli/onos_topo_add_device/#synopsis","text":"Add a device onos topo add device < id > [ args ] [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_add_device/#options","text":"- a , -- address string the address of the device -- attributes stringToString an arbitrary mapping of device attributes ( default [] ) -- ca - cert string the TLS CA certificate -- cert string the TLS certificate - h , -- help help for device -- insecure whether to enable skip verification -- key string the TLS key - p , -- password string the device password -- plain whether to connect over a plaintext connection - r , -- role string the device role - g , -- target string the device target name -- timeout duration the device connection timeout ( default 5 s ) - t , -- type string the type of the device - u , -- user string the device username - v , -- version string the device software version","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_add_device/#see-also","text":"onos topo add - Add a topology resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_add_device/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_get/","text":"onos topo get Get topology resources Synopsis Get topology resources Options - h , -- help help for get SEE ALSO onos topo - onos topo get device - Get a device Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo get"},{"location":"onos-cli/docs/cli/onos_topo_get/#onos-topo-get","text":"Get topology resources","title":"onos topo get"},{"location":"onos-cli/docs/cli/onos_topo_get/#synopsis","text":"Get topology resources","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_get/#options","text":"- h , -- help help for get","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_get/#see-also","text":"onos topo - onos topo get device - Get a device","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_get/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_get_device/","text":"onos topo get device Get a device Synopsis Get a device onos topo get device < id > [ flags ] Options - h , -- help help for device -- no - headers disables output headers - v , -- verbose whether to print the device with verbose output SEE ALSO onos topo get - Get topology resources Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo get device"},{"location":"onos-cli/docs/cli/onos_topo_get_device/#onos-topo-get-device","text":"Get a device","title":"onos topo get device"},{"location":"onos-cli/docs/cli/onos_topo_get_device/#synopsis","text":"Get a device onos topo get device < id > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_get_device/#options","text":"- h , -- help help for device -- no - headers disables output headers - v , -- verbose whether to print the device with verbose output","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_get_device/#see-also","text":"onos topo get - Get topology resources","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_get_device/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_remove/","text":"onos topo remove Remove a topology resource Synopsis Remove a topology resource Options - h , -- help help for remove SEE ALSO onos topo - onos topo remove device - Remove a device Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo remove"},{"location":"onos-cli/docs/cli/onos_topo_remove/#onos-topo-remove","text":"Remove a topology resource","title":"onos topo remove"},{"location":"onos-cli/docs/cli/onos_topo_remove/#synopsis","text":"Remove a topology resource","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_remove/#options","text":"- h , -- help help for remove","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_remove/#see-also","text":"onos topo - onos topo remove device - Remove a device","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_remove/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_remove_device/","text":"onos topo remove device Remove a device Synopsis Remove a device onos topo remove device < id > [ args ] [ flags ] Options - h , -- help help for device SEE ALSO onos topo remove - Remove a topology resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo remove device"},{"location":"onos-cli/docs/cli/onos_topo_remove_device/#onos-topo-remove-device","text":"Remove a device","title":"onos topo remove device"},{"location":"onos-cli/docs/cli/onos_topo_remove_device/#synopsis","text":"Remove a device onos topo remove device < id > [ args ] [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_remove_device/#options","text":"- h , -- help help for device","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_remove_device/#see-also","text":"onos topo remove - Remove a topology resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_remove_device/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_update/","text":"onos topo update Update a topology resource Synopsis Update a topology resource Options - h , -- help help for update SEE ALSO onos topo - onos topo update device - Update a device Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo update"},{"location":"onos-cli/docs/cli/onos_topo_update/#onos-topo-update","text":"Update a topology resource","title":"onos topo update"},{"location":"onos-cli/docs/cli/onos_topo_update/#synopsis","text":"Update a topology resource","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_update/#options","text":"- h , -- help help for update","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_update/#see-also","text":"onos topo - onos topo update device - Update a device","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_update/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_update_device/","text":"onos topo update device Update a device Synopsis Update a device onos topo update device < id > [ args ] [ flags ] Options - a , -- address string the address of the device -- attributes stringToString an arbitrary mapping of device attributes ( default [] ) -- ca - cert string the TLS CA certificate -- cert string the TLS certificate - h , -- help help for device -- insecure whether to enable skip verification -- key string the TLS key - p , -- password string the device password -- plain whether to connect over a plaintext connection - r , -- role string the device role - g , -- target string the device target name -- timeout duration the device connection timeout ( default 30 s ) - t , -- type string the type of the device - u , -- user string the device username - v , -- version string the device software version SEE ALSO onos topo update - Update a topology resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo update device"},{"location":"onos-cli/docs/cli/onos_topo_update_device/#onos-topo-update-device","text":"Update a device","title":"onos topo update device"},{"location":"onos-cli/docs/cli/onos_topo_update_device/#synopsis","text":"Update a device onos topo update device < id > [ args ] [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_update_device/#options","text":"- a , -- address string the address of the device -- attributes stringToString an arbitrary mapping of device attributes ( default [] ) -- ca - cert string the TLS CA certificate -- cert string the TLS certificate - h , -- help help for device -- insecure whether to enable skip verification -- key string the TLS key - p , -- password string the device password -- plain whether to connect over a plaintext connection - r , -- role string the device role - g , -- target string the device target name -- timeout duration the device connection timeout ( default 30 s ) - t , -- type string the type of the device - u , -- user string the device username - v , -- version string the device software version","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_update_device/#see-also","text":"onos topo update - Update a topology resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_update_device/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_watch/","text":"onos topo watch Watch for changes to a topology resource type Synopsis Watch for changes to a topology resource type Options - h , -- help help for watch SEE ALSO onos topo - onos topo watch device - Watch for device changes Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo watch"},{"location":"onos-cli/docs/cli/onos_topo_watch/#onos-topo-watch","text":"Watch for changes to a topology resource type","title":"onos topo watch"},{"location":"onos-cli/docs/cli/onos_topo_watch/#synopsis","text":"Watch for changes to a topology resource type","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_watch/#options","text":"- h , -- help help for watch","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_watch/#see-also","text":"onos topo - onos topo watch device - Watch for device changes","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_watch/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_topo_watch_device/","text":"onos topo watch device Watch for device changes Synopsis Watch for device changes onos topo watch device < id > [ args ] [ flags ] Options - h , -- help help for device -- no - headers disables output headers - v , -- verbose whether to print the device with verbose output SEE ALSO onos topo watch - Watch for changes to a topology resource type Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos topo watch device"},{"location":"onos-cli/docs/cli/onos_topo_watch_device/#onos-topo-watch-device","text":"Watch for device changes","title":"onos topo watch device"},{"location":"onos-cli/docs/cli/onos_topo_watch_device/#synopsis","text":"Watch for device changes onos topo watch device < id > [ args ] [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_topo_watch_device/#options","text":"- h , -- help help for device -- no - headers disables output headers - v , -- verbose whether to print the device with verbose output","title":"Options"},{"location":"onos-cli/docs/cli/onos_topo_watch_device/#see-also","text":"onos topo watch - Watch for changes to a topology resource type","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_topo_watch_device/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp/","text":"onos ztp ONOS zero-touch provisioning subsystem commands Synopsis ONOS zero-touch provisioning subsystem commands Options - h , -- help help for ztp SEE ALSO onos - ONOS command line client onos ztp add - Add a ZTP resource onos ztp config - Read and update the ztp configuration onos ztp get - Get ZTP resources onos ztp remove - Remove a ZTP resource onos ztp update - Update a ZTP resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp"},{"location":"onos-cli/docs/cli/onos_ztp/#onos-ztp","text":"ONOS zero-touch provisioning subsystem commands","title":"onos ztp"},{"location":"onos-cli/docs/cli/onos_ztp/#synopsis","text":"ONOS zero-touch provisioning subsystem commands","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp/#options","text":"- h , -- help help for ztp","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp/#see-also","text":"onos - ONOS command line client onos ztp add - Add a ZTP resource onos ztp config - Read and update the ztp configuration onos ztp get - Get ZTP resources onos ztp remove - Remove a ZTP resource onos ztp update - Update a ZTP resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_add/","text":"onos ztp add Add a ZTP resource Synopsis Add a ZTP resource Options - h , -- help help for add SEE ALSO onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp add role - Add a device role Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp add"},{"location":"onos-cli/docs/cli/onos_ztp_add/#onos-ztp-add","text":"Add a ZTP resource","title":"onos ztp add"},{"location":"onos-cli/docs/cli/onos_ztp_add/#synopsis","text":"Add a ZTP resource","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_add/#options","text":"- h , -- help help for add","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_add/#see-also","text":"onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp add role - Add a device role","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_add/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_add_role/","text":"onos ztp add role Add a device role Synopsis Add a device role onos ztp add role < fileName > [ flags ] Options - h , -- help help for role -- overwrite Overwrite the role if it already exists SEE ALSO onos ztp add - Add a ZTP resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp add role"},{"location":"onos-cli/docs/cli/onos_ztp_add_role/#onos-ztp-add-role","text":"Add a device role","title":"onos ztp add role"},{"location":"onos-cli/docs/cli/onos_ztp_add_role/#synopsis","text":"Add a device role onos ztp add role < fileName > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_add_role/#options","text":"- h , -- help help for role -- overwrite Overwrite the role if it already exists","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_add_role/#see-also","text":"onos ztp add - Add a ZTP resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_add_role/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_config/","text":"onos ztp config Read and update the ztp configuration Synopsis Read and update the ztp configuration Options - h , -- help help for config SEE ALSO onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp config get - Get a configuration value onos ztp config set - Set a configuration key/value pair Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp config"},{"location":"onos-cli/docs/cli/onos_ztp_config/#onos-ztp-config","text":"Read and update the ztp configuration","title":"onos ztp config"},{"location":"onos-cli/docs/cli/onos_ztp_config/#synopsis","text":"Read and update the ztp configuration","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_config/#options","text":"- h , -- help help for config","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_config/#see-also","text":"onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp config get - Get a configuration value onos ztp config set - Set a configuration key/value pair","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_config/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_config_get/","text":"onos ztp config get Get a configuration value Synopsis Get a configuration value onos ztp config get < key > [ flags ] Options - h , -- help help for get SEE ALSO onos ztp config - Read and update the ztp configuration Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp config get"},{"location":"onos-cli/docs/cli/onos_ztp_config_get/#onos-ztp-config-get","text":"Get a configuration value","title":"onos ztp config get"},{"location":"onos-cli/docs/cli/onos_ztp_config_get/#synopsis","text":"Get a configuration value onos ztp config get < key > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_config_get/#options","text":"- h , -- help help for get","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_config_get/#see-also","text":"onos ztp config - Read and update the ztp configuration","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_config_get/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_config_set/","text":"onos ztp config set Set a configuration key/value pair Synopsis Set a configuration key/value pair onos ztp config set < key > < value > [ flags ] Options - h , -- help help for set SEE ALSO onos ztp config - Read and update the ztp configuration Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp config set"},{"location":"onos-cli/docs/cli/onos_ztp_config_set/#onos-ztp-config-set","text":"Set a configuration key/value pair","title":"onos ztp config set"},{"location":"onos-cli/docs/cli/onos_ztp_config_set/#synopsis","text":"Set a configuration key/value pair onos ztp config set < key > < value > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_config_set/#options","text":"- h , -- help help for set","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_config_set/#see-also","text":"onos ztp config - Read and update the ztp configuration","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_config_set/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_get/","text":"onos ztp get Get ZTP resources Synopsis Get ZTP resources Options - h , -- help help for get SEE ALSO onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp get role - Get a device role onos ztp get roles - Get device roles Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp get"},{"location":"onos-cli/docs/cli/onos_ztp_get/#onos-ztp-get","text":"Get ZTP resources","title":"onos ztp get"},{"location":"onos-cli/docs/cli/onos_ztp_get/#synopsis","text":"Get ZTP resources","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_get/#options","text":"- h , -- help help for get","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_get/#see-also","text":"onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp get role - Get a device role onos ztp get roles - Get device roles","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_get/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_get_role/","text":"onos ztp get role Get a device role Synopsis Get a device role onos ztp get role < roleName > [ flags ] Options - h , -- help help for role SEE ALSO onos ztp get - Get ZTP resources Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp get role"},{"location":"onos-cli/docs/cli/onos_ztp_get_role/#onos-ztp-get-role","text":"Get a device role","title":"onos ztp get role"},{"location":"onos-cli/docs/cli/onos_ztp_get_role/#synopsis","text":"Get a device role onos ztp get role < roleName > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_get_role/#options","text":"- h , -- help help for role","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_get_role/#see-also","text":"onos ztp get - Get ZTP resources","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_get_role/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_get_roles/","text":"onos ztp get roles Get device roles Synopsis Get device roles onos ztp get roles [ flags ] Options - h , -- help help for roles SEE ALSO onos ztp get - Get ZTP resources Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp get roles"},{"location":"onos-cli/docs/cli/onos_ztp_get_roles/#onos-ztp-get-roles","text":"Get device roles","title":"onos ztp get roles"},{"location":"onos-cli/docs/cli/onos_ztp_get_roles/#synopsis","text":"Get device roles onos ztp get roles [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_get_roles/#options","text":"- h , -- help help for roles","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_get_roles/#see-also","text":"onos ztp get - Get ZTP resources","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_get_roles/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_remove/","text":"onos ztp remove Remove a ZTP resource Synopsis Remove a ZTP resource Options - h , -- help help for remove SEE ALSO onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp remove role - Remove a device role Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp remove"},{"location":"onos-cli/docs/cli/onos_ztp_remove/#onos-ztp-remove","text":"Remove a ZTP resource","title":"onos ztp remove"},{"location":"onos-cli/docs/cli/onos_ztp_remove/#synopsis","text":"Remove a ZTP resource","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_remove/#options","text":"- h , -- help help for remove","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_remove/#see-also","text":"onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp remove role - Remove a device role","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_remove/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_remove_role/","text":"onos ztp remove role Remove a device role Synopsis Remove a device role onos ztp remove role < roleName > [ flags ] Options - h , -- help help for role SEE ALSO onos ztp remove - Remove a ZTP resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp remove role"},{"location":"onos-cli/docs/cli/onos_ztp_remove_role/#onos-ztp-remove-role","text":"Remove a device role","title":"onos ztp remove role"},{"location":"onos-cli/docs/cli/onos_ztp_remove_role/#synopsis","text":"Remove a device role onos ztp remove role < roleName > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_remove_role/#options","text":"- h , -- help help for role","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_remove_role/#see-also","text":"onos ztp remove - Remove a ZTP resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_remove_role/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_update/","text":"onos ztp update Update a ZTP resource Synopsis Update a ZTP resource Options - h , -- help help for update SEE ALSO onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp update role - Add a device role Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp update"},{"location":"onos-cli/docs/cli/onos_ztp_update/#onos-ztp-update","text":"Update a ZTP resource","title":"onos ztp update"},{"location":"onos-cli/docs/cli/onos_ztp_update/#synopsis","text":"Update a ZTP resource","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_update/#options","text":"- h , -- help help for update","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_update/#see-also","text":"onos ztp - ONOS zero-touch provisioning subsystem commands onos ztp update role - Add a device role","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_update/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-cli/docs/cli/onos_ztp_update_role/","text":"onos ztp update role Add a device role Synopsis Add a device role onos ztp update role < fileName > [ flags ] Options - h , -- help help for role -- overwrite Overwrite the role if it already exists SEE ALSO onos ztp update - Update a ZTP resource Auto generated by spf13/cobra on 18-Nov-2019","title":"Onos ztp update role"},{"location":"onos-cli/docs/cli/onos_ztp_update_role/#onos-ztp-update-role","text":"Add a device role","title":"onos ztp update role"},{"location":"onos-cli/docs/cli/onos_ztp_update_role/#synopsis","text":"Add a device role onos ztp update role < fileName > [ flags ]","title":"Synopsis"},{"location":"onos-cli/docs/cli/onos_ztp_update_role/#options","text":"- h , -- help help for role -- overwrite Overwrite the role if it already exists","title":"Options"},{"location":"onos-cli/docs/cli/onos_ztp_update_role/#see-also","text":"onos ztp update - Update a ZTP resource","title":"SEE ALSO"},{"location":"onos-cli/docs/cli/onos_ztp_update_role/#auto-generated-by-spf13cobra-on-18-nov-2019","text":"","title":"Auto generated by spf13/cobra on 18-Nov-2019"},{"location":"onos-config/docs/","text":"ONOS configuration overview Design Objectives gNMI provides transactionality with respect to a single device; all configuration operations specified as part of a single batch are all applied or none of them are. The core capability of the configuration platform should build on this gNMI feature to: Provide ability to apply a batch of operations (via NB gNMI API) targeted at multiple devices to be performed as a transaction; either all changes are applied to all devices or none of the changes are applied to any of the devices. Track configuration change transactions applied to a set of devices over time and allow rollback (via NB admin API) to previous configuration checkpoints demarcated by the transactions. The above features are the principal objectives for the configuration management platform. Second order objectives are as follows: Support high-availability and distributed operation, including rolling upgrades Support networks comprising of ~50 devices, ~5000 ports and rate of ~10K incremental configuration transactions per day Additional Features (to be integrated with the above) The following set of features will be required to support the real-world use-cases, but may not necessarily be part of the code configuration subsystem and instead can be provided as additional layers: Ability to preload initial configuration about devices that have not yet been discovered - or even deployed Dry run capability - validate configuration with respect to model, but also with respect to existing business constraints or policies Import existing device configuration Configuration Intents - ability to translate high-level (possibly network-wide) configuration specifications into lower-level (device-specific) operations Key Tenets Principal northbound API for the subsystem will be gNMI and gNOI. These interfaces are already accepted standards and are well-defined, low-profile interfaces with support for transaction semantics. YANG models that will be exposed as part of the NB API are yet to be determined (or defined). Enhanced northbound API will be a gRPC service providing access to administrative functionality. Applications can navigate the change-log and roll-back various changes as they were previously submitted via gNMI Southbound API for the subsystem will be gNMI and gNOI. This will allow direct use with Stratum-compliant switches without requiring an adaptation layer. Adapters can be created for devices that do not directly support gNMI/gNOI interfaces. Such adapters can be deployed either as proxy agents or potentially can be hosted on the devices themselves. Diagnostic gRPC service will allow for inspection of internal state using various remote tools. This interface is not subject to backward compatibility constraints. The subsystem will be designed as a separate entity to allow its use with the existing ONOS 2.0 architecture and to fit with the NG ONOS architecture. High-Level Design Additional Documentation How to contribute to onos-config project How to build onos-config server, related commands and Docker image How to run onos-config server and related commands How to deploy onos-config in a Kubernetes cluster How to test onos-config integration tests with onit How to onboard your device extending onos-config with Model Plugins Developer workflow summary for onos-config project Contacts and Meetings for onos-config project Additional Resources \u00b5ONOS talks at ONF Connect 2019 \u00b5ONOS Project Wide Videos Device Configuration in \u00b5ONOS","title":"An Introduction to Configuration Susbsytem"},{"location":"onos-config/docs/#onos-configuration-overview","text":"","title":"ONOS configuration overview"},{"location":"onos-config/docs/#design-objectives","text":"gNMI provides transactionality with respect to a single device; all configuration operations specified as part of a single batch are all applied or none of them are. The core capability of the configuration platform should build on this gNMI feature to: Provide ability to apply a batch of operations (via NB gNMI API) targeted at multiple devices to be performed as a transaction; either all changes are applied to all devices or none of the changes are applied to any of the devices. Track configuration change transactions applied to a set of devices over time and allow rollback (via NB admin API) to previous configuration checkpoints demarcated by the transactions. The above features are the principal objectives for the configuration management platform. Second order objectives are as follows: Support high-availability and distributed operation, including rolling upgrades Support networks comprising of ~50 devices, ~5000 ports and rate of ~10K incremental configuration transactions per day","title":"Design Objectives"},{"location":"onos-config/docs/#additional-features-to-be-integrated-with-the-above","text":"The following set of features will be required to support the real-world use-cases, but may not necessarily be part of the code configuration subsystem and instead can be provided as additional layers: Ability to preload initial configuration about devices that have not yet been discovered - or even deployed Dry run capability - validate configuration with respect to model, but also with respect to existing business constraints or policies Import existing device configuration Configuration Intents - ability to translate high-level (possibly network-wide) configuration specifications into lower-level (device-specific) operations","title":"Additional Features (to be integrated with the above)"},{"location":"onos-config/docs/#key-tenets","text":"Principal northbound API for the subsystem will be gNMI and gNOI. These interfaces are already accepted standards and are well-defined, low-profile interfaces with support for transaction semantics. YANG models that will be exposed as part of the NB API are yet to be determined (or defined). Enhanced northbound API will be a gRPC service providing access to administrative functionality. Applications can navigate the change-log and roll-back various changes as they were previously submitted via gNMI Southbound API for the subsystem will be gNMI and gNOI. This will allow direct use with Stratum-compliant switches without requiring an adaptation layer. Adapters can be created for devices that do not directly support gNMI/gNOI interfaces. Such adapters can be deployed either as proxy agents or potentially can be hosted on the devices themselves. Diagnostic gRPC service will allow for inspection of internal state using various remote tools. This interface is not subject to backward compatibility constraints. The subsystem will be designed as a separate entity to allow its use with the existing ONOS 2.0 architecture and to fit with the NG ONOS architecture.","title":"Key Tenets"},{"location":"onos-config/docs/#high-level-design","text":"","title":"High-Level Design"},{"location":"onos-config/docs/#additional-documentation","text":"How to contribute to onos-config project How to build onos-config server, related commands and Docker image How to run onos-config server and related commands How to deploy onos-config in a Kubernetes cluster How to test onos-config integration tests with onit How to onboard your device extending onos-config with Model Plugins Developer workflow summary for onos-config project Contacts and Meetings for onos-config project","title":"Additional Documentation"},{"location":"onos-config/docs/#additional-resources","text":"","title":"Additional Resources"},{"location":"onos-config/docs/#onos-talks-at-onf-connect-2019","text":"\u00b5ONOS Project Wide Videos Device Configuration in \u00b5ONOS","title":"\u00b5ONOS talks at ONF Connect 2019"},{"location":"onos-config/docs/build/","text":"Building onos-config In order the build the project, developers are expected to install the required development tools . Currently, the project build and validation is driven by a top-level Makefile , which supports the following usage: > make help build build the Go binaries and run all validations ( default ) clean remove all the build artifacts coverage generate unit test coverage data deps ensure that the required dependencies are in place gofmt run the Go format validation images build all Docker images kind build Docker images and add them to the currently configured kind cluster license_check examine and ensure license headers exist linters examines Go source code and reports coding problems onos-config-base-docker build onos-config base Docker image protos compile the protobuf files ( using protoc-go Docker ) test run the unit tests and source code validation Building Go binaries To build the project, simply type make . This will check for required dependencies, compile the Go binaries and then perform all required validation steps, which includes unit tests, Go code formating, Go lint, Go vetting and license header compliance check. In future, there may be other tests. | Note that since the build relies on Go modules, you must export GO111MODULE=on . Building Docker images To allow deployment of onos-config in a Kubernetes cluster, the Makefile allows creation of two separate Docker images. The main Docker image is onosproject/onos-config , which is the main program that acts as a server that provides various gRPC interfaces to application. This include gNMI and the AdminService and DiagnosticService . The second Docker image is onosproject/onos-cli , which provides a command-line shell that can be deployed as an ephemeral container inside the Kubernetes cluster and which provides access to the onos CLI commands for remotely interacting with the services provided by onosproject/onos-config . You can build both images by running make images . Compiling protobufs To compile Google Protocol Buffer files ( *.proto ) and to generate Go source files from them, simply run make protos . Provided you changed the source *.proto files, this will modify the corresponding *.pb.go source files. Although these files are auto-generated, developers are expected to check them in, anytime they change as a result of changing the *.proto files. The protoc compiler is run using onosproject/proto-go Docker image, which has been published to remove the need for developers to install their own protoc compiler and its Go plugin. The Makefile makes this transparent. Bulding Documentation Documentation is published at https://godoc.org/github.com/onosproject/onos-config If you wish to see a version of it locally run: godoc -goroot = $HOME /go and then browse at http://localhost:6060/pkg/github.com/onosproject/onos-config/","title":"How To Build Configuration Subsystem?"},{"location":"onos-config/docs/build/#building-onos-config","text":"In order the build the project, developers are expected to install the required development tools . Currently, the project build and validation is driven by a top-level Makefile , which supports the following usage: > make help build build the Go binaries and run all validations ( default ) clean remove all the build artifacts coverage generate unit test coverage data deps ensure that the required dependencies are in place gofmt run the Go format validation images build all Docker images kind build Docker images and add them to the currently configured kind cluster license_check examine and ensure license headers exist linters examines Go source code and reports coding problems onos-config-base-docker build onos-config base Docker image protos compile the protobuf files ( using protoc-go Docker ) test run the unit tests and source code validation","title":"Building onos-config"},{"location":"onos-config/docs/build/#building-go-binaries","text":"To build the project, simply type make . This will check for required dependencies, compile the Go binaries and then perform all required validation steps, which includes unit tests, Go code formating, Go lint, Go vetting and license header compliance check. In future, there may be other tests. | Note that since the build relies on Go modules, you must export GO111MODULE=on .","title":"Building Go binaries"},{"location":"onos-config/docs/build/#building-docker-images","text":"To allow deployment of onos-config in a Kubernetes cluster, the Makefile allows creation of two separate Docker images. The main Docker image is onosproject/onos-config , which is the main program that acts as a server that provides various gRPC interfaces to application. This include gNMI and the AdminService and DiagnosticService . The second Docker image is onosproject/onos-cli , which provides a command-line shell that can be deployed as an ephemeral container inside the Kubernetes cluster and which provides access to the onos CLI commands for remotely interacting with the services provided by onosproject/onos-config . You can build both images by running make images .","title":"Building Docker images"},{"location":"onos-config/docs/build/#compiling-protobufs","text":"To compile Google Protocol Buffer files ( *.proto ) and to generate Go source files from them, simply run make protos . Provided you changed the source *.proto files, this will modify the corresponding *.pb.go source files. Although these files are auto-generated, developers are expected to check them in, anytime they change as a result of changing the *.proto files. The protoc compiler is run using onosproject/proto-go Docker image, which has been published to remove the need for developers to install their own protoc compiler and its Go plugin. The Makefile makes this transparent.","title":"Compiling protobufs"},{"location":"onos-config/docs/build/#bulding-documentation","text":"Documentation is published at https://godoc.org/github.com/onosproject/onos-config If you wish to see a version of it locally run: godoc -goroot = $HOME /go and then browse at http://localhost:6060/pkg/github.com/onosproject/onos-config/","title":"Bulding Documentation"},{"location":"onos-config/docs/cli/","text":"Administrative and Diagnostic Command-Line The project provides a command-line facilities for remotely interacting with the administrative and diagnostic services of the onos-config server. The commands are available at run-time using the consolidated onos client hosted in the onos-cli repository, but their implementation is hosted and built here. The documentation about building and deploying the consolidate onos client or its Docker container is available in the onos-cli GitHub repository. Usage > onos config --help ONOS configuration subsystem commands Usage: onos config [ command ] Available Commands: add Add a config resource get Get config resources rollback Rolls-back a network configuration change watch Watch for updates to a config resource type Flags: -h, --help help for config Use \"onos config [command] --help\" for more information about a command. Global Flags Since the onos command is a client, it requires the address of the server as well as the paths to the key and the certificate to establish secure connection to the server. These options are global to all commands and can be persisted to avoid having to specify them for each command. For example, you can set the default server address as follows: > onos config config set address onos-config-server:5150 Subsequent usages of the onos command can then abstain from using the --address option to indicate the server address, resulting in easier usage. Example Commands Rollback Network Change To rollback a network use the rollback admin tool. This will rollback the last network change unless a specific change is given with the changename parameter > onos config rollback Change-VgUAZI928B644v/2XQ0n24x0SjA = Listing and Loading model plugins A model plugin is a shared object library that represents the YANG models of a particular Device Type and Version. The plugin allows user to create and load their own device models in to onos-config that can be used for validating that configuration changes observe the structure of the YANG models in use on the device. This improves usability by pushing information about the devices' model back up to the onos-config gNMI northbound interface. Model plugins can be loaded at the startup of onos-config by (repeated) --modelPlugin options, or they can be loaded at run time. To see the list of currently loaded plugins use the command: > onos config get plugins To load a plugin dynamically at runtime use the command: > onos config add plugin <full path and filename of a compatible shared object library on target machine> NOTE: Model Plugins cannot be dynamically unloaded - a restart of onos-config is required to unload. In a distributed environment the ModelPlugin will have to be loaded on all instances of onos-config Other Diagnostic Commands There are a number of commands that provide internal view into the state the onos-config store. These tools use a special-purpose gRPC interfaces to obtain the internal meta-data from the running onos-config process. Please note that these tools are intended purely for diagnostics and should not be relied upon for programmatic purposes as they are not subject to any backward compatibility guarantees. List and Watch Changes For example, to list and watch all changes stored internally run: > onos config watch network-changes ... or to watch device-changes > onos config watch device-changes ... Devicetree To get the aggregate configuration of a device in a hierarchical JSON structure from the store use: > onos config get devicetree --layer 0 Device1 DEVICE CONFIGURATION TYPE VERSION Device1 Device1-1.0.0 TestDevice 1 .0.0 CHANGE: 2uUbeEV4i3ADedjeORmgQt6CVDM = CHANGE: tAk3GZSh1qbdhdm5414r46RLvqw = CHANGE: MY8s8Opw+xjbcARIMzIpUIzeXv0 = TREE: { \"cont1a\" : { \"cont2a\" : { \"leaf2a\" :13, \"leaf2b\" :1.14159, \"leaf2c\" : \"def\" , \"leaf2d\" :0.002, \"leaf2e\" : [ -99,-4,5,200 ] , \"leaf2g\" :false } , \"leaf1a\" : \"abcdef\" , \"list2a\" : [{ \"name\" : \"txout1\" , \"tx-power\" :8 } , { \"name\" : \"txout3\" , \"tx-power\" :16 }]} , \"test1:leafAtTopLevel\" : \"WXY-1234\" } This displays the list of changes IDs and the aggregate effect of layering each one on top of the other. This is the effective configuration. By default all layers are shown ( layer=0 ). To show the previous effective configuration use layer=-1 To display the devices trees for all devices, just omit the device name.","title":"Administrative And Diagnostic CLI"},{"location":"onos-config/docs/cli/#administrative-and-diagnostic-command-line","text":"The project provides a command-line facilities for remotely interacting with the administrative and diagnostic services of the onos-config server. The commands are available at run-time using the consolidated onos client hosted in the onos-cli repository, but their implementation is hosted and built here. The documentation about building and deploying the consolidate onos client or its Docker container is available in the onos-cli GitHub repository.","title":"Administrative and Diagnostic Command-Line"},{"location":"onos-config/docs/cli/#usage","text":"> onos config --help ONOS configuration subsystem commands Usage: onos config [ command ] Available Commands: add Add a config resource get Get config resources rollback Rolls-back a network configuration change watch Watch for updates to a config resource type Flags: -h, --help help for config Use \"onos config [command] --help\" for more information about a command.","title":"Usage"},{"location":"onos-config/docs/cli/#global-flags","text":"Since the onos command is a client, it requires the address of the server as well as the paths to the key and the certificate to establish secure connection to the server. These options are global to all commands and can be persisted to avoid having to specify them for each command. For example, you can set the default server address as follows: > onos config config set address onos-config-server:5150 Subsequent usages of the onos command can then abstain from using the --address option to indicate the server address, resulting in easier usage.","title":"Global Flags"},{"location":"onos-config/docs/cli/#example-commands","text":"","title":"Example Commands"},{"location":"onos-config/docs/cli/#rollback-network-change","text":"To rollback a network use the rollback admin tool. This will rollback the last network change unless a specific change is given with the changename parameter > onos config rollback Change-VgUAZI928B644v/2XQ0n24x0SjA =","title":"Rollback Network Change"},{"location":"onos-config/docs/cli/#listing-and-loading-model-plugins","text":"A model plugin is a shared object library that represents the YANG models of a particular Device Type and Version. The plugin allows user to create and load their own device models in to onos-config that can be used for validating that configuration changes observe the structure of the YANG models in use on the device. This improves usability by pushing information about the devices' model back up to the onos-config gNMI northbound interface. Model plugins can be loaded at the startup of onos-config by (repeated) --modelPlugin options, or they can be loaded at run time. To see the list of currently loaded plugins use the command: > onos config get plugins To load a plugin dynamically at runtime use the command: > onos config add plugin <full path and filename of a compatible shared object library on target machine> NOTE: Model Plugins cannot be dynamically unloaded - a restart of onos-config is required to unload. In a distributed environment the ModelPlugin will have to be loaded on all instances of onos-config","title":"Listing and Loading model plugins"},{"location":"onos-config/docs/cli/#other-diagnostic-commands","text":"There are a number of commands that provide internal view into the state the onos-config store. These tools use a special-purpose gRPC interfaces to obtain the internal meta-data from the running onos-config process. Please note that these tools are intended purely for diagnostics and should not be relied upon for programmatic purposes as they are not subject to any backward compatibility guarantees.","title":"Other Diagnostic Commands"},{"location":"onos-config/docs/cli/#list-and-watch-changes","text":"For example, to list and watch all changes stored internally run: > onos config watch network-changes ... or to watch device-changes > onos config watch device-changes ...","title":"List and Watch Changes"},{"location":"onos-config/docs/cli/#devicetree","text":"To get the aggregate configuration of a device in a hierarchical JSON structure from the store use: > onos config get devicetree --layer 0 Device1 DEVICE CONFIGURATION TYPE VERSION Device1 Device1-1.0.0 TestDevice 1 .0.0 CHANGE: 2uUbeEV4i3ADedjeORmgQt6CVDM = CHANGE: tAk3GZSh1qbdhdm5414r46RLvqw = CHANGE: MY8s8Opw+xjbcARIMzIpUIzeXv0 = TREE: { \"cont1a\" : { \"cont2a\" : { \"leaf2a\" :13, \"leaf2b\" :1.14159, \"leaf2c\" : \"def\" , \"leaf2d\" :0.002, \"leaf2e\" : [ -99,-4,5,200 ] , \"leaf2g\" :false } , \"leaf1a\" : \"abcdef\" , \"list2a\" : [{ \"name\" : \"txout1\" , \"tx-power\" :8 } , { \"name\" : \"txout3\" , \"tx-power\" :16 }]} , \"test1:leafAtTopLevel\" : \"WXY-1234\" } This displays the list of changes IDs and the aggregate effect of layering each one on top of the other. This is the effective configuration. By default all layers are shown ( layer=0 ). To show the previous effective configuration use layer=-1 To display the devices trees for all devices, just omit the device name.","title":"Devicetree"},{"location":"onos-config/docs/debugging/","text":"Debug onos-config in Onit Using Delve Debugging Example #1: Use Goland IDE (Recommended): In this example, we assume you already started an onit cluster. If you haven't done that yet, refer to testing for more details. First, you need to configure your Goland IDE to connect to the remote Delve debugger which is running in the onos-config pod. You can do that by going to Run | Edit Configurations\u2026 | + | Go Remote and configuring the host (in this example localhost ) and port (in this example port 40000 ) your remote debugger is listening on. To start debugging and open a debugger port to the given resource, you can run onit debug command. For example, to forwards a port to the debug port on the onos-config pod, run the following command: >onit debug <name of onos-config pod> Forwarding from 127 .0.0.1:40000 -> 40000 Forwarding from [ ::1 ] :40000 -> 40000 To connect to the debugger using Goland IDE, select the configuration that you created in the first step and click on Debug button as follows: If your Goland IDE connects to the debug server which is running in onos-config pod successfully, then you should be able to see the following message in the logs: > onit get logs <name of onos-config pod> .... 2019 -07-22T15:09:27Z debug layer = debugger halting 2019 -07-22T15:09:28Z debug layer = debugger continuing Suppose we want to add a simulator and debug synchronizer code by setting a few breakpoints in different lines of its file as follows: As you can see above, after setting the breakpoints, you should be able to see some messages in the onos-config pod logs that confirm you set the breakpoints. When we add a simulator the Goland IDE hits the first breakpoint that was set. At this point you can go through the list of variables and goroutines using the debugger dashboard. Suppose we want to have tracepoints instead of breakpoints. Tracepoints don't cause the program execution to break and they can be useful when you need to inspect something, but not stop the program. To do that in Goland IDE, first set a breakpoint and then right-click on the breakpoint and unchecking \"Suspend\" as follows: You can also print a breakpoint hit message , print stack trace , and Evaluate and Log variables using tracepoints without pausing the program. For example, suppose we want to print the address of the device simulator in the synchronizer as we add a device simulator to the onit cluster: Debugging. Example #2: Use Simple Delve Client: In this example, we assume you already started an onit cluster. If you haven't done that yet, refer to testing for more details. First, you need to install Delve on your machine to interact with the debugger in the onos-config pod. To make sure the debugger is installed successfully on your machine, run dlv command which should show its help. To start debugging and open a debugger port to the given resource, you can run onit debug command. For example, to forwards a port to the debug port on the onos-config pod, run the following command: >onit debug <name of onos-config pod> Forwarding from 127 .0.0.1:40000 -> 40000 Forwarding from [ ::1 ] :40000 -> 40000 To connect to the debugger server which is running in the onos-config pod, run the following command from another terminal: > dlv connect localhost:40000 Type 'help' for list of commands. ( dlv ) If the dlv client connects to the server without any problems, you should be able to see the following message in the logs: > onit get logs onos-config-5d56898bdd-zrmt2 .... 2019 -07-18T20:55:06Z debug layer = debugger halting To get list of sources that can be used for debugging, run the following command from the dlv CLI: ( dlv ) sources /go/src/github.com/onosproject/onos-config/cmd/onos-config/onos-config.go /go/src/github.com/onosproject/onos-config/modelplugin/Devicesim-1.0.0/devicesim_1_0_0/generated.go /go/src/github.com/onosproject/onos-config/modelplugin/Devicesim-1.0.0/modelmain.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-1.0.0/modelmain.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-1.0.0/testdevice_1_0_0/generated.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-2.0.0/modelmain.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-2.0.0/testdevice_2_0_0/generated.go /go/src/github.com/onosproject/onos-config/pkg/dispatcher/dispatcher.go /go/src/github.com/onosproject/onos-config/pkg/events/configevent.go /go/src/github.com/onosproject/onos-config/pkg/events/events.go /go/src/github.com/onosproject/onos-config/pkg/events/operationalevent.go /go/src/github.com/onosproject/onos-config/pkg/events/responseevent.go /go/src/github.com/onosproject/onos-config/pkg/events/topoevent.go /go/src/github.com/onosproject/onos-config/pkg/manager/getconfig.go /go/src/github.com/onosproject/onos-config/pkg/manager/manager.go /go/src/github.com/onosproject/onos-config/pkg/manager/rollbackconfig.go /go/src/github.com/onosproject/onos-config/pkg/manager/setconfig.go /go/src/github.com/onosproject/onos-config/pkg/modelregistry/modelregistry.go /go/src/github.com/onosproject/onos-config/pkg/northbound/admin/admin.go .... Suppose you want to set a breakpoint at line 83 of synchronizer . To do that, run the following command from dlv CLI: ( dlv ) break onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 if you set it properly, you should be able to see a message like the following in the logs: onit get logs onos-config-5d56898bdd-zrmt2 ... 2019 -07-18T21:03:24Z info layer = debugger created breakpoint: & api.Breakpoint { ID:2, Name: \"\" , Addr:0xcd62a2, File: \"/go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go\" , Line:83, FunctionName: \"github.com/onosproject/onos-config/pkg/southbound/synchronizer.New\" , Cond: \"\" , Tracepoint:false, TraceReturn:false, Goroutine:false, Stacktrace:0, Variables: [] string ( nil ) , LoadArgs: ( *api.LoadConfig )( nil ) , LoadLocals: ( *api.LoadConfig )( nil ) , HitCount:map [ string ] uint64 {} , TotalHitCount:0x0 } Run continue from dlv CLI that runs until breakpoint as follows: ```bash (dlv) continue - Then , add a device simulator using ` onit add simulator ` command . When onit cluster is trying to add a device simulator to the cluster , the debugger stops at the breakpoint and you should be able to see an output like the following from the dlv CLI : ``` bash ( dlv ) continue > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 83 ( hits goroutine ( 9 ) : 1 total : 1 ) ( PC : 0 xcd62a2 ) In addition, you can check the onos-config logs to make sure the program stops where you expect to stop: ```bash > onit get logs onos-config-5d56898bdd-zrmt2 2019-07-18T21:16:32Z debug layer=debugger continuing I0718 21:18:09.661372 32 dispatcher.go:103] Registering Device sim1 on channel 0xc000083920 and 0xc000083980 I0718 21:18:09.662158 32 synchronizer.go:64] Connecting to sim1:10161 over gNMI I0718 21:18:09.662369 32 clientManager.go:53] Loading default CA onfca I0718 21:18:09.662607 32 clientManager.go:60] Loading default certificates I0718 21:18:09.702593 32 synchronizer.go:72] sim1:10161 connected over gNMI - Suppose we set another breakpoint at line 89 of [ synchronizer ] ( https : // github . com / onosproject / onos - config / blob / master / pkg / southbound / synchronizer / synchronizer . go ) and run ` continue ` command from dlv CLI again . The output of dlv CLI and onos - config logs will be like the followings : ``` bash ( dlv ) continue > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 89 ( hits goroutine ( 9 ) : 1 total : 1 ) ( PC : 0 xcd64f9 ) > onit get logs onos-config-5d56898bdd-zrmt2 ... 2019 -07-18T21:25:21Z info layer = debugger created breakpoint: & api.Breakpoint { ID:3, Name: \"\" , Addr:0xcd64f9, File: \"/go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go\" , Line:89, FunctionName: \"github.com/onosproject/onos-config/pkg/southbound/synchronizer.New\" , Cond: \"\" , Tracepoint:false, TraceReturn:false, Goroutine:false, Stacktrace:0, Variables: [] string ( nil ) , LoadArgs: ( *api.LoadConfig )( nil ) , LoadLocals: ( *api.LoadConfig )( nil ) , HitCount:map [ string ] uint64 {} , TotalHitCount:0x0 } 2019 -07-18T21:26:51Z debug layer = debugger continuing I0718 21 :26:51.518797 32 synchronizer.go:83 ] sim1:10161 capabilities supported_models:<name: \"openconfig-interfaces\" organization: \"OpenConfig working group\" version: \"2017-07-14\" > supported_models:<name: \"openconfig-openflow\" organization: \"OpenConfig working group\" version: \"2017-06-01\" > supported_models:<name: \"openconfig-platform\" organization: \"OpenConfig working group\" version: \"2016-12-22\" > supported_models:<name: \"openconfig-system\" organization: \"OpenConfig working group\" version: \"2017-07-06\" > supported_encodings:JSON supported_encodings:JSON_IETF gNMI_version: \"0.7.0\" I0718 21 :26:51.519659 32 synchronizer.go:305 ] Getting saved config for sim1 if you run continue again, it passes the breakpoint at line 89 and onos-config will keep running: > onit get logs onos-config-5d56898bdd-zrmt2 ... 2019 -07-18T21:45:01Z debug layer = debugger continuing I0718 21 :45:01.034584 32 synchronizer.go:89 ] sim1:10161 has no initial configuration I0718 21 :45:01.053357 32 synchronizer.go:243 ] subscribe:<prefix:<> subscription:<path:<> sample_interval:15 heartbeat_interval:15 > subscription:<path:<> sample_interval:15 heartbeat_interval:15 > > At this point, you have two breakpoints in the synchronizer . To see list of your breakpoints, you can run breakpoints command from dlv CLI. ( dlv ) breakpoints Breakpoint runtime-fatal-throw at 0x6ab830 for runtime.fatalthrow () /usr/local/go/src/runtime/panic.go:663 ( 0 ) Breakpoint unrecovered-panic at 0x6ab8a0 for runtime.fatalpanic () /usr/local/go/src/runtime/panic.go:690 ( 0 ) print runtime.curg._panic.arg Breakpoint 4 at 0xcd62a2 for github.com/onosproject/onos-config/pkg/southbound/synchronizer.New () /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 ( 1 ) Breakpoint 5 at 0xcd64f9 for github.com/onosproject/onos-config/pkg/southbound/synchronizer.New () /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:89 ( 0 ) You can repeat the above steps by adding another simulator to onos-config and monitor dlv CLI and onos-config pod logs. Print Local Variables When you set breakpoints in a file, you can also print local variables as you go through the breakpoints. For example, look at the following piece of code from synchronizer : target : = southbound.Target {} key, err : = target.ConnectTarget ( context, *sync.Device ) sync.key = key Suppose we add a simulator and we would like to print the value of key when it passes this block of code. You can use print function from dlv CLI to print local variables in the code: ( dlv ) print key github.com/onosproject/onos-config/pkg/southbound.DeviceID { DeviceID: \"sim2:10161\" , } or to print capResponse variable: ( dlv ) print capResponse *github.com/openconfig/gnmi/proto/gnmi.CapabilityResponse { SupportedModels: [] *github.com/openconfig/gnmi/proto/gnmi.ModelData len: 4 , cap: 4 , [ * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e280 ) , * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e2d0 ) , * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e320 ) , * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e370 ) , ] , SupportedEncodings: [] github.com/openconfig/gnmi/proto/gnmi.Encoding len: 2 , cap: 2 , [ Encoding_JSON ( 0 ) ,Encoding_JSON_IETF ( 4 )] , GNMIVersion: \"0.7.0\" , Extension: [] *github.com/openconfig/gnmi/proto/gnmi_ext.Extension len: 0 , cap: 0 , nil, XXX_NoUnkeyedLiteral: struct {} {} , XXX_unrecognized: [] uint8 len: 0 , cap: 0 , nil, XXX_sizecache: 0 , } You can also check the list of local variables using locals command from dlv CLI, for example: ( dlv ) locals sync = ( \"*github.com/onosproject/onos-config/pkg/southbound/synchronizer.Synchronizer\" )( 0xc000368000 ) capResponse = ( \"*github.com/openconfig/gnmi/proto/gnmi.CapabilityResponse\" )( 0xc000346d80 ) target = github.com/onosproject/onos-config/pkg/southbound.Target { Destination: ( * \"github.com/openconfig/gnmi/client.Destination\" )( 0xc0004e00e0 ) , Clt: github.com/onosproject/onos-config/pkg/southbound.GnmiClient ( github.com/onosproject/onos-config/pkg/southbound.gnmiClientImpl ) * ( * \"github.com/onosproject/onos-config/pkg/southbound.GnmiClient\" )( 0xc0004e0130 ) , Ctx: context.Context ( *context.emptyCtx ) ... } key = github.com/onosproject/onos-config/pkg/southbound.DeviceID { DeviceID: \"sim1:10161\" } err = error nil capErr = error nil Goroutines To check which goroutine is running when you are going through a piece of code using breakpoints, you can run the following command from dlv CLI: ( dlv ) goroutine Goroutine 12 : Runtime: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 github.com/onosproject/onos-config/pkg/southbound/synchronizer.New ( 0xcd62a2 ) User: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 github.com/onosproject/onos-config/pkg/southbound/synchronizer.New ( 0xcd62a2 ) Go: /go/src/github.com/onosproject/onos-config/pkg/manager/manager.go:217 github.com/onosproject/onos-config/pkg/manager. ( *Manager ) .Run ( 0xcdfb0c ) Start: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/factory.go:30 github.com/onosproject/onos-config/pkg/southbound/synchronizer.Factory ( 0xcd4aa0 ) To check list of all goroutines which potentially can be running in onos-config, you can run the following command from dlv CLI: ( dlv ) goroutines Goroutine 1 - User: /usr/local/go/src/runtime/netpoll.go:182 internal/poll.runtime_pollWait ( 0x6a7b5e ) Goroutine 2 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 3 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 4 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 5 - User: /go/src/github.com/onosproject/onos-config/vendor/k8s.io/klog/klog.go:990 k8s.io/klog. ( *loggingT ) .flushDaemon ( 0x8227a3 ) Goroutine 6 - User: /go/src/github.com/onosproject/onos-config/vendor/github.com/golang/glog/glog.go:882 github.com/golang/glog. ( *loggingT ) .flushDaemon ( 0xca8b23 ) Goroutine 7 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 8 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 9 - User: /go/src/github.com/onosproject/onos-config/pkg/dispatcher/dispatcher.go:58 github.com/onosproject/onos-config/pkg/dispatcher. ( *Dispatcher ) .Listen ( 0x82a193 ) Goroutine 10 - User: /go/src/github.com/onosproject/onos-config/pkg/dispatcher/dispatcher.go:86 github.com/onosproject/onos-config/pkg/dispatcher. ( *Dispatcher ) .ListenOperationalState ( 0x82a96b ) Goroutine 11 - User: /go/src/github.com/onosproject/onos-config/pkg/manager/manager.go:236 github.com/onosproject/onos-config/pkg/manager.listenOnResponseChannel ( 0xcdfd20 ) Goroutine 12 - User: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 github.com/onosproject/onos-config/pkg/southbound/synchronizer.New ( 0xcd62a2 ) ( thread 60 ) Goroutine 18 - User: /usr/local/go/src/runtime/lock_futex.go:228 runtime.notetsleepg ( 0x685a74 ) Goroutine 19 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 20 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 34 - User: /usr/local/go/src/runtime/lock_futex.go:228 runtime.notetsleepg ( 0x685a74 ) Goroutine 35 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 83 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 101 - User: /usr/local/go/src/runtime/netpoll.go:182 internal/poll.runtime_pollWait ( 0x6a7b5e ) Goroutine 102 - User: /go/src/github.com/onosproject/onos-config/vendor/google.golang.org/grpc/internal/transport/controlbuf.go:317 google.golang.org/grpc/internal/transport. ( *controlBuffer ) .get ( 0xb54ae3 ) Goroutine 103 - User: /go/src/github.com/onosproject/onos-config/vendor/google.golang.org/grpc/stream.go:320 google.golang.org/grpc.newClientStream.func5 ( 0xc3492d ) Goroutine 104 - User: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:130 github.com/onosproject/onos-config/pkg/southbound/synchronizer. ( *Synchronizer ) .syncConfigEventsToDevice ( 0xcd72a5 ) Goroutine 105 - User: /go/src/github.com/onosproject/onos-config/vendor/google.golang.org/grpc/internal/transport/transport.go:267 google.golang.org/grpc/internal/transport. ( *Stream ) .waitOnHeader ( 0xb7e542 ) ..... [ 49 goroutines ] Debug Your Code Line by Line After setting a breakpoint in a source file, you can execute your code line by line using next or n command from dlv CLI: For example: ( dlv ) n > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 88 ( PC : 0xcd64e9 ) ( dlv ) n > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 89 ( PC : 0xcd64f9 ) ( dlv ) n > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 123 ( PC : 0xcd65ec ) ( dlv ) n Print Stack Trace To print stack trace, you can run stack command as follows: ( dlv ) stack 0 0x0000000000cd62a2 in github.com/onosproject/onos-config/pkg/southbound/synchronizer.New at /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 1 0x0000000000cd518e in github.com/onosproject/onos-config/pkg/southbound/synchronizer.Factory at /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/factory.go:49 2 0x00000000006dae71 in runtime.goexit at /usr/local/go/src/runtime/asm_amd64.s:1337","title":"How To Debug Configuration Subsystem?"},{"location":"onos-config/docs/debugging/#debug-onos-config-in-onit-using-delve","text":"","title":"Debug onos-config in Onit Using Delve"},{"location":"onos-config/docs/debugging/#debugging-example-1-use-goland-ide-recommended","text":"In this example, we assume you already started an onit cluster. If you haven't done that yet, refer to testing for more details. First, you need to configure your Goland IDE to connect to the remote Delve debugger which is running in the onos-config pod. You can do that by going to Run | Edit Configurations\u2026 | + | Go Remote and configuring the host (in this example localhost ) and port (in this example port 40000 ) your remote debugger is listening on. To start debugging and open a debugger port to the given resource, you can run onit debug command. For example, to forwards a port to the debug port on the onos-config pod, run the following command: >onit debug <name of onos-config pod> Forwarding from 127 .0.0.1:40000 -> 40000 Forwarding from [ ::1 ] :40000 -> 40000 To connect to the debugger using Goland IDE, select the configuration that you created in the first step and click on Debug button as follows: If your Goland IDE connects to the debug server which is running in onos-config pod successfully, then you should be able to see the following message in the logs: > onit get logs <name of onos-config pod> .... 2019 -07-22T15:09:27Z debug layer = debugger halting 2019 -07-22T15:09:28Z debug layer = debugger continuing Suppose we want to add a simulator and debug synchronizer code by setting a few breakpoints in different lines of its file as follows: As you can see above, after setting the breakpoints, you should be able to see some messages in the onos-config pod logs that confirm you set the breakpoints. When we add a simulator the Goland IDE hits the first breakpoint that was set. At this point you can go through the list of variables and goroutines using the debugger dashboard. Suppose we want to have tracepoints instead of breakpoints. Tracepoints don't cause the program execution to break and they can be useful when you need to inspect something, but not stop the program. To do that in Goland IDE, first set a breakpoint and then right-click on the breakpoint and unchecking \"Suspend\" as follows: You can also print a breakpoint hit message , print stack trace , and Evaluate and Log variables using tracepoints without pausing the program. For example, suppose we want to print the address of the device simulator in the synchronizer as we add a device simulator to the onit cluster:","title":"Debugging Example #1: Use Goland IDE (Recommended):"},{"location":"onos-config/docs/debugging/#debugging-example-2-use-simple-delve-client","text":"In this example, we assume you already started an onit cluster. If you haven't done that yet, refer to testing for more details. First, you need to install Delve on your machine to interact with the debugger in the onos-config pod. To make sure the debugger is installed successfully on your machine, run dlv command which should show its help. To start debugging and open a debugger port to the given resource, you can run onit debug command. For example, to forwards a port to the debug port on the onos-config pod, run the following command: >onit debug <name of onos-config pod> Forwarding from 127 .0.0.1:40000 -> 40000 Forwarding from [ ::1 ] :40000 -> 40000 To connect to the debugger server which is running in the onos-config pod, run the following command from another terminal: > dlv connect localhost:40000 Type 'help' for list of commands. ( dlv ) If the dlv client connects to the server without any problems, you should be able to see the following message in the logs: > onit get logs onos-config-5d56898bdd-zrmt2 .... 2019 -07-18T20:55:06Z debug layer = debugger halting To get list of sources that can be used for debugging, run the following command from the dlv CLI: ( dlv ) sources /go/src/github.com/onosproject/onos-config/cmd/onos-config/onos-config.go /go/src/github.com/onosproject/onos-config/modelplugin/Devicesim-1.0.0/devicesim_1_0_0/generated.go /go/src/github.com/onosproject/onos-config/modelplugin/Devicesim-1.0.0/modelmain.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-1.0.0/modelmain.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-1.0.0/testdevice_1_0_0/generated.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-2.0.0/modelmain.go /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-2.0.0/testdevice_2_0_0/generated.go /go/src/github.com/onosproject/onos-config/pkg/dispatcher/dispatcher.go /go/src/github.com/onosproject/onos-config/pkg/events/configevent.go /go/src/github.com/onosproject/onos-config/pkg/events/events.go /go/src/github.com/onosproject/onos-config/pkg/events/operationalevent.go /go/src/github.com/onosproject/onos-config/pkg/events/responseevent.go /go/src/github.com/onosproject/onos-config/pkg/events/topoevent.go /go/src/github.com/onosproject/onos-config/pkg/manager/getconfig.go /go/src/github.com/onosproject/onos-config/pkg/manager/manager.go /go/src/github.com/onosproject/onos-config/pkg/manager/rollbackconfig.go /go/src/github.com/onosproject/onos-config/pkg/manager/setconfig.go /go/src/github.com/onosproject/onos-config/pkg/modelregistry/modelregistry.go /go/src/github.com/onosproject/onos-config/pkg/northbound/admin/admin.go .... Suppose you want to set a breakpoint at line 83 of synchronizer . To do that, run the following command from dlv CLI: ( dlv ) break onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 if you set it properly, you should be able to see a message like the following in the logs: onit get logs onos-config-5d56898bdd-zrmt2 ... 2019 -07-18T21:03:24Z info layer = debugger created breakpoint: & api.Breakpoint { ID:2, Name: \"\" , Addr:0xcd62a2, File: \"/go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go\" , Line:83, FunctionName: \"github.com/onosproject/onos-config/pkg/southbound/synchronizer.New\" , Cond: \"\" , Tracepoint:false, TraceReturn:false, Goroutine:false, Stacktrace:0, Variables: [] string ( nil ) , LoadArgs: ( *api.LoadConfig )( nil ) , LoadLocals: ( *api.LoadConfig )( nil ) , HitCount:map [ string ] uint64 {} , TotalHitCount:0x0 } Run continue from dlv CLI that runs until breakpoint as follows: ```bash (dlv) continue - Then , add a device simulator using ` onit add simulator ` command . When onit cluster is trying to add a device simulator to the cluster , the debugger stops at the breakpoint and you should be able to see an output like the following from the dlv CLI : ``` bash ( dlv ) continue > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 83 ( hits goroutine ( 9 ) : 1 total : 1 ) ( PC : 0 xcd62a2 ) In addition, you can check the onos-config logs to make sure the program stops where you expect to stop: ```bash > onit get logs onos-config-5d56898bdd-zrmt2 2019-07-18T21:16:32Z debug layer=debugger continuing I0718 21:18:09.661372 32 dispatcher.go:103] Registering Device sim1 on channel 0xc000083920 and 0xc000083980 I0718 21:18:09.662158 32 synchronizer.go:64] Connecting to sim1:10161 over gNMI I0718 21:18:09.662369 32 clientManager.go:53] Loading default CA onfca I0718 21:18:09.662607 32 clientManager.go:60] Loading default certificates I0718 21:18:09.702593 32 synchronizer.go:72] sim1:10161 connected over gNMI - Suppose we set another breakpoint at line 89 of [ synchronizer ] ( https : // github . com / onosproject / onos - config / blob / master / pkg / southbound / synchronizer / synchronizer . go ) and run ` continue ` command from dlv CLI again . The output of dlv CLI and onos - config logs will be like the followings : ``` bash ( dlv ) continue > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 89 ( hits goroutine ( 9 ) : 1 total : 1 ) ( PC : 0 xcd64f9 ) > onit get logs onos-config-5d56898bdd-zrmt2 ... 2019 -07-18T21:25:21Z info layer = debugger created breakpoint: & api.Breakpoint { ID:3, Name: \"\" , Addr:0xcd64f9, File: \"/go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go\" , Line:89, FunctionName: \"github.com/onosproject/onos-config/pkg/southbound/synchronizer.New\" , Cond: \"\" , Tracepoint:false, TraceReturn:false, Goroutine:false, Stacktrace:0, Variables: [] string ( nil ) , LoadArgs: ( *api.LoadConfig )( nil ) , LoadLocals: ( *api.LoadConfig )( nil ) , HitCount:map [ string ] uint64 {} , TotalHitCount:0x0 } 2019 -07-18T21:26:51Z debug layer = debugger continuing I0718 21 :26:51.518797 32 synchronizer.go:83 ] sim1:10161 capabilities supported_models:<name: \"openconfig-interfaces\" organization: \"OpenConfig working group\" version: \"2017-07-14\" > supported_models:<name: \"openconfig-openflow\" organization: \"OpenConfig working group\" version: \"2017-06-01\" > supported_models:<name: \"openconfig-platform\" organization: \"OpenConfig working group\" version: \"2016-12-22\" > supported_models:<name: \"openconfig-system\" organization: \"OpenConfig working group\" version: \"2017-07-06\" > supported_encodings:JSON supported_encodings:JSON_IETF gNMI_version: \"0.7.0\" I0718 21 :26:51.519659 32 synchronizer.go:305 ] Getting saved config for sim1 if you run continue again, it passes the breakpoint at line 89 and onos-config will keep running: > onit get logs onos-config-5d56898bdd-zrmt2 ... 2019 -07-18T21:45:01Z debug layer = debugger continuing I0718 21 :45:01.034584 32 synchronizer.go:89 ] sim1:10161 has no initial configuration I0718 21 :45:01.053357 32 synchronizer.go:243 ] subscribe:<prefix:<> subscription:<path:<> sample_interval:15 heartbeat_interval:15 > subscription:<path:<> sample_interval:15 heartbeat_interval:15 > > At this point, you have two breakpoints in the synchronizer . To see list of your breakpoints, you can run breakpoints command from dlv CLI. ( dlv ) breakpoints Breakpoint runtime-fatal-throw at 0x6ab830 for runtime.fatalthrow () /usr/local/go/src/runtime/panic.go:663 ( 0 ) Breakpoint unrecovered-panic at 0x6ab8a0 for runtime.fatalpanic () /usr/local/go/src/runtime/panic.go:690 ( 0 ) print runtime.curg._panic.arg Breakpoint 4 at 0xcd62a2 for github.com/onosproject/onos-config/pkg/southbound/synchronizer.New () /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 ( 1 ) Breakpoint 5 at 0xcd64f9 for github.com/onosproject/onos-config/pkg/southbound/synchronizer.New () /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:89 ( 0 ) You can repeat the above steps by adding another simulator to onos-config and monitor dlv CLI and onos-config pod logs.","title":"Debugging. Example #2: Use Simple Delve Client:"},{"location":"onos-config/docs/debugging/#print-local-variables","text":"When you set breakpoints in a file, you can also print local variables as you go through the breakpoints. For example, look at the following piece of code from synchronizer : target : = southbound.Target {} key, err : = target.ConnectTarget ( context, *sync.Device ) sync.key = key Suppose we add a simulator and we would like to print the value of key when it passes this block of code. You can use print function from dlv CLI to print local variables in the code: ( dlv ) print key github.com/onosproject/onos-config/pkg/southbound.DeviceID { DeviceID: \"sim2:10161\" , } or to print capResponse variable: ( dlv ) print capResponse *github.com/openconfig/gnmi/proto/gnmi.CapabilityResponse { SupportedModels: [] *github.com/openconfig/gnmi/proto/gnmi.ModelData len: 4 , cap: 4 , [ * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e280 ) , * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e2d0 ) , * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e320 ) , * ( * \"github.com/openconfig/gnmi/proto/gnmi.ModelData\" )( 0xc00042e370 ) , ] , SupportedEncodings: [] github.com/openconfig/gnmi/proto/gnmi.Encoding len: 2 , cap: 2 , [ Encoding_JSON ( 0 ) ,Encoding_JSON_IETF ( 4 )] , GNMIVersion: \"0.7.0\" , Extension: [] *github.com/openconfig/gnmi/proto/gnmi_ext.Extension len: 0 , cap: 0 , nil, XXX_NoUnkeyedLiteral: struct {} {} , XXX_unrecognized: [] uint8 len: 0 , cap: 0 , nil, XXX_sizecache: 0 , } You can also check the list of local variables using locals command from dlv CLI, for example: ( dlv ) locals sync = ( \"*github.com/onosproject/onos-config/pkg/southbound/synchronizer.Synchronizer\" )( 0xc000368000 ) capResponse = ( \"*github.com/openconfig/gnmi/proto/gnmi.CapabilityResponse\" )( 0xc000346d80 ) target = github.com/onosproject/onos-config/pkg/southbound.Target { Destination: ( * \"github.com/openconfig/gnmi/client.Destination\" )( 0xc0004e00e0 ) , Clt: github.com/onosproject/onos-config/pkg/southbound.GnmiClient ( github.com/onosproject/onos-config/pkg/southbound.gnmiClientImpl ) * ( * \"github.com/onosproject/onos-config/pkg/southbound.GnmiClient\" )( 0xc0004e0130 ) , Ctx: context.Context ( *context.emptyCtx ) ... } key = github.com/onosproject/onos-config/pkg/southbound.DeviceID { DeviceID: \"sim1:10161\" } err = error nil capErr = error nil","title":"Print Local Variables"},{"location":"onos-config/docs/debugging/#goroutines","text":"To check which goroutine is running when you are going through a piece of code using breakpoints, you can run the following command from dlv CLI: ( dlv ) goroutine Goroutine 12 : Runtime: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 github.com/onosproject/onos-config/pkg/southbound/synchronizer.New ( 0xcd62a2 ) User: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 github.com/onosproject/onos-config/pkg/southbound/synchronizer.New ( 0xcd62a2 ) Go: /go/src/github.com/onosproject/onos-config/pkg/manager/manager.go:217 github.com/onosproject/onos-config/pkg/manager. ( *Manager ) .Run ( 0xcdfb0c ) Start: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/factory.go:30 github.com/onosproject/onos-config/pkg/southbound/synchronizer.Factory ( 0xcd4aa0 ) To check list of all goroutines which potentially can be running in onos-config, you can run the following command from dlv CLI: ( dlv ) goroutines Goroutine 1 - User: /usr/local/go/src/runtime/netpoll.go:182 internal/poll.runtime_pollWait ( 0x6a7b5e ) Goroutine 2 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 3 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 4 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 5 - User: /go/src/github.com/onosproject/onos-config/vendor/k8s.io/klog/klog.go:990 k8s.io/klog. ( *loggingT ) .flushDaemon ( 0x8227a3 ) Goroutine 6 - User: /go/src/github.com/onosproject/onos-config/vendor/github.com/golang/glog/glog.go:882 github.com/golang/glog. ( *loggingT ) .flushDaemon ( 0xca8b23 ) Goroutine 7 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 8 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 9 - User: /go/src/github.com/onosproject/onos-config/pkg/dispatcher/dispatcher.go:58 github.com/onosproject/onos-config/pkg/dispatcher. ( *Dispatcher ) .Listen ( 0x82a193 ) Goroutine 10 - User: /go/src/github.com/onosproject/onos-config/pkg/dispatcher/dispatcher.go:86 github.com/onosproject/onos-config/pkg/dispatcher. ( *Dispatcher ) .ListenOperationalState ( 0x82a96b ) Goroutine 11 - User: /go/src/github.com/onosproject/onos-config/pkg/manager/manager.go:236 github.com/onosproject/onos-config/pkg/manager.listenOnResponseChannel ( 0xcdfd20 ) Goroutine 12 - User: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 github.com/onosproject/onos-config/pkg/southbound/synchronizer.New ( 0xcd62a2 ) ( thread 60 ) Goroutine 18 - User: /usr/local/go/src/runtime/lock_futex.go:228 runtime.notetsleepg ( 0x685a74 ) Goroutine 19 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 20 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 34 - User: /usr/local/go/src/runtime/lock_futex.go:228 runtime.notetsleepg ( 0x685a74 ) Goroutine 35 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 83 - User: /usr/local/go/src/runtime/proc.go:302 runtime.gopark ( 0x6ae2c4 ) Goroutine 101 - User: /usr/local/go/src/runtime/netpoll.go:182 internal/poll.runtime_pollWait ( 0x6a7b5e ) Goroutine 102 - User: /go/src/github.com/onosproject/onos-config/vendor/google.golang.org/grpc/internal/transport/controlbuf.go:317 google.golang.org/grpc/internal/transport. ( *controlBuffer ) .get ( 0xb54ae3 ) Goroutine 103 - User: /go/src/github.com/onosproject/onos-config/vendor/google.golang.org/grpc/stream.go:320 google.golang.org/grpc.newClientStream.func5 ( 0xc3492d ) Goroutine 104 - User: /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:130 github.com/onosproject/onos-config/pkg/southbound/synchronizer. ( *Synchronizer ) .syncConfigEventsToDevice ( 0xcd72a5 ) Goroutine 105 - User: /go/src/github.com/onosproject/onos-config/vendor/google.golang.org/grpc/internal/transport/transport.go:267 google.golang.org/grpc/internal/transport. ( *Stream ) .waitOnHeader ( 0xb7e542 ) ..... [ 49 goroutines ]","title":"Goroutines"},{"location":"onos-config/docs/debugging/#debug-your-code-line-by-line","text":"After setting a breakpoint in a source file, you can execute your code line by line using next or n command from dlv CLI: For example: ( dlv ) n > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 88 ( PC : 0xcd64e9 ) ( dlv ) n > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 89 ( PC : 0xcd64f9 ) ( dlv ) n > github . com / onosproject / onos - config / pkg / southbound / synchronizer . New () / go / src / github . com / onosproject / onos - config / pkg / southbound / synchronizer / synchronizer . go : 123 ( PC : 0xcd65ec ) ( dlv ) n","title":"Debug Your Code Line by Line"},{"location":"onos-config/docs/debugging/#print-stack-trace","text":"To print stack trace, you can run stack command as follows: ( dlv ) stack 0 0x0000000000cd62a2 in github.com/onosproject/onos-config/pkg/southbound/synchronizer.New at /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/synchronizer.go:83 1 0x0000000000cd518e in github.com/onosproject/onos-config/pkg/southbound/synchronizer.Factory at /go/src/github.com/onosproject/onos-config/pkg/southbound/synchronizer/factory.go:49 2 0x00000000006dae71 in runtime.goexit at /usr/local/go/src/runtime/asm_amd64.s:1337","title":"Print Stack Trace"},{"location":"onos-config/docs/deployment/","text":"Deploying onos-config This guide deploy onos-config through it's Helm chart assumes you have a Kubernetes cluster running with an atomix controller deployed in a namespace. If you dont' specify the --namespace in the commands below atomix controller must be deployed in the default onos-config Helm chart is based on Helm 3.0 version, with no need for the Tiller pod to be present. If you don't have a cluster running and want to try on your local machine please follow first the Kubernetes setup steps outlined to deploy with Helm . Installing the Chart To install the chart, simply run helm install onos-config deployments/helm/onos-config from the root directory of this project: helm install onos-config deployments/helm/onos-config NAME: onos-config LAST DEPLOYED: Tue Nov 26 13 :38:20 2019 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None helm install assigns a unique name to the chart and displays all the k8s resources that were created by it. To list the charts that are installed and view their statuses, run helm ls : helm ls NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ... jumpy-tortoise 1 Tue May 14 18 :56:39 2019 DEPLOYED onos-config-0.0.1 0 .0.1 default Onos Config Partition Set The onos-config chart also deployes a PartitionSet custom Atomix resource to store all the configuration in a replicated and fail safe manner. In the following example there is only one partition set deployed onos-config-1-0 . NAMESPACE NAME READY STATUS RESTARTS AGE default atomix-controller-b579b9f48-lgvxf 1 /1 Running 0 63m default onos-config-1-0 1 /1 Running 0 61m default onos-config-77765c9dc4-vsjjn 1 /1 Running 0 61m One can customize the number of partitions and replicas by modifying, in values.yaml , under store/raft the values of partitions: 1 partitionSize: 1 Installing the chart in a different namespace. To install the chart in a different namespace please modify the default occurances in the values.yaml file. Please be aware to change also atomix-controller.default.svc.cluster.local:5679 to atomix-controller.<your_name_space_here>.svc.cluster.local:5679 . Then issue the helm install command helm install --namespace <your_name_space> onos-config deployments/helm/onos-config Installing the chart with debug. onos-config offers the capability to open a debug port (4000) to the image. To enable the debug capabilities please set the debug flag to true in values.yaml or pass it to helm install helm install onos-config deployments/helm/onos-config --set debug = true Troubleshoot If your chart does not install or the pod is not running for some reason and/or you modified values Helm offers two flags to help you debug your chart: --dry-run check the chart without actually installing the pod. --debug prints out more information about your chart helm install onos-config --debug --dry-run ./deployments/helm/onos-topo/ Uninstalling the chart. To remove the onos-config pod issue helm delete onos-config Pod Information To view the pods that are deployed, run kubectl get pods : > kubectl get pods NAME READY STATUS RESTARTS AGE ... onos-config-655964cbf5-tkcfb 1 /1 Running 0 52s You can view more detailed information about the pod and other resources by running kubectl describe : > kubectl describe pod onos-config-655964cbf5-tkcfb Name: onos-config-655964cbf5-tkcfb Namespace: default Priority: 0 PriorityClassName: <none> Node: minikube/10.0.2.15 Start Time: Tue, 14 May 2019 18 :56:39 -0700 ... The onos-config pods are reached through a Service which load balances requests to the application. To view the services, run kubectl get services : > kubectl get svc NAME DATA AGE ... onos-config-config 5 86s The application's configuration is stored in a ConfigMap which can be viewed by running kubectl get configmaps : > kubectl get cm NAME DATA AGE ... onos-config-config 5 97s And TLS keys and certs are stored in a Secret resource: > kubectl get secrets NAME TYPE DATA AGE ... onos-config-secret Opaque 4 109s","title":"How To Deploy with Helm"},{"location":"onos-config/docs/deployment/#deploying-onos-config","text":"This guide deploy onos-config through it's Helm chart assumes you have a Kubernetes cluster running with an atomix controller deployed in a namespace. If you dont' specify the --namespace in the commands below atomix controller must be deployed in the default onos-config Helm chart is based on Helm 3.0 version, with no need for the Tiller pod to be present. If you don't have a cluster running and want to try on your local machine please follow first the Kubernetes setup steps outlined to deploy with Helm .","title":"Deploying onos-config"},{"location":"onos-config/docs/deployment/#installing-the-chart","text":"To install the chart, simply run helm install onos-config deployments/helm/onos-config from the root directory of this project: helm install onos-config deployments/helm/onos-config NAME: onos-config LAST DEPLOYED: Tue Nov 26 13 :38:20 2019 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None helm install assigns a unique name to the chart and displays all the k8s resources that were created by it. To list the charts that are installed and view their statuses, run helm ls : helm ls NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ... jumpy-tortoise 1 Tue May 14 18 :56:39 2019 DEPLOYED onos-config-0.0.1 0 .0.1 default","title":"Installing the Chart"},{"location":"onos-config/docs/deployment/#onos-config-partition-set","text":"The onos-config chart also deployes a PartitionSet custom Atomix resource to store all the configuration in a replicated and fail safe manner. In the following example there is only one partition set deployed onos-config-1-0 . NAMESPACE NAME READY STATUS RESTARTS AGE default atomix-controller-b579b9f48-lgvxf 1 /1 Running 0 63m default onos-config-1-0 1 /1 Running 0 61m default onos-config-77765c9dc4-vsjjn 1 /1 Running 0 61m One can customize the number of partitions and replicas by modifying, in values.yaml , under store/raft the values of partitions: 1 partitionSize: 1","title":"Onos Config Partition Set"},{"location":"onos-config/docs/deployment/#installing-the-chart-in-a-different-namespace","text":"To install the chart in a different namespace please modify the default occurances in the values.yaml file. Please be aware to change also atomix-controller.default.svc.cluster.local:5679 to atomix-controller.<your_name_space_here>.svc.cluster.local:5679 . Then issue the helm install command helm install --namespace <your_name_space> onos-config deployments/helm/onos-config","title":"Installing the chart in a different namespace."},{"location":"onos-config/docs/deployment/#installing-the-chart-with-debug","text":"onos-config offers the capability to open a debug port (4000) to the image. To enable the debug capabilities please set the debug flag to true in values.yaml or pass it to helm install helm install onos-config deployments/helm/onos-config --set debug = true","title":"Installing the chart with debug."},{"location":"onos-config/docs/deployment/#troubleshoot","text":"If your chart does not install or the pod is not running for some reason and/or you modified values Helm offers two flags to help you debug your chart: --dry-run check the chart without actually installing the pod. --debug prints out more information about your chart helm install onos-config --debug --dry-run ./deployments/helm/onos-topo/","title":"Troubleshoot"},{"location":"onos-config/docs/deployment/#uninstalling-the-chart","text":"To remove the onos-config pod issue helm delete onos-config","title":"Uninstalling the chart."},{"location":"onos-config/docs/deployment/#pod-information","text":"To view the pods that are deployed, run kubectl get pods : > kubectl get pods NAME READY STATUS RESTARTS AGE ... onos-config-655964cbf5-tkcfb 1 /1 Running 0 52s You can view more detailed information about the pod and other resources by running kubectl describe : > kubectl describe pod onos-config-655964cbf5-tkcfb Name: onos-config-655964cbf5-tkcfb Namespace: default Priority: 0 PriorityClassName: <none> Node: minikube/10.0.2.15 Start Time: Tue, 14 May 2019 18 :56:39 -0700 ... The onos-config pods are reached through a Service which load balances requests to the application. To view the services, run kubectl get services : > kubectl get svc NAME DATA AGE ... onos-config-config 5 86s The application's configuration is stored in a ConfigMap which can be viewed by running kubectl get configmaps : > kubectl get cm NAME DATA AGE ... onos-config-config 5 97s And TLS keys and certs are stored in a Secret resource: > kubectl get secrets NAME TYPE DATA AGE ... onos-config-secret Opaque 4 109s","title":"Pod Information"},{"location":"onos-config/docs/gnmi/","text":"Northbound gNMI service The system provides a Northbound gNMI service. gNMI extensions supported on the Northbound are described in gnmi_extensions.md gnmi_cli utility A simple way to issue a gNMI requests is to use the gnmi_cli utility from the OpenConfig project. gnmi_cli utility through 'onit' On a deployed cluster the onos-cli pod has a gNMI client that can be used to format and send gNMI messages. To access the CLI use onit onos - cli to get in to the onos-cli pod and then run gnmi_cli from there. Accessing from local machine An alternative is to install on your system, install as follows: go get -u github.com/openconfig/gnmi/cmd/gnmi_cli For troubleshooting information see gnmi_user_manual.md Namespaces onos-config follows the YGOT project in simplification by not using namespaces in paths. This can be achieved because the YANG models used do not have clashing device names that need to be qualified by namespaces. This helps developers, avoiding un-needed complication and redundancy. Northbound gNMI Get Request onos-config extends standard gNMI as a method of accessing a complete configuration system consisting of several devices - each identified by target . It supports network wide configuration actions (multiple updates on multiple devices at once, and rollback of same). The gNMI Northbound interface is available through https on port 5150. A simple Get operation Use gnmi_cli -get to get configuration for a particular device (target) from the system. Use \"target\" as the identifier of the device, and the \"elem\" collection is the path to the requested element. If config from several devices are required, several paths can be added gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt List all device names (targets) A useful way to retrieve all stored device names is with the command: gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: '*'>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt The value in the response can be an individual value or a tree of values depending on the scope of the request. List complete configuration for a device (target) Use the following value for proto to get all configuration and operational state on a particular device -proto \"path: \" Get a keyed index in a list Use a proto value like: -proto \"path: elem: elem: elem: > elem: elem: > elem: elem: >\" Use wildcards in a path onos-config supports the wildcards * and ... in gNMI paths, meaning match one item of match all items respectively as defined in the gNMI specification . For instance to retrieve all instances of an interface use * as the key: gnmi_cli -get -address onos-config:5150 \\ -proto \"path:<target: 'devicesim-1', elem:<name:'interfaces' > elem:<name:'interface' key:<key:'name' value:'*' > > elem:<name:'config'> elem:<name:'enabled' >>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This returns the enabled config attribute of both interfaces 'eth1' and 'admin' To retrieve both the config and state values of both then additionally the use * in place of config : gnmi_cli -get -address onos-config:5150 \\ -proto \"path:<target: 'devicesim-1', elem:<name:'interfaces' > elem:<name:'interface' key:<key:'name' value:'*' > > elem:<name:'*'> elem:<name:'enabled' >>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt If the device is connected and the OperationState cache is populated this returns 4 values - eth1 config and state enabled values and admin config and state enabled values. Device read only state get To retrieve state, non-configurable values, there is no difference with a normal gNMI get request. An example follows: gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: 'devicesim-1',elem:<name:'system' > elem:<name:'openflow' > elem:<name:'controllers' > elem:<name:'controller' key:<key:'name' value:'main' > > elem:<name:'connections' > elem:<name:'connection' key:<key:'aux-id' value:'0' > > elem:<name:'state' > elem:<name:'address'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt Northbound Set Request via gNMI Similarly, to make a gNMI Set request, use the gnmi_cli -set command as in the example below: gnmi_cli -address onos-config:5150 -set \\ -proto \"update: <path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>> val: <string_val: 'Europe/Paris'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt giving a response like response: < path: < elem: < name: \"system\" > elem: < name: \"clock\" > elem: < name: \"config\" > elem: < name: \"timezone-name\" > target: \"devicesim-1\" > op: UPDATE > timestamp: 1559122191 extension: < registered_ext: < id: 100 msg: \"happy_matsumoto\" > > The result will include a field as a gNMI SetResponse extension 100 giving randomly generated Network Change identifier, which may be subsequently used to rollback the change. If a specific name is desired for a Network Change, the set may be given in the SetRequest() with the 100 extension at the end of the -proto section like: , extension: <registered_ext: <id: 100, msg: 'myfirstchange'>> See gnmi_extensions.md for more on gNMI extensions supported. The corresponding -get for this require using the -proto path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>> Currently (Nov '19) checking of the contents done only when a Model Plugin is loaded for the device type. 2 checks are done that a attempt is not being made to change a readonly attribute and that valid data types and values are being used. The config is only forwarded down to the southbound layer only if the config is correct and the device is registered in the topocache (currently in the deviceStore) Target device not known/creating a new device target If the target device is not currently known to onos-config the system will store the configuration internally and apply it to the target device when/if it becomes available. When the target becomes available onos-config will compute the latest configuration for it based on the set of applied changes and push it to the target with a standard set operation. In the case where the target device is not known, a special feature of onos-config has to be invoked to tell the system the type and version to use as a model plugin for validation - these are given in extensions 101 (version) and 102 (type). This can be used to pre-provision new devices or new versions of devices before they are available in the onos-topo topology. For example using the gnmi_cli: gnmi_cli -address onos-config:5150 -set \\ -proto \"update: <path: <target: 'new-device', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>> val: <string_val: 'Europe/Paris'>>, extension: <registered_ext: <id: 100, msg: 'my2ndchange'>> , extension <registered_ext: <id: 101, msg: '1.0.0'>>, extension: <registered_ext: <id: 102, msg: 'Devicesim'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt There are restrictions on the use of these extensions in this context: * All targets specified in this set command will have to be of the same type and version as given in extension 101 and 102, even if they already exist on the system. Northbound Delete Request via gNMI A delete request in gNMI is done using the set request with delete paths instead of update or replace . To make a gNMI Set request do delete a path, use the gnmi_cli -set command as in the example below: gnmi_cli -address onos-config:5150 -set \\ -proto \"delete: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt Northbound Subscribe Request for Stream Notifications via gNMI Similarly, to make a gNMI Subscribe request for streaming, use the gnmi_cli command as in the example below, please note the 0 as subscription mode to indicate streaming: gnmi_cli -address onos-config:5150 \\ -proto \"subscribe:<mode: 0, prefix:<>, subscription:<path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This command will block until there is a change at the requested value that gets propagated to the underlying stream. Also as per gnmi_cli behaviour the updates get printed twice. Northbound Subscribe Once Request via gNMI Similarly, to make a gNMI Subscribe Once request, use the gnmi_cli command as in the example below, please note the 1 as subscription mode to indicate to send the response once: gnmi_cli -address onos-config:5150 \\ -proto \"subscribe:<mode: 1, prefix:<>, subscription:<path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This command will fail if no value is set at that specific path. This is due to limitations of the gnmi_cli. Northbound Subscribe Poll Request via gNMI Similarly, to make a gNMI Subscribe POLL request, use the gnmi_cli command as in the example below, please note the 2 as subscription mode to indicate to send the response in a polling way every polling_interval specified seconds: gnmi_cli -address onos-config:5150 -polling_interval 5s \\ -proto \"subscribe:<mode: 2, prefix:<>, subscription:<sample_interval: 5, path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This command will fail if no value is set at that specific path. This is due to limitations of the gnmi_cli.","title":"Northbound gNMI Service"},{"location":"onos-config/docs/gnmi/#northbound-gnmi-service","text":"The system provides a Northbound gNMI service. gNMI extensions supported on the Northbound are described in gnmi_extensions.md","title":"Northbound gNMI service"},{"location":"onos-config/docs/gnmi/#gnmi_cli-utility","text":"A simple way to issue a gNMI requests is to use the gnmi_cli utility from the OpenConfig project.","title":"gnmi_cli utility"},{"location":"onos-config/docs/gnmi/#gnmi_cli-utility-through-onit","text":"On a deployed cluster the onos-cli pod has a gNMI client that can be used to format and send gNMI messages. To access the CLI use onit onos - cli to get in to the onos-cli pod and then run gnmi_cli from there.","title":"gnmi_cli utility through 'onit'"},{"location":"onos-config/docs/gnmi/#accessing-from-local-machine","text":"An alternative is to install on your system, install as follows: go get -u github.com/openconfig/gnmi/cmd/gnmi_cli For troubleshooting information see gnmi_user_manual.md","title":"Accessing from local machine"},{"location":"onos-config/docs/gnmi/#namespaces","text":"onos-config follows the YGOT project in simplification by not using namespaces in paths. This can be achieved because the YANG models used do not have clashing device names that need to be qualified by namespaces. This helps developers, avoiding un-needed complication and redundancy.","title":"Namespaces"},{"location":"onos-config/docs/gnmi/#northbound-gnmi-get-request","text":"onos-config extends standard gNMI as a method of accessing a complete configuration system consisting of several devices - each identified by target . It supports network wide configuration actions (multiple updates on multiple devices at once, and rollback of same). The gNMI Northbound interface is available through https on port 5150.","title":"Northbound gNMI Get Request"},{"location":"onos-config/docs/gnmi/#a-simple-get-operation","text":"Use gnmi_cli -get to get configuration for a particular device (target) from the system. Use \"target\" as the identifier of the device, and the \"elem\" collection is the path to the requested element. If config from several devices are required, several paths can be added gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt","title":"A simple Get operation"},{"location":"onos-config/docs/gnmi/#list-all-device-names-targets","text":"A useful way to retrieve all stored device names is with the command: gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: '*'>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt The value in the response can be an individual value or a tree of values depending on the scope of the request.","title":"List all device names (targets)"},{"location":"onos-config/docs/gnmi/#list-complete-configuration-for-a-device-target","text":"Use the following value for proto to get all configuration and operational state on a particular device -proto \"path: \"","title":"List complete configuration for a device (target)"},{"location":"onos-config/docs/gnmi/#get-a-keyed-index-in-a-list","text":"Use a proto value like: -proto \"path: elem: elem: elem: > elem: elem: > elem: elem: >\"","title":"Get a keyed index in a list"},{"location":"onos-config/docs/gnmi/#use-wildcards-in-a-path","text":"onos-config supports the wildcards * and ... in gNMI paths, meaning match one item of match all items respectively as defined in the gNMI specification . For instance to retrieve all instances of an interface use * as the key: gnmi_cli -get -address onos-config:5150 \\ -proto \"path:<target: 'devicesim-1', elem:<name:'interfaces' > elem:<name:'interface' key:<key:'name' value:'*' > > elem:<name:'config'> elem:<name:'enabled' >>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This returns the enabled config attribute of both interfaces 'eth1' and 'admin' To retrieve both the config and state values of both then additionally the use * in place of config : gnmi_cli -get -address onos-config:5150 \\ -proto \"path:<target: 'devicesim-1', elem:<name:'interfaces' > elem:<name:'interface' key:<key:'name' value:'*' > > elem:<name:'*'> elem:<name:'enabled' >>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt If the device is connected and the OperationState cache is populated this returns 4 values - eth1 config and state enabled values and admin config and state enabled values.","title":"Use wildcards in a path"},{"location":"onos-config/docs/gnmi/#device-read-only-state-get","text":"To retrieve state, non-configurable values, there is no difference with a normal gNMI get request. An example follows: gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: 'devicesim-1',elem:<name:'system' > elem:<name:'openflow' > elem:<name:'controllers' > elem:<name:'controller' key:<key:'name' value:'main' > > elem:<name:'connections' > elem:<name:'connection' key:<key:'aux-id' value:'0' > > elem:<name:'state' > elem:<name:'address'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt","title":"Device read only state get"},{"location":"onos-config/docs/gnmi/#northbound-set-request-via-gnmi","text":"Similarly, to make a gNMI Set request, use the gnmi_cli -set command as in the example below: gnmi_cli -address onos-config:5150 -set \\ -proto \"update: <path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>> val: <string_val: 'Europe/Paris'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt giving a response like response: < path: < elem: < name: \"system\" > elem: < name: \"clock\" > elem: < name: \"config\" > elem: < name: \"timezone-name\" > target: \"devicesim-1\" > op: UPDATE > timestamp: 1559122191 extension: < registered_ext: < id: 100 msg: \"happy_matsumoto\" > > The result will include a field as a gNMI SetResponse extension 100 giving randomly generated Network Change identifier, which may be subsequently used to rollback the change. If a specific name is desired for a Network Change, the set may be given in the SetRequest() with the 100 extension at the end of the -proto section like: , extension: <registered_ext: <id: 100, msg: 'myfirstchange'>> See gnmi_extensions.md for more on gNMI extensions supported. The corresponding -get for this require using the -proto path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>> Currently (Nov '19) checking of the contents done only when a Model Plugin is loaded for the device type. 2 checks are done that a attempt is not being made to change a readonly attribute and that valid data types and values are being used. The config is only forwarded down to the southbound layer only if the config is correct and the device is registered in the topocache (currently in the deviceStore)","title":"Northbound Set Request via gNMI"},{"location":"onos-config/docs/gnmi/#target-device-not-knowncreating-a-new-device-target","text":"If the target device is not currently known to onos-config the system will store the configuration internally and apply it to the target device when/if it becomes available. When the target becomes available onos-config will compute the latest configuration for it based on the set of applied changes and push it to the target with a standard set operation. In the case where the target device is not known, a special feature of onos-config has to be invoked to tell the system the type and version to use as a model plugin for validation - these are given in extensions 101 (version) and 102 (type). This can be used to pre-provision new devices or new versions of devices before they are available in the onos-topo topology. For example using the gnmi_cli: gnmi_cli -address onos-config:5150 -set \\ -proto \"update: <path: <target: 'new-device', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>> val: <string_val: 'Europe/Paris'>>, extension: <registered_ext: <id: 100, msg: 'my2ndchange'>> , extension <registered_ext: <id: 101, msg: '1.0.0'>>, extension: <registered_ext: <id: 102, msg: 'Devicesim'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt There are restrictions on the use of these extensions in this context: * All targets specified in this set command will have to be of the same type and version as given in extension 101 and 102, even if they already exist on the system.","title":"Target device not known/creating a new device target"},{"location":"onos-config/docs/gnmi/#northbound-delete-request-via-gnmi","text":"A delete request in gNMI is done using the set request with delete paths instead of update or replace . To make a gNMI Set request do delete a path, use the gnmi_cli -set command as in the example below: gnmi_cli -address onos-config:5150 -set \\ -proto \"delete: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt","title":"Northbound Delete Request via gNMI"},{"location":"onos-config/docs/gnmi/#northbound-subscribe-request-for-stream-notifications-via-gnmi","text":"Similarly, to make a gNMI Subscribe request for streaming, use the gnmi_cli command as in the example below, please note the 0 as subscription mode to indicate streaming: gnmi_cli -address onos-config:5150 \\ -proto \"subscribe:<mode: 0, prefix:<>, subscription:<path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This command will block until there is a change at the requested value that gets propagated to the underlying stream. Also as per gnmi_cli behaviour the updates get printed twice.","title":"Northbound Subscribe Request for Stream Notifications via gNMI"},{"location":"onos-config/docs/gnmi/#northbound-subscribe-once-request-via-gnmi","text":"Similarly, to make a gNMI Subscribe Once request, use the gnmi_cli command as in the example below, please note the 1 as subscription mode to indicate to send the response once: gnmi_cli -address onos-config:5150 \\ -proto \"subscribe:<mode: 1, prefix:<>, subscription:<path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This command will fail if no value is set at that specific path. This is due to limitations of the gnmi_cli.","title":"Northbound Subscribe Once Request via gNMI"},{"location":"onos-config/docs/gnmi/#northbound-subscribe-poll-request-via-gnmi","text":"Similarly, to make a gNMI Subscribe POLL request, use the gnmi_cli command as in the example below, please note the 2 as subscription mode to indicate to send the response in a polling way every polling_interval specified seconds: gnmi_cli -address onos-config:5150 -polling_interval 5s \\ -proto \"subscribe:<mode: 2, prefix:<>, subscription:<sample_interval: 5, path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'clock' > elem: <name: 'config'> elem: <name: 'timezone-name'>>>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt This command will fail if no value is set at that specific path. This is due to limitations of the gnmi_cli.","title":"Northbound Subscribe Poll Request via gNMI"},{"location":"onos-config/docs/gnmi_extensions/","text":"gNMI extensions on the Northbound interface gNMI is designed primarily as a device management interface, and augmenting it with the extra functionality to do network wide configuration management across many devices requires some extension. Some functions (e.g. rollback and version management) are far beyond what gNMI is designed for, and have been given their own gRPC definitions as admin and diags . Use of target in the NBI In gNMI the Path type is comprised of a set of path elements and a target . In the onos-config NBI this target represents the name of the device as it is held in the configuration system. Configurations can be explored through the onos cli like: > onos config get configs Device2-2.0.0 ( Device2 ) 2 .0.0 TestDevice 2019 -05-09T18:00:00+01:00 oOqIgEg82ZvVcF7Q3xEDpWAoPcw = stratum-sim-1-1.0.0 ( stratum-sim-1 ) 1 .0.0 Stratum 2019 -06-05T11:03:17+01:00 hPE88W6rrt5TskCTxtoB1n0hr3I = ... In the example above stratum-sim-1 is the device associated with the configuration stratum-sim-1-1.0.0 . Therefore when using a gNMI client like gnmi_cli (see gnmi.md ) the target can be specified like gnmi_cli -get -address localhost:5150 \\ -proto \"path: <target: 'stratum-sim-1', elem: <name: 'system'> elem:<name:'config'> elem: <name: 'motd-banner'>>\" \\ ... The following rules apply when a prefix is present in the request: The target in the prefix always takes precedence over any others If no target is given in the prefix it is an error Special case to get all device names When doing a GetRequest if * is given as a target then the request returns a simple listing of all device names present in the system (with their version). Any path elements are ignored in this special case. Managing configuration objects The diagram shows the internal storage structures of onos-config (in orange). The Configuration object represents the complete configuration for a particular version of a device. Network changes can be applied across multiple Configurations (devices), and have the ability to be rolled back (by the name of the Network Change). 3 different extensions have been chosen in the project to make dealing with Network Changes and Configurations through gNMI possible. Use of Extension 100 (network change name) in SetRequest and SetResponse In onos-config the gNMI extension number 100 has been reserved for the network change name . SetRequest In the SetRequest extension 100 can be used to define a name for the Network change. If it is not specified then a name is picked automatically. There is an example of setting this extension when using gnmi_cli in gnmi.md (Northbound Set Request via gNMI) SetResponse In the SetResponse the name of the Network Change will always be given in extension 100 (either the given name or the generated one). There is an example of the return of this extension through gnmi_cli in gnmi.md (Northbound Set Request via gNMI) Use of Extension 101 (device version) in SetRequest Extension 101 is used to set the Model version for a Configuration (as part of a Network Change). There may be multiple different configurations for a device based on version number. This extension allows the correct version of the configuration to be chosen. If a version is given where no existing Configuration exists, an error is returned explaining that device type (extension 102 - see below) should also be specified. If no extension 101 (version) is given, and only one Configuration already exists for that device (target), then the change is applied to that Configuration. Use of Extension 102 (device type) in SetRequest The target in the SetRequest contains the device name, but this is not enough to create a new Configuration if one does not exist - 3 pieces of information are required - the device name, the device type and the version (see diagram above). Extension 102 is used to set the device type . If a Configuration already exists for this device name and version and its device type is different to what's given in extension 101, then an error is returned. Use of Extension 103 (list of devices disconnected) in GetResponse, SetResponse, SubscribeResponse In onos-config the gNMI extension number 103 has been reserved for the list of devices disconnected . The changes and device configuration is still valid and held by onos-config until the device arrives in the network. GetResponse and SetResponse In the GetResponse and GetRequest the 103 extension has an attached message containing a comma separated list of devices, e.g device1,device2,device3 signaling which devices in the request are not yet connected to onos-config. SubscribeResponse In the SubscribeResponse the 103 extension has an attached message containing a single device, e.g device1 signaling that the device in the request is not yet connected to onos-config but a configuration object has been changed. in Subscribe there is one device per response since it's a 1:1 relationship path to update, where the path include one device.","title":"gNMI Extensions"},{"location":"onos-config/docs/gnmi_extensions/#gnmi-extensions-on-the-northbound-interface","text":"gNMI is designed primarily as a device management interface, and augmenting it with the extra functionality to do network wide configuration management across many devices requires some extension. Some functions (e.g. rollback and version management) are far beyond what gNMI is designed for, and have been given their own gRPC definitions as admin and diags .","title":"gNMI extensions on the Northbound interface"},{"location":"onos-config/docs/gnmi_extensions/#use-of-target-in-the-nbi","text":"In gNMI the Path type is comprised of a set of path elements and a target . In the onos-config NBI this target represents the name of the device as it is held in the configuration system. Configurations can be explored through the onos cli like: > onos config get configs Device2-2.0.0 ( Device2 ) 2 .0.0 TestDevice 2019 -05-09T18:00:00+01:00 oOqIgEg82ZvVcF7Q3xEDpWAoPcw = stratum-sim-1-1.0.0 ( stratum-sim-1 ) 1 .0.0 Stratum 2019 -06-05T11:03:17+01:00 hPE88W6rrt5TskCTxtoB1n0hr3I = ... In the example above stratum-sim-1 is the device associated with the configuration stratum-sim-1-1.0.0 . Therefore when using a gNMI client like gnmi_cli (see gnmi.md ) the target can be specified like gnmi_cli -get -address localhost:5150 \\ -proto \"path: <target: 'stratum-sim-1', elem: <name: 'system'> elem:<name:'config'> elem: <name: 'motd-banner'>>\" \\ ... The following rules apply when a prefix is present in the request: The target in the prefix always takes precedence over any others If no target is given in the prefix it is an error","title":"Use of target in the NBI"},{"location":"onos-config/docs/gnmi_extensions/#special-case-to-get-all-device-names","text":"When doing a GetRequest if * is given as a target then the request returns a simple listing of all device names present in the system (with their version). Any path elements are ignored in this special case.","title":"Special case to get all device names"},{"location":"onos-config/docs/gnmi_extensions/#managing-configuration-objects","text":"The diagram shows the internal storage structures of onos-config (in orange). The Configuration object represents the complete configuration for a particular version of a device. Network changes can be applied across multiple Configurations (devices), and have the ability to be rolled back (by the name of the Network Change). 3 different extensions have been chosen in the project to make dealing with Network Changes and Configurations through gNMI possible.","title":"Managing configuration objects"},{"location":"onos-config/docs/gnmi_extensions/#use-of-extension-100-network-change-name-in-setrequest-and-setresponse","text":"In onos-config the gNMI extension number 100 has been reserved for the network change name .","title":"Use of Extension 100 (network change name) in SetRequest and SetResponse"},{"location":"onos-config/docs/gnmi_extensions/#setrequest","text":"In the SetRequest extension 100 can be used to define a name for the Network change. If it is not specified then a name is picked automatically. There is an example of setting this extension when using gnmi_cli in gnmi.md (Northbound Set Request via gNMI)","title":"SetRequest"},{"location":"onos-config/docs/gnmi_extensions/#setresponse","text":"In the SetResponse the name of the Network Change will always be given in extension 100 (either the given name or the generated one). There is an example of the return of this extension through gnmi_cli in gnmi.md (Northbound Set Request via gNMI)","title":"SetResponse"},{"location":"onos-config/docs/gnmi_extensions/#use-of-extension-101-device-version-in-setrequest","text":"Extension 101 is used to set the Model version for a Configuration (as part of a Network Change). There may be multiple different configurations for a device based on version number. This extension allows the correct version of the configuration to be chosen. If a version is given where no existing Configuration exists, an error is returned explaining that device type (extension 102 - see below) should also be specified. If no extension 101 (version) is given, and only one Configuration already exists for that device (target), then the change is applied to that Configuration.","title":"Use of Extension 101 (device version) in SetRequest"},{"location":"onos-config/docs/gnmi_extensions/#use-of-extension-102-device-type-in-setrequest","text":"The target in the SetRequest contains the device name, but this is not enough to create a new Configuration if one does not exist - 3 pieces of information are required - the device name, the device type and the version (see diagram above). Extension 102 is used to set the device type . If a Configuration already exists for this device name and version and its device type is different to what's given in extension 101, then an error is returned.","title":"Use of Extension 102 (device type) in SetRequest"},{"location":"onos-config/docs/gnmi_extensions/#use-of-extension-103-list-of-devices-disconnected-in-getresponse-setresponse-subscriberesponse","text":"In onos-config the gNMI extension number 103 has been reserved for the list of devices disconnected . The changes and device configuration is still valid and held by onos-config until the device arrives in the network.","title":"Use of Extension 103 (list of devices disconnected) in GetResponse, SetResponse, SubscribeResponse"},{"location":"onos-config/docs/gnmi_extensions/#getresponse-and-setresponse","text":"In the GetResponse and GetRequest the 103 extension has an attached message containing a comma separated list of devices, e.g device1,device2,device3 signaling which devices in the request are not yet connected to onos-config.","title":"GetResponse and SetResponse"},{"location":"onos-config/docs/gnmi_extensions/#subscriberesponse","text":"In the SubscribeResponse the 103 extension has an attached message containing a single device, e.g device1 signaling that the device in the request is not yet connected to onos-config but a configuration object has been changed. in Subscribe there is one device per response since it's a 1:1 relationship path to update, where the path include one device.","title":"SubscribeResponse"},{"location":"onos-config/docs/ingress/","text":"Ingress for onos-config NOTE This file has to be revisited, please have no expectation of correctness. In the onos-config helm chart you can optionally enable ingress by overriding ingress.enabled . Note that you must have an ingress controller installed/enabled as described above: > helm install \\ -n onos-config \\ --set ingress.enabled = true \\ deployments/helm/onos-config By default, the ingress controller uses the self-signed certificates that ship with the chart to provide end-to-end routing, load balancing, and encryption, making the onos-config services accessible from outside the k8s cluster. The default certificates expect the service to be reached through the config.onosproject.org domain. Thus, to connect to the service through the ingress, you must configure /etc/hosts to point to the load balancer's IP: 192 .168.99.102 config.onosproject.org The IP address of the ingress may differ depending on the environment. In clustered environments, the ingress IP is typically read from the ingress resource: > kubectl get ingress NAME HOSTS ADDRESS PORTS AGE onos-config-onos-config-ingress config.onosproject.org 10 .0.2.15 80 , 443 76m However, since Minikube runs in a VM, the ingress must be reached through the Minikube VM's IP which can be found via the minikube ip command: LBIP = $( minikube ip ) In clustered environments, the ingress IP can be retrieved from the ingress metadata: > kubectl get ingress NAME HOSTS ADDRESS PORTS AGE onos-config-onos-config-ingress config.onosproject.org 10 .0.2.15 80 , 443 76m Once you've located the ingress IP address and configured /etc/hosts , you can connect to the onos-config service via the ingress load balancer: > onos config --address = config.onosproject.org:443 get changes","title":"Ingress for onos-config"},{"location":"onos-config/docs/ingress/#ingress-for-onos-config","text":"NOTE This file has to be revisited, please have no expectation of correctness. In the onos-config helm chart you can optionally enable ingress by overriding ingress.enabled . Note that you must have an ingress controller installed/enabled as described above: > helm install \\ -n onos-config \\ --set ingress.enabled = true \\ deployments/helm/onos-config By default, the ingress controller uses the self-signed certificates that ship with the chart to provide end-to-end routing, load balancing, and encryption, making the onos-config services accessible from outside the k8s cluster. The default certificates expect the service to be reached through the config.onosproject.org domain. Thus, to connect to the service through the ingress, you must configure /etc/hosts to point to the load balancer's IP: 192 .168.99.102 config.onosproject.org The IP address of the ingress may differ depending on the environment. In clustered environments, the ingress IP is typically read from the ingress resource: > kubectl get ingress NAME HOSTS ADDRESS PORTS AGE onos-config-onos-config-ingress config.onosproject.org 10 .0.2.15 80 , 443 76m However, since Minikube runs in a VM, the ingress must be reached through the Minikube VM's IP which can be found via the minikube ip command: LBIP = $( minikube ip ) In clustered environments, the ingress IP can be retrieved from the ingress metadata: > kubectl get ingress NAME HOSTS ADDRESS PORTS AGE onos-config-onos-config-ingress config.onosproject.org 10 .0.2.15 80 , 443 76m Once you've located the ingress IP address and configured /etc/hosts , you can connect to the onos-config service via the ingress load balancer: > onos config --address = config.onosproject.org:443 get changes","title":"Ingress for onos-config"},{"location":"onos-config/docs/license_goland/","text":"GoLand Copyright Profile Setup GoLand IDE can be configured to automatically include the required Apache 2.0 license text in Go source files. Steps to do this are shown below: Open Preferences window Select Editor->Copyright->Copyright Profiles Click the plus icon Name the new profie onos Cut and paste the text from here into the copyright field Click Apply Open Formatting then Go Click check box for Use Custom Formatting Options Click checkbox Use Line Comment Click Apply Once the new copyright profile is created, it needs to be applied to the project: Select Editor->Copyright Choose onos in the Default Project Copyright drop-down list Click OK","title":"GoLand Copyright Profile Setup"},{"location":"onos-config/docs/license_goland/#goland-copyright-profile-setup","text":"GoLand IDE can be configured to automatically include the required Apache 2.0 license text in Go source files. Steps to do this are shown below: Open Preferences window Select Editor->Copyright->Copyright Profiles Click the plus icon Name the new profie onos Cut and paste the text from here into the copyright field Click Apply Open Formatting then Go Click check box for Use Custom Formatting Options Click checkbox Use Line Comment Click Apply Once the new copyright profile is created, it needs to be applied to the project: Select Editor->Copyright Choose onos in the Default Project Copyright drop-down list Click OK","title":"GoLand Copyright Profile Setup"},{"location":"onos-config/docs/modelplugin/","text":"Extending onos-config with Model Plugins onos-config is an extensible configuration management system, that allows the configuration of many different types and versions of devices to be managed concurrently. Information models in YANG format (RFC 6020) can be used to accurately define the configuration and state objects and attributes of a device. In practice a device's object model usually comprises of a number of YANG files including augments and deviations, and must be considered as a combined unit. In onos-config a set of these combined YANG files defining a particular version of a device type is known as a model . Over its lifecycle onos-config will have to deal with many different models as its scope is expanded and as devices go through new release cycles. To allow this models are loadable dynamically as plugins in the form of Linux or Mac shared object libraries (\\*.so) using the YGOT library and are know as Model Plugins . The diagram shows the connection between the Model Plugin and the configuration store - linked by Device Type and Version. Effectively the primary key of the Model Registry is the Model Name and Version, whereas the primary key of the Configuration is the Device Name and Version. Role of the Model Plugin The Model Plugin enables the following functionality in onos-config : Ensures that illegal values are not saved in to the configuration (this covers wrong data type, data values beyond range or not matching a pattern, lists that are not within their cardinality limits) Ensuring that read only values are not allowed to be set Checking the validity of stores on startup Enabling the Operational State cache within onos-config Enabling the retrieval of attributes by type - CONFIG or OPERATIONAL Enabling clients to access the model metadata through the Admin NBI Enabling JSON Payloads in gNMI SetRequests to be interpreted Structure of a Model Plugin A Model Plugin is mainly generated by the generator command from the YGOT project, and a wrapper modelmain.go implementing the ModelPlugin interface. They are compiled together with the go build command using the -buildmode=plugin option. Many examples of Model Plugins are in the modelplugin folder of this project, and an example script ModelGenerator.sh is available for creating new plugins. ModelPlugin Interface The model plugin must implement the ModelPlugin interface. This will allow it to be entered in to the Model Registry. type ModelPlugin interface { ModelData () ( string , string , [] * gnmi . ModelData , string ) UnmarshalConfigValues ( jsonTree [] byte ) ( * ygot . ValidatedGoStruct , error ) Validate ( * ygot . ValidatedGoStruct , ... ygot . ValidationOption ) error Schema () ( map [ string ] * yang . Entry , error ) } Create your own Model Plugin using script Change directory in to onos-config/modelplugins Copy anyone of the .env files to a new file Edit the variables at the top of the file to suit your plugin (see modelmain.go Definitions below for specifics), taking special care that the entries in MODELDATA are in alphabetical order (YANGDATA is derived from the MODELDATA but can be overridden if required) Make sure the required Yang files are present in the ./yang folder and named properly Run the script like > ./ModelGenerator.sh <filename>.env Once the files are created: Change directory back to onos-config Compile the plugin with (replacing the names as appropriate) > GO111MODULE = on CGO_ENABLED = 1 go build -o modelplugin/TestDevice-1.0.0/testdevice.so.1.0.0 -buildmode = plugin -tags = modelplugin ./modelplugin/TestDevice-1.0.0 Edit the Makefile to include the Model Plugin in the build (or alternatively create a new Makefile if you want to keep it in a separate project) Follow the steps in Loading the Model Plugin below for how to load it. YANG files The YANG files to be used with generator.go should be collected together in a folder and named in the style: \\<modulename>@\\<latestrevision>.yang Note The Yang files provided are required not to contain overlapping or clashing namespaces at the same path level. This requirement is necessary during the model compilation in YGOT because this tool offers no support for namespaces in the form of /namespace:path/path2 , e.g. /openconfig-system:system/clock . YGOT compilation of a model containing /openconfig-system:system/clock will result in the path being /system/clock Running the generator command in the form: > go run $GOPATH /src/github.com/openconfig/ygot/generator/generator.go \\ -path yang -output_file = $TYPEVERSION / $TYPEVERSIONPKG /generated.go -package_name = $TYPEVERSIONPKG \\ -generate_fakeroot $YANGLIST will check all nested dependencies are present, and that the output is generated as a single file: generated.go . Where $YANGLIST is a space separated list of YANG file names. See ModelGenerator.sh for an example To visualize and further validate the collection of YANG files, the pyang tool can be used like: > pyang -f tree $YANGLIST Once the generator has run there is no need to persist the YANG files - the generated.go file contains all the information in an object model. modelmain.go definitions Examples of these definitions are given in the *.env files in the modelplugins folder. modeltype This should be a name that defines the type of device, but should not include version. This name will be used later in the Configuration of the device. It should be between 4 and 40 chars and only include alphanumeric characters, dash, underscore and colon. modelversion This should be the version number of the device in Semantic Versioning form. Only numeric characters and '.' character are allowed. modulename This should be the same as the filename given to the Model Plugin when compiled. It comprises the modeltype (converted to lower case), concatenated with '.so.' and the version. e.g. devicesim.so.1.0.0 modeldata The primary YANG files of the device should be listed in the ModelData section of the modelmain.go file. These are the YANG files that define the top level containers and lists. During compilation other YANG files may get pulled in because they define reusable types (but should not be listed in model data). Each entry in modeldata should be in the format of name - the name of the module inside the YANG file version - the value of the latest revision inside the YANG file in the format YYYY-MM-DD organization - the value from the organization field of the YANG file There should be no duplicate entries (of name) in the list and the list should be ordered alphabetically. Loading the Model Plugin The Model Plugin can be loaded at the start up of onos-config by specifying the -modelPlugin argument. -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-1.0.0/testdevice.so.1.0.0 \\ -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-2.0.0/testdevice.so.2.0.0 \\ -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/Devicesim-1.0.0/devicesim.so.1.0.0 \\ -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/Stratum-1.0.0/stratum.so.1.0.0 Alternatively these can be loaded later with the onos cli tool - see cli.md . > onos config add plugin <plugin path and filename> Model Plugins cannot be unloaded once loaded, without restarting onos-config. To see a list of loaded plugins use the command: > onos config get plugins which gives an output like: > onos config get plugins TestDevice: 1 .0.0 from testdevice.so.1.0.0 containing: YANGS: test1 2018 -02-20 Open Networking Foundation TestDevice: 2 .0.0 from testdevice.so.2.0.0 containing: YANGS: test1 2019 -06-10 Open Networking Foundation Devicesim: 1 .0.0 from devicesim.so.1.0.0 containing: YANGS: openconfig-interfaces 2017 -07-14 OpenConfig working group openconfig-openflow 2017 -06-01 OpenConfig working group openconfig-platform 2016 -12-22 OpenConfig working group openconfig-system 2017 -07-06 OpenConfig working group Stratum: 1 .0.0 from stratum.so.1.0.0 containing: YANGS: openconfig-interfaces 2 .4.1 OpenConfig working group openconfig-if-ip 3 .0.0 OpenConfig working group openconfig-lacp 1 .1.1 OpenConfig working group openconfig-platform 0 .12.2 OpenConfig working group openconfig-platform-linecard 0 .1.1 OpenConfig working group openconfig-platform-port 0 .3.2 OpenConfig working group openconfig-platform-transceiver 0 .7.0 OpenConfig working group openconfig-vlan 3 .2.0 OpenConfig working group openconfig-system 0 .7.0 OpenConfig working group openconfig-hercules-platform-linecard 0 .2.0 OpenConfig working group openconfig-hercules-qos 0 .1.0 OpenConfig working group openconfig-hercules-platform 0 .2.0 OpenConfig working group openconfig-hercules-platform-chassis 0 .2.0 OpenConfig working group openconfig-hercules-platform-port 0 .2.0 OpenConfig working group openconfig-hercules 0 .2.0 OpenConfig working group openconfig-hercules-interfaces 0 .2.0 OpenConfig working group openconfig-hercules-platform-node 0 .2.0 OpenConfig working group To see a list of Read-Only and Read-Write paths use the command: > onos config get plugins -v In a distributed installation the ModelPlugin will have to be loaded on all running instances of onos-config. Model Plugins and gNMI Capabilities Capabilities on gNMI Northbound interface The CapabilitiesResponse on the gNMI northound interface is generated dynamically from the modeldata section of all of the loaded Model Plugins. Capabilities comparison on Southbound gNMI interface At runtime when devices are connected to onos-config the response to the Capabilities request are compared with the modeldata for their corresponding ModelPlugin - if there is not an exact match a warning is displayed. OpenConfig Models Some devices that support OpenConfig Models report their capabilities using an OpenConfig versioning scheme e.g. 0.5.0, rather than the YANG revision date in the format 2017-07-06. If the device can correct its capabilities to give the revision then it should to be more consistent with non OpenConfig YANG models. Accessing OpenConfig model of a specific revision requires a number of steps in Github . For instance if a device reports it used openconfig-interfacess.yang 2.0.0 , then to get this file do: Browse to openconfig-interfaces.yang Observe in the list of revision items in the YANG file that the reference 2.0.0 corresponds to a release date of 2017-07-14 Click in the History button In the History page for this file, see that the next commit after this date was on Aug 9, 2017 Click on the related commit message In the list of files modified in that commit click the ... next to the file openconfig-interfacess.yang and choose View File In the page that displays the historical version of the file, click the Raw button In the resulting raw display of the YANG file verify that the latest revision is 2017-07-14 Save the file locally as openconfig-interfaces@2017-07-14.yang All the files in the yang folder were downloaded in this way. They are not strictly needed once generated.go has been created, but are kept here for convenience, saving to have to run the procedure above if a change was needed. If the generator program reports that a dependency was required e.g. openconfig-inet-types.yang then the version of this file with a date equal to or before 2017-07-14 should be downloaded - it is openconfig-inet-types@2017-07-14.yang Readonly paths in OpenConfig models When an item in an Openconfig YANG file has \"config false\" it is effectively a read-only attribute. Usually with OpenConfig read-only objects are interspersed throughout the YANG model. To see a list of Read Only paths use the command: > onos config get plugins -v When the Model Plugin is loaded, setting of an attribute like state/address should give an appropriate error > gnmi_cli -address onos-config:5150 -set \\ -proto \"update: <path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'openflow'> elem: <name: 'controllers'> elem: <name: 'controller' key: <key: 'name' value: 'main'>> elem: <name: 'connections'> elem: <name: 'connection' key: <key: 'aux-id' value: '0'>> elem: <name: 'state'> elem: <name: 'address'>> val: <string_val: '192.0.2.11'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt gives the error: rpc error: code = InvalidArgument desc = update contains a change to a read only path /system/openflow/controllers/controller [ name = main ] /connections/connection [ aux-id = 0 ] /state/address. Rejected","title":"Extending Configuration Subsystem With Model Plugins"},{"location":"onos-config/docs/modelplugin/#extending-onos-config-with-model-plugins","text":"onos-config is an extensible configuration management system, that allows the configuration of many different types and versions of devices to be managed concurrently. Information models in YANG format (RFC 6020) can be used to accurately define the configuration and state objects and attributes of a device. In practice a device's object model usually comprises of a number of YANG files including augments and deviations, and must be considered as a combined unit. In onos-config a set of these combined YANG files defining a particular version of a device type is known as a model . Over its lifecycle onos-config will have to deal with many different models as its scope is expanded and as devices go through new release cycles. To allow this models are loadable dynamically as plugins in the form of Linux or Mac shared object libraries (\\*.so) using the YGOT library and are know as Model Plugins . The diagram shows the connection between the Model Plugin and the configuration store - linked by Device Type and Version. Effectively the primary key of the Model Registry is the Model Name and Version, whereas the primary key of the Configuration is the Device Name and Version.","title":"Extending onos-config with Model Plugins"},{"location":"onos-config/docs/modelplugin/#role-of-the-model-plugin","text":"The Model Plugin enables the following functionality in onos-config : Ensures that illegal values are not saved in to the configuration (this covers wrong data type, data values beyond range or not matching a pattern, lists that are not within their cardinality limits) Ensuring that read only values are not allowed to be set Checking the validity of stores on startup Enabling the Operational State cache within onos-config Enabling the retrieval of attributes by type - CONFIG or OPERATIONAL Enabling clients to access the model metadata through the Admin NBI Enabling JSON Payloads in gNMI SetRequests to be interpreted","title":"Role of the Model Plugin"},{"location":"onos-config/docs/modelplugin/#structure-of-a-model-plugin","text":"A Model Plugin is mainly generated by the generator command from the YGOT project, and a wrapper modelmain.go implementing the ModelPlugin interface. They are compiled together with the go build command using the -buildmode=plugin option. Many examples of Model Plugins are in the modelplugin folder of this project, and an example script ModelGenerator.sh is available for creating new plugins.","title":"Structure of a Model Plugin"},{"location":"onos-config/docs/modelplugin/#modelplugin-interface","text":"The model plugin must implement the ModelPlugin interface. This will allow it to be entered in to the Model Registry. type ModelPlugin interface { ModelData () ( string , string , [] * gnmi . ModelData , string ) UnmarshalConfigValues ( jsonTree [] byte ) ( * ygot . ValidatedGoStruct , error ) Validate ( * ygot . ValidatedGoStruct , ... ygot . ValidationOption ) error Schema () ( map [ string ] * yang . Entry , error ) }","title":"ModelPlugin Interface"},{"location":"onos-config/docs/modelplugin/#create-your-own-model-plugin-using-script","text":"Change directory in to onos-config/modelplugins Copy anyone of the .env files to a new file Edit the variables at the top of the file to suit your plugin (see modelmain.go Definitions below for specifics), taking special care that the entries in MODELDATA are in alphabetical order (YANGDATA is derived from the MODELDATA but can be overridden if required) Make sure the required Yang files are present in the ./yang folder and named properly Run the script like > ./ModelGenerator.sh <filename>.env Once the files are created: Change directory back to onos-config Compile the plugin with (replacing the names as appropriate) > GO111MODULE = on CGO_ENABLED = 1 go build -o modelplugin/TestDevice-1.0.0/testdevice.so.1.0.0 -buildmode = plugin -tags = modelplugin ./modelplugin/TestDevice-1.0.0 Edit the Makefile to include the Model Plugin in the build (or alternatively create a new Makefile if you want to keep it in a separate project) Follow the steps in Loading the Model Plugin below for how to load it.","title":"Create your own Model Plugin using script"},{"location":"onos-config/docs/modelplugin/#yang-files","text":"The YANG files to be used with generator.go should be collected together in a folder and named in the style: \\<modulename>@\\<latestrevision>.yang Note The Yang files provided are required not to contain overlapping or clashing namespaces at the same path level. This requirement is necessary during the model compilation in YGOT because this tool offers no support for namespaces in the form of /namespace:path/path2 , e.g. /openconfig-system:system/clock . YGOT compilation of a model containing /openconfig-system:system/clock will result in the path being /system/clock Running the generator command in the form: > go run $GOPATH /src/github.com/openconfig/ygot/generator/generator.go \\ -path yang -output_file = $TYPEVERSION / $TYPEVERSIONPKG /generated.go -package_name = $TYPEVERSIONPKG \\ -generate_fakeroot $YANGLIST will check all nested dependencies are present, and that the output is generated as a single file: generated.go . Where $YANGLIST is a space separated list of YANG file names. See ModelGenerator.sh for an example To visualize and further validate the collection of YANG files, the pyang tool can be used like: > pyang -f tree $YANGLIST Once the generator has run there is no need to persist the YANG files - the generated.go file contains all the information in an object model.","title":"YANG files"},{"location":"onos-config/docs/modelplugin/#modelmaingo-definitions","text":"Examples of these definitions are given in the *.env files in the modelplugins folder.","title":"modelmain.go definitions"},{"location":"onos-config/docs/modelplugin/#modeltype","text":"This should be a name that defines the type of device, but should not include version. This name will be used later in the Configuration of the device. It should be between 4 and 40 chars and only include alphanumeric characters, dash, underscore and colon.","title":"modeltype"},{"location":"onos-config/docs/modelplugin/#modelversion","text":"This should be the version number of the device in Semantic Versioning form. Only numeric characters and '.' character are allowed.","title":"modelversion"},{"location":"onos-config/docs/modelplugin/#modulename","text":"This should be the same as the filename given to the Model Plugin when compiled. It comprises the modeltype (converted to lower case), concatenated with '.so.' and the version. e.g. devicesim.so.1.0.0","title":"modulename"},{"location":"onos-config/docs/modelplugin/#modeldata","text":"The primary YANG files of the device should be listed in the ModelData section of the modelmain.go file. These are the YANG files that define the top level containers and lists. During compilation other YANG files may get pulled in because they define reusable types (but should not be listed in model data). Each entry in modeldata should be in the format of name - the name of the module inside the YANG file version - the value of the latest revision inside the YANG file in the format YYYY-MM-DD organization - the value from the organization field of the YANG file There should be no duplicate entries (of name) in the list and the list should be ordered alphabetically.","title":"modeldata"},{"location":"onos-config/docs/modelplugin/#loading-the-model-plugin","text":"The Model Plugin can be loaded at the start up of onos-config by specifying the -modelPlugin argument. -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-1.0.0/testdevice.so.1.0.0 \\ -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/TestDevice-2.0.0/testdevice.so.2.0.0 \\ -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/Devicesim-1.0.0/devicesim.so.1.0.0 \\ -modelPlugin = $HOME /go/src/github.com/onosproject/onos-config/modelplugin/Stratum-1.0.0/stratum.so.1.0.0 Alternatively these can be loaded later with the onos cli tool - see cli.md . > onos config add plugin <plugin path and filename> Model Plugins cannot be unloaded once loaded, without restarting onos-config. To see a list of loaded plugins use the command: > onos config get plugins which gives an output like: > onos config get plugins TestDevice: 1 .0.0 from testdevice.so.1.0.0 containing: YANGS: test1 2018 -02-20 Open Networking Foundation TestDevice: 2 .0.0 from testdevice.so.2.0.0 containing: YANGS: test1 2019 -06-10 Open Networking Foundation Devicesim: 1 .0.0 from devicesim.so.1.0.0 containing: YANGS: openconfig-interfaces 2017 -07-14 OpenConfig working group openconfig-openflow 2017 -06-01 OpenConfig working group openconfig-platform 2016 -12-22 OpenConfig working group openconfig-system 2017 -07-06 OpenConfig working group Stratum: 1 .0.0 from stratum.so.1.0.0 containing: YANGS: openconfig-interfaces 2 .4.1 OpenConfig working group openconfig-if-ip 3 .0.0 OpenConfig working group openconfig-lacp 1 .1.1 OpenConfig working group openconfig-platform 0 .12.2 OpenConfig working group openconfig-platform-linecard 0 .1.1 OpenConfig working group openconfig-platform-port 0 .3.2 OpenConfig working group openconfig-platform-transceiver 0 .7.0 OpenConfig working group openconfig-vlan 3 .2.0 OpenConfig working group openconfig-system 0 .7.0 OpenConfig working group openconfig-hercules-platform-linecard 0 .2.0 OpenConfig working group openconfig-hercules-qos 0 .1.0 OpenConfig working group openconfig-hercules-platform 0 .2.0 OpenConfig working group openconfig-hercules-platform-chassis 0 .2.0 OpenConfig working group openconfig-hercules-platform-port 0 .2.0 OpenConfig working group openconfig-hercules 0 .2.0 OpenConfig working group openconfig-hercules-interfaces 0 .2.0 OpenConfig working group openconfig-hercules-platform-node 0 .2.0 OpenConfig working group To see a list of Read-Only and Read-Write paths use the command: > onos config get plugins -v In a distributed installation the ModelPlugin will have to be loaded on all running instances of onos-config.","title":"Loading the Model Plugin"},{"location":"onos-config/docs/modelplugin/#model-plugins-and-gnmi-capabilities","text":"","title":"Model Plugins and gNMI Capabilities"},{"location":"onos-config/docs/modelplugin/#capabilities-on-gnmi-northbound-interface","text":"The CapabilitiesResponse on the gNMI northound interface is generated dynamically from the modeldata section of all of the loaded Model Plugins.","title":"Capabilities on gNMI Northbound interface"},{"location":"onos-config/docs/modelplugin/#capabilities-comparison-on-southbound-gnmi-interface","text":"At runtime when devices are connected to onos-config the response to the Capabilities request are compared with the modeldata for their corresponding ModelPlugin - if there is not an exact match a warning is displayed.","title":"Capabilities comparison on Southbound gNMI interface"},{"location":"onos-config/docs/modelplugin/#openconfig-models","text":"Some devices that support OpenConfig Models report their capabilities using an OpenConfig versioning scheme e.g. 0.5.0, rather than the YANG revision date in the format 2017-07-06. If the device can correct its capabilities to give the revision then it should to be more consistent with non OpenConfig YANG models. Accessing OpenConfig model of a specific revision requires a number of steps in Github . For instance if a device reports it used openconfig-interfacess.yang 2.0.0 , then to get this file do: Browse to openconfig-interfaces.yang Observe in the list of revision items in the YANG file that the reference 2.0.0 corresponds to a release date of 2017-07-14 Click in the History button In the History page for this file, see that the next commit after this date was on Aug 9, 2017 Click on the related commit message In the list of files modified in that commit click the ... next to the file openconfig-interfacess.yang and choose View File In the page that displays the historical version of the file, click the Raw button In the resulting raw display of the YANG file verify that the latest revision is 2017-07-14 Save the file locally as openconfig-interfaces@2017-07-14.yang All the files in the yang folder were downloaded in this way. They are not strictly needed once generated.go has been created, but are kept here for convenience, saving to have to run the procedure above if a change was needed. If the generator program reports that a dependency was required e.g. openconfig-inet-types.yang then the version of this file with a date equal to or before 2017-07-14 should be downloaded - it is openconfig-inet-types@2017-07-14.yang","title":"OpenConfig Models"},{"location":"onos-config/docs/modelplugin/#readonly-paths-in-openconfig-models","text":"When an item in an Openconfig YANG file has \"config false\" it is effectively a read-only attribute. Usually with OpenConfig read-only objects are interspersed throughout the YANG model. To see a list of Read Only paths use the command: > onos config get plugins -v When the Model Plugin is loaded, setting of an attribute like state/address should give an appropriate error > gnmi_cli -address onos-config:5150 -set \\ -proto \"update: <path: <target: 'devicesim-1', elem: <name: 'system'> elem: <name: 'openflow'> elem: <name: 'controllers'> elem: <name: 'controller' key: <key: 'name' value: 'main'>> elem: <name: 'connections'> elem: <name: 'connection' key: <key: 'aux-id' value: '0'>> elem: <name: 'state'> elem: <name: 'address'>> val: <string_val: '192.0.2.11'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key -ca_crt /etc/ssl/certs/onfca.crt gives the error: rpc error: code = InvalidArgument desc = update contains a change to a read only path /system/openflow/controllers/controller [ name = main ] /connections/connection [ aux-id = 0 ] /state/address. Rejected","title":"Readonly paths in OpenConfig models"},{"location":"onos-config/docs/run/","text":"Running onos-config The commands shown below can be run from anywhere on your PC provided that go tools are installed and the GOPATH environment variable is set, e.g. export GOPATH=~/go Run with Helm charts onos-config can run through Helm Charts as defined in the deployment.md page. Running with Helm is Work in Progress Run with onit onos-config can run through the onit tool. You can find more information on how to setup onit in the setup.md page, and how to run onit at run.md Loading Model Plugins The model-plugin for your device can be built and loaded as outlined in the modelplugin.md guide. When running with Docker or Kubernetes these plugins will be built and (optionally) loaded at startup. To check the list of currently loaded plugins use: > onos config get plugins Northbound gNMI service The system provides a full implementation of the gNMI spec as a northbound service. On a deployed cluster the onos-cli pod has a gNMI client that can be used to format and send gNMI messages. To access the CLI use onit onos - cli to get in to the onos-cli pod and then run gnmi_cli from there. Here is an example on how to use gnmi_cli -get to get configuration for a particular device (target) from the system. > gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: 'localhost-1', elem: <name: 'system'> elem:<name:'config'> elem: <name: 'motd-banner'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt \\ -client_key /etc/ssl/certs/client1.key \\ -ca_crt /etc/ssl/certs/onfca.crt Full list of the gNMI northbound endpoints Administrative and Diagnostic Tools The project provides enhanced northbound functionality though administrative and diagnostic tools, which are integrated into the consolidated onos command. For example, to list all network changes submitted through the northbound gNMI interface run: > onos config get net-changes Or, run the following to list all changes submitted through the northbound gNMI as they are tracked by the system broken-up into device specific batches: > onos config get changes You can read more comprehensive documentation of the various administrative and diagnostic commands .","title":"How To Run Configuration Subsystem?"},{"location":"onos-config/docs/run/#running-onos-config","text":"The commands shown below can be run from anywhere on your PC provided that go tools are installed and the GOPATH environment variable is set, e.g. export GOPATH=~/go","title":"Running onos-config"},{"location":"onos-config/docs/run/#run-with-helm-charts","text":"onos-config can run through Helm Charts as defined in the deployment.md page. Running with Helm is Work in Progress","title":"Run with Helm charts"},{"location":"onos-config/docs/run/#run-with-onit","text":"onos-config can run through the onit tool. You can find more information on how to setup onit in the setup.md page, and how to run onit at run.md","title":"Run with onit"},{"location":"onos-config/docs/run/#loading-model-plugins","text":"The model-plugin for your device can be built and loaded as outlined in the modelplugin.md guide. When running with Docker or Kubernetes these plugins will be built and (optionally) loaded at startup. To check the list of currently loaded plugins use: > onos config get plugins","title":"Loading Model Plugins"},{"location":"onos-config/docs/run/#northbound-gnmi-service","text":"The system provides a full implementation of the gNMI spec as a northbound service. On a deployed cluster the onos-cli pod has a gNMI client that can be used to format and send gNMI messages. To access the CLI use onit onos - cli to get in to the onos-cli pod and then run gnmi_cli from there. Here is an example on how to use gnmi_cli -get to get configuration for a particular device (target) from the system. > gnmi_cli -get -address onos-config:5150 \\ -proto \"path: <target: 'localhost-1', elem: <name: 'system'> elem:<name:'config'> elem: <name: 'motd-banner'>>\" \\ -timeout 5s -en PROTO -alsologtostderr \\ -client_crt /etc/ssl/certs/client1.crt \\ -client_key /etc/ssl/certs/client1.key \\ -ca_crt /etc/ssl/certs/onfca.crt Full list of the gNMI northbound endpoints","title":"Northbound gNMI service"},{"location":"onos-config/docs/run/#administrative-and-diagnostic-tools","text":"The project provides enhanced northbound functionality though administrative and diagnostic tools, which are integrated into the consolidated onos command. For example, to list all network changes submitted through the northbound gNMI interface run: > onos config get net-changes Or, run the following to list all changes submitted through the northbound gNMI as they are tracked by the system broken-up into device specific batches: > onos config get changes You can read more comprehensive documentation of the various administrative and diagnostic commands .","title":"Administrative and Diagnostic Tools"},{"location":"onos-config/docs/api/admin/","text":"Protocol Documentation Table of Contents api/admin/admin.proto Chunk CompactChangesRequest CompactChangesResponse GetSnapshotRequest ListModelsRequest ListSnapshotsRequest ModelInfo ReadOnlyPath ReadOnlySubPath ReadWritePath RegisterResponse RollbackRequest RollbackResponse Type ConfigAdminService Scalar Value Types Top api/admin/admin.proto Chunk Chunk is for streaming a model plugin file to the server. There is a built in limit in gRPC of 4MB - plugin is usually around 20MB so break in to chunks of approx 1-2MB. Field Type Label Description so_file string so_file is the name being streamed. content bytes content is the bytes content. CompactChangesRequest CompactChangesRequest requests a compaction of the Network Change and Device Change stores Field Type Label Description retention_period google.protobuf.Duration retention_period is an optional duration of time counting back from the present moment Network changes that were created during this period should not be compacted Any network changes that are older should be compacted If not specified the duration is 0 CompactChangesResponse CompactChangesResponse is a response to the Compact Changes command GetSnapshotRequest GetSnapshotRequest gets the details of a snapshot for a specific device and version. Field Type Label Description device_id string device_id is the ID of a device that has been configured through a NetworkChange. device_version string device version is the semantic version of a device that has been configured through a NetworkChange. ListModelsRequest ListModelsRequest carries data for querying registered model plugins. Field Type Label Description verbose bool verbose option causes all of the ReadWrite and ReadOnly paths to be included. model_name string An optional filter on the name of the model plugins to list. model_version string An optional filter on the version of the model plugins to list ListSnapshotsRequest ListSnapshotsRequest requests a list of snapshots for all devices and versions. ModelInfo ModelInfo is general information about a model plugin. Field Type Label Description name string name is the name given to the model plugin - no spaces and title case. version string version is the semantic version of the Plugin e.g. 1.0.0. model_data gnmi.ModelData repeated model_data is a set of metadata about the YANG files that went in to generating the model plugin. It includes name, version and organization for each YANG file, similar to how they are represented in gNMI Capabilities. module string module is the name of the Model Plugin on the file system - usually ending in .so.<version>. getStateMode uint32 getStateMode is flag that defines how the \"get state\" operation works. 0) means that no retrieval of state is attempted 1) means that the synchronizer will make 2 requests to the device - one for Get with State and another for Get with Operational. 2) means that the synchronizer will do a Get request comprising of each one of the ReadOnlyPaths and their sub paths. If there is a list in any one of these paths it will be sent down as is, expecting the devices implementation of gNMI will be able to expand wildcards. 3) means that the synchronizer will do a Get request comprising of each one of the ReadOnlyPaths and their sub paths. If there is a list in any one of these paths, a separate call will be made first to find all the instances in the list and a Get including these expanded wildcards will be sent down to the device. read_only_path ReadOnlyPath repeated read_only_path is all of the read only paths for the model plugin. read_write_path ReadWritePath repeated read_write_path is all of the read write paths for the model plugin. ReadOnlyPath ReadOnlyPath extracted from the model plugin as the definition of a tree of read only items. In YANG models items are defined as ReadOnly with the config false keyword. This can be applied to single items (leafs) or collections (containers or lists). When this config false is applied to an object every item beneath it will also become readonly - here these are shown as subpaths. The complete read only path then will be a concatenation of both e.g. /cont1a/cont1b-state/list2b/index and the type is defined in the SubPath as UInt8. Field Type Label Description path string path of the topmost config false object e.g. /cont1a/cont1b-state sub_path ReadOnlySubPath repeated ReadOnlySubPath is a set of children of the path including an entry for the type of the topmost object with subpath / An example is /list2b/index ReadOnlySubPath ReadOnlySubPath is an extension to the ReadOnlyPath to define the datatype of the subpath Field Type Label Description sub_path string sub_path is the relative path of a child object e.g. /list2b/index value_type onos.config.change.device.ValueType value_type is the datatype of the read only path ReadWritePath ReadWritePath is extracted from the model plugin as the definition of a writeable attributes. In YANG models items are writable by default unless they are specified as config false or have an item with config false as a parent. Each configurable item has metadata with meanings taken from the YANG specification RFC 6020. Field Type Label Description path string path is the full path to the attribute (leaf or leaf-list) value_type onos.config.change.device.ValueType value_type is the data type of the attribute units string units is the unit of measurement e.g. dB, mV description string description is an explaination of the meaning of the attribute mandatory bool mandatory shows whether the attribute is optional (false) or required (true) default string default is a default value used with optional attributes range string repeated range is definition of the range of values a value is allowed length string repeated length is a defintion of the length restrictions for the attribute RegisterResponse RegisterResponse carries status of model plugin registration. Field Type Label Description name string name is name of the model plugin. version string version is the semantic version of the model plugin. RollbackRequest RollbackRequest carries the name of a network config to rollback. If there are subsequent changes to any of the devices in that config, the rollback will be rejected. Field Type Label Description name string name is an optional name of a Network Change to rollback. If no name is given the last network change will be rolled back. If the name given is not of the last network change and error will be given. comment string On optional comment to leave on the rollback. RollbackResponse RollbackResponse carries the response of the rollback operation Field Type Label Description message string A message showing the result of the rollback. Type Streaming event type Name Number Description NONE 0 NONE indicates this response does not represent a state change ADDED 1 ADDED is an event which occurs when an item is added UPDATED 2 UPDATED is an event which occurs when an item is updated REMOVED 3 REMOVED is an event which occurs when an item is removed ConfigAdminService ConfigAdminService provides means for enhanced interactions with the configuration subsystem. Method Name Request Type Response Type Description UploadRegisterModel Chunk stream RegisterResponse UploadRegisterModel uploads and adds the model plugin to the list of supported models. The file is serialized in to Chunks of less than 4MB so as not to break the gRPC byte array limit ListRegisteredModels ListModelsRequest ModelInfo stream ListRegisteredModels returns a stream of registered models. RollbackNetworkChange RollbackRequest RollbackResponse RollbackNetworkChange rolls back the specified network change (or the latest one). GetSnapshot GetSnapshotRequest .onos.config.snapshot.device.Snapshot GetSnapshot gets a snapshot for a specific device and version ListSnapshots ListSnapshotsRequest .onos.config.snapshot.device.Snapshot stream ListSnapshots gets a list of snapshots across all devices and versions, and streams them back to the caller. The result includes a \"replay\" of existing snapshots and will watch for any subsequent new changes that come later. CompactChanges CompactChangesRequest CompactChangesResponse CompactChanges requests a snapshot of NetworkChange and DeviceChange stores. This will take all of the Network Changes older than the retention period and flatten them down to just one snapshot (replacing any older snapshot). This will act as a baseline for those changes within the retention period and any future changes. DeviceChanges will be snapshotted to correspond to these NetworkChange compactions leaving an individual snapshot perv device and version combination. Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Admin API"},{"location":"onos-config/docs/api/admin/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/admin/#table-of-contents","text":"api/admin/admin.proto Chunk CompactChangesRequest CompactChangesResponse GetSnapshotRequest ListModelsRequest ListSnapshotsRequest ModelInfo ReadOnlyPath ReadOnlySubPath ReadWritePath RegisterResponse RollbackRequest RollbackResponse Type ConfigAdminService Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/admin/#apiadminadminproto","text":"","title":"api/admin/admin.proto"},{"location":"onos-config/docs/api/admin/#chunk","text":"Chunk is for streaming a model plugin file to the server. There is a built in limit in gRPC of 4MB - plugin is usually around 20MB so break in to chunks of approx 1-2MB. Field Type Label Description so_file string so_file is the name being streamed. content bytes content is the bytes content.","title":"Chunk"},{"location":"onos-config/docs/api/admin/#compactchangesrequest","text":"CompactChangesRequest requests a compaction of the Network Change and Device Change stores Field Type Label Description retention_period google.protobuf.Duration retention_period is an optional duration of time counting back from the present moment Network changes that were created during this period should not be compacted Any network changes that are older should be compacted If not specified the duration is 0","title":"CompactChangesRequest"},{"location":"onos-config/docs/api/admin/#compactchangesresponse","text":"CompactChangesResponse is a response to the Compact Changes command","title":"CompactChangesResponse"},{"location":"onos-config/docs/api/admin/#getsnapshotrequest","text":"GetSnapshotRequest gets the details of a snapshot for a specific device and version. Field Type Label Description device_id string device_id is the ID of a device that has been configured through a NetworkChange. device_version string device version is the semantic version of a device that has been configured through a NetworkChange.","title":"GetSnapshotRequest"},{"location":"onos-config/docs/api/admin/#listmodelsrequest","text":"ListModelsRequest carries data for querying registered model plugins. Field Type Label Description verbose bool verbose option causes all of the ReadWrite and ReadOnly paths to be included. model_name string An optional filter on the name of the model plugins to list. model_version string An optional filter on the version of the model plugins to list","title":"ListModelsRequest"},{"location":"onos-config/docs/api/admin/#listsnapshotsrequest","text":"ListSnapshotsRequest requests a list of snapshots for all devices and versions.","title":"ListSnapshotsRequest"},{"location":"onos-config/docs/api/admin/#modelinfo","text":"ModelInfo is general information about a model plugin. Field Type Label Description name string name is the name given to the model plugin - no spaces and title case. version string version is the semantic version of the Plugin e.g. 1.0.0. model_data gnmi.ModelData repeated model_data is a set of metadata about the YANG files that went in to generating the model plugin. It includes name, version and organization for each YANG file, similar to how they are represented in gNMI Capabilities. module string module is the name of the Model Plugin on the file system - usually ending in .so.<version>. getStateMode uint32 getStateMode is flag that defines how the \"get state\" operation works. 0) means that no retrieval of state is attempted 1) means that the synchronizer will make 2 requests to the device - one for Get with State and another for Get with Operational. 2) means that the synchronizer will do a Get request comprising of each one of the ReadOnlyPaths and their sub paths. If there is a list in any one of these paths it will be sent down as is, expecting the devices implementation of gNMI will be able to expand wildcards. 3) means that the synchronizer will do a Get request comprising of each one of the ReadOnlyPaths and their sub paths. If there is a list in any one of these paths, a separate call will be made first to find all the instances in the list and a Get including these expanded wildcards will be sent down to the device. read_only_path ReadOnlyPath repeated read_only_path is all of the read only paths for the model plugin. read_write_path ReadWritePath repeated read_write_path is all of the read write paths for the model plugin.","title":"ModelInfo"},{"location":"onos-config/docs/api/admin/#readonlypath","text":"ReadOnlyPath extracted from the model plugin as the definition of a tree of read only items. In YANG models items are defined as ReadOnly with the config false keyword. This can be applied to single items (leafs) or collections (containers or lists). When this config false is applied to an object every item beneath it will also become readonly - here these are shown as subpaths. The complete read only path then will be a concatenation of both e.g. /cont1a/cont1b-state/list2b/index and the type is defined in the SubPath as UInt8. Field Type Label Description path string path of the topmost config false object e.g. /cont1a/cont1b-state sub_path ReadOnlySubPath repeated ReadOnlySubPath is a set of children of the path including an entry for the type of the topmost object with subpath / An example is /list2b/index","title":"ReadOnlyPath"},{"location":"onos-config/docs/api/admin/#readonlysubpath","text":"ReadOnlySubPath is an extension to the ReadOnlyPath to define the datatype of the subpath Field Type Label Description sub_path string sub_path is the relative path of a child object e.g. /list2b/index value_type onos.config.change.device.ValueType value_type is the datatype of the read only path","title":"ReadOnlySubPath"},{"location":"onos-config/docs/api/admin/#readwritepath","text":"ReadWritePath is extracted from the model plugin as the definition of a writeable attributes. In YANG models items are writable by default unless they are specified as config false or have an item with config false as a parent. Each configurable item has metadata with meanings taken from the YANG specification RFC 6020. Field Type Label Description path string path is the full path to the attribute (leaf or leaf-list) value_type onos.config.change.device.ValueType value_type is the data type of the attribute units string units is the unit of measurement e.g. dB, mV description string description is an explaination of the meaning of the attribute mandatory bool mandatory shows whether the attribute is optional (false) or required (true) default string default is a default value used with optional attributes range string repeated range is definition of the range of values a value is allowed length string repeated length is a defintion of the length restrictions for the attribute","title":"ReadWritePath"},{"location":"onos-config/docs/api/admin/#registerresponse","text":"RegisterResponse carries status of model plugin registration. Field Type Label Description name string name is name of the model plugin. version string version is the semantic version of the model plugin.","title":"RegisterResponse"},{"location":"onos-config/docs/api/admin/#rollbackrequest","text":"RollbackRequest carries the name of a network config to rollback. If there are subsequent changes to any of the devices in that config, the rollback will be rejected. Field Type Label Description name string name is an optional name of a Network Change to rollback. If no name is given the last network change will be rolled back. If the name given is not of the last network change and error will be given. comment string On optional comment to leave on the rollback.","title":"RollbackRequest"},{"location":"onos-config/docs/api/admin/#rollbackresponse","text":"RollbackResponse carries the response of the rollback operation Field Type Label Description message string A message showing the result of the rollback.","title":"RollbackResponse"},{"location":"onos-config/docs/api/admin/#type","text":"Streaming event type Name Number Description NONE 0 NONE indicates this response does not represent a state change ADDED 1 ADDED is an event which occurs when an item is added UPDATED 2 UPDATED is an event which occurs when an item is updated REMOVED 3 REMOVED is an event which occurs when an item is removed","title":"Type"},{"location":"onos-config/docs/api/admin/#configadminservice","text":"ConfigAdminService provides means for enhanced interactions with the configuration subsystem. Method Name Request Type Response Type Description UploadRegisterModel Chunk stream RegisterResponse UploadRegisterModel uploads and adds the model plugin to the list of supported models. The file is serialized in to Chunks of less than 4MB so as not to break the gRPC byte array limit ListRegisteredModels ListModelsRequest ModelInfo stream ListRegisteredModels returns a stream of registered models. RollbackNetworkChange RollbackRequest RollbackResponse RollbackNetworkChange rolls back the specified network change (or the latest one). GetSnapshot GetSnapshotRequest .onos.config.snapshot.device.Snapshot GetSnapshot gets a snapshot for a specific device and version ListSnapshots ListSnapshotsRequest .onos.config.snapshot.device.Snapshot stream ListSnapshots gets a list of snapshots across all devices and versions, and streams them back to the caller. The result includes a \"replay\" of existing snapshots and will watch for any subsequent new changes that come later. CompactChanges CompactChangesRequest CompactChangesResponse CompactChanges requests a snapshot of NetworkChange and DeviceChange stores. This will take all of the Network Changes older than the retention period and flatten them down to just one snapshot (replacing any older snapshot). This will act as a baseline for those changes within the retention period and any future changes. DeviceChanges will be snapshotted to correspond to these NetworkChange compactions leaving an individual snapshot perv device and version combination.","title":"ConfigAdminService"},{"location":"onos-config/docs/api/admin/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-config/docs/api/diags/","text":"Protocol Documentation Table of Contents api/diags/diags.proto ListDeviceChangeRequest ListDeviceChangeResponse ListNetworkChangeRequest ListNetworkChangeResponse OpStateRequest OpStateResponse ChangeService OpStateDiags Scalar Value Types Top api/diags/diags.proto ListDeviceChangeRequest ListDeviceChangeRequest requests a stream of changes and updates to them By default, the request requests a stream of all changes that are present in the topology when the request is received by the service. However, if subscribe is true , the stream will remain open after all changes have been sent and events that occur following the last changes will be streamed to the client until the stream is closed. If \"withoutReplay\" is true then only changes that happen after the call will be returned Field Type Label Description subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all devices have been streamed to the client device_id string option to specify a specific device change - if blank or '*' then select all Can support * (match many chars) or '?' (match one char) as wildcard device_version string device_version is an optional device version withoutReplay bool option to request only changes that happen after the call ListDeviceChangeResponse ListDeviceChangeResponse carries a single network change event Field Type Label Description change onos.config.change.device.DeviceChange change is the device change on which the event occurred ListNetworkChangeRequest ListNetworkChangeRequest requests a stream of changes and updates to them By default, the request requests a stream of all changes that are present in the topology when the request is received by the service. However, if subscribe is true , the stream will remain open after all changes have been sent and events that occur following the last changes will be streamed to the client until the stream is closed. If \"withoutReplay\" is true then only changes that happen after the call will be returned Field Type Label Description subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all devices have been streamed to the client changeid string option to specify a specific network change - if blank or '*' then select all Can support * (match many chars) or '?' (match one char) as wildcard withoutReplay bool option to request only changes that happen after the call ListNetworkChangeResponse ListNetworkChangeResponse carries a single network change event Field Type Label Description change onos.config.change.network.NetworkChange change is the network change on which the event occurred OpStateRequest OpStateRequest is a message for specifying GetOpState query parameters. Field Type Label Description deviceId string The request is always in the context of a Device ID. If the device does not exist or is disconnected an error will be returned. subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all paths for the device have been streamed to the client OpStateResponse Field Type Label Description type onos.config.admin.Type type is the type of the event pathvalue onos.config.change.device.PathValue device is the device on which the event occurred ChangeService Method Name Request Type Response Type Description ListNetworkChanges ListNetworkChangeRequest ListNetworkChangeResponse stream List gets a stream of network change add/update/remove events for network changes matching changeid ListDeviceChanges ListDeviceChangeRequest ListDeviceChangeResponse stream List gets a stream of device change add/update/remove events for device changes matching changeid OpStateDiags OpStateDiags provides means for obtaining diagnostic information about internal system state. Method Name Request Type Response Type Description GetOpState OpStateRequest OpStateResponse stream GetOpState returns a stream of submitted OperationalStateCache aimed at individual devices. If subscribe is true keep on streaming after the initial set are finished Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Diagnostic API"},{"location":"onos-config/docs/api/diags/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/diags/#table-of-contents","text":"api/diags/diags.proto ListDeviceChangeRequest ListDeviceChangeResponse ListNetworkChangeRequest ListNetworkChangeResponse OpStateRequest OpStateResponse ChangeService OpStateDiags Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/diags/#apidiagsdiagsproto","text":"","title":"api/diags/diags.proto"},{"location":"onos-config/docs/api/diags/#listdevicechangerequest","text":"ListDeviceChangeRequest requests a stream of changes and updates to them By default, the request requests a stream of all changes that are present in the topology when the request is received by the service. However, if subscribe is true , the stream will remain open after all changes have been sent and events that occur following the last changes will be streamed to the client until the stream is closed. If \"withoutReplay\" is true then only changes that happen after the call will be returned Field Type Label Description subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all devices have been streamed to the client device_id string option to specify a specific device change - if blank or '*' then select all Can support * (match many chars) or '?' (match one char) as wildcard device_version string device_version is an optional device version withoutReplay bool option to request only changes that happen after the call","title":"ListDeviceChangeRequest"},{"location":"onos-config/docs/api/diags/#listdevicechangeresponse","text":"ListDeviceChangeResponse carries a single network change event Field Type Label Description change onos.config.change.device.DeviceChange change is the device change on which the event occurred","title":"ListDeviceChangeResponse"},{"location":"onos-config/docs/api/diags/#listnetworkchangerequest","text":"ListNetworkChangeRequest requests a stream of changes and updates to them By default, the request requests a stream of all changes that are present in the topology when the request is received by the service. However, if subscribe is true , the stream will remain open after all changes have been sent and events that occur following the last changes will be streamed to the client until the stream is closed. If \"withoutReplay\" is true then only changes that happen after the call will be returned Field Type Label Description subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all devices have been streamed to the client changeid string option to specify a specific network change - if blank or '*' then select all Can support * (match many chars) or '?' (match one char) as wildcard withoutReplay bool option to request only changes that happen after the call","title":"ListNetworkChangeRequest"},{"location":"onos-config/docs/api/diags/#listnetworkchangeresponse","text":"ListNetworkChangeResponse carries a single network change event Field Type Label Description change onos.config.change.network.NetworkChange change is the network change on which the event occurred","title":"ListNetworkChangeResponse"},{"location":"onos-config/docs/api/diags/#opstaterequest","text":"OpStateRequest is a message for specifying GetOpState query parameters. Field Type Label Description deviceId string The request is always in the context of a Device ID. If the device does not exist or is disconnected an error will be returned. subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all paths for the device have been streamed to the client","title":"OpStateRequest"},{"location":"onos-config/docs/api/diags/#opstateresponse","text":"Field Type Label Description type onos.config.admin.Type type is the type of the event pathvalue onos.config.change.device.PathValue device is the device on which the event occurred","title":"OpStateResponse"},{"location":"onos-config/docs/api/diags/#changeservice","text":"Method Name Request Type Response Type Description ListNetworkChanges ListNetworkChangeRequest ListNetworkChangeResponse stream List gets a stream of network change add/update/remove events for network changes matching changeid ListDeviceChanges ListDeviceChangeRequest ListDeviceChangeResponse stream List gets a stream of device change add/update/remove events for device changes matching changeid","title":"ChangeService"},{"location":"onos-config/docs/api/diags/#opstatediags","text":"OpStateDiags provides means for obtaining diagnostic information about internal system state. Method Name Request Type Response Type Description GetOpState OpStateRequest OpStateResponse stream GetOpState returns a stream of submitted OperationalStateCache aimed at individual devices. If subscribe is true keep on streaming after the initial set are finished","title":"OpStateDiags"},{"location":"onos-config/docs/api/diags/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-config/docs/api/types_change/","text":"Protocol Documentation Table of Contents api/types/change/types.proto Status Phase Reason State Scalar Value Types Top api/types/change/types.proto Status Status is the status of a NetworkChange Field Type Label Description phase Phase 'phase' is the current phase of the NetworkChange state State 'state' is the state of the change within a Phase reason Reason 'reason' is a failure reason message string message is a result message Phase Phase is the phase of a NetworkChange Name Number Description CHANGE 0 CHANGE indicates the change has been requested ROLLBACK 1 ROLLBACK indicates a rollback has been requested for the change Reason Reason is a reason for a FAILED state Name Number Description NONE 0 NONE indicates no error has occurred ERROR 1 ERROR indicates an error occurred when applying the change State State is the state of a phase Name Number Description PENDING 0 PENDING indicates the phase is pending RUNNING 1 RUNNING indicates the phase is in progress COMPLETE 2 COMPLETE indicates the phase is complete FAILED 3 FAILED indicates the phase failed Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Common Change Types"},{"location":"onos-config/docs/api/types_change/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/types_change/#table-of-contents","text":"api/types/change/types.proto Status Phase Reason State Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/types_change/#apitypeschangetypesproto","text":"","title":"api/types/change/types.proto"},{"location":"onos-config/docs/api/types_change/#status","text":"Status is the status of a NetworkChange Field Type Label Description phase Phase 'phase' is the current phase of the NetworkChange state State 'state' is the state of the change within a Phase reason Reason 'reason' is a failure reason message string message is a result message","title":"Status"},{"location":"onos-config/docs/api/types_change/#phase","text":"Phase is the phase of a NetworkChange Name Number Description CHANGE 0 CHANGE indicates the change has been requested ROLLBACK 1 ROLLBACK indicates a rollback has been requested for the change","title":"Phase"},{"location":"onos-config/docs/api/types_change/#reason","text":"Reason is a reason for a FAILED state Name Number Description NONE 0 NONE indicates no error has occurred ERROR 1 ERROR indicates an error occurred when applying the change","title":"Reason"},{"location":"onos-config/docs/api/types_change/#state","text":"State is the state of a phase Name Number Description PENDING 0 PENDING indicates the phase is pending RUNNING 1 RUNNING indicates the phase is in progress COMPLETE 2 COMPLETE indicates the phase is complete FAILED 3 FAILED indicates the phase failed","title":"State"},{"location":"onos-config/docs/api/types_change/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-config/docs/api/types_change_device/","text":"Protocol Documentation Table of Contents api/types/change/device/types.proto Change ChangeValue DeviceChange NetworkChangeRef PathValue TypedValue ValueType Scalar Value Types Top api/types/change/device/types.proto Change Change represents a configuration change to a single device Field Type Label Description device_id string 'device_id' is the identifier of the device to which this change applies device_version string 'device_version' is an optional device version to which to apply this change device_type string 'device_type' is an optional device type to which to apply this change values ChangeValue repeated 'values' is a set of change values to apply ChangeValue ChangeValue is an individual Path/Value and removed flag combination in a Change Field Type Label Description path string 'path' is the path to change value TypedValue 'value' is the change value removed bool 'removed' indicates whether this is a delete DeviceChange DeviceChange is a stored configuration change for a single device Field Type Label Description id string 'id' is the unique identifier of the change index uint64 'index' is a monotonically increasing, globally unique index of the change The index is provided by the store, is static and unique for each unique change identifier, and should not be modified by client code. revision uint64 'revision' is the change revision number The revision number is provided by the store and should not be modified by client code. Each unique state of the change will be assigned a unique revision number which can be used for optimistic concurrency control when updating or deleting the change state. network_change NetworkChangeRef 'network_change' is a reference to the NetworkChange that created this change change Change 'change' is the change object status onos.config.change.Status 'status' is the lifecycle status of the change created google.protobuf.Timestamp 'created' is the time at which the change was created updated google.protobuf.Timestamp 'updated' is the time at which the change was last updated NetworkChangeRef NetworkChangeRef is a back reference to the NetworkChange that created a DeviceChange Field Type Label Description id string 'id' is the identifier of the network change from which this change was created index uint64 'index' is the index of the network change from which this change was created PathValue PathValue is an individual Path/Value combination - it is like ChangeValue above without the removed flag - it is not used in the DeviceChange store Instead it is useful for handling OpState and Snapshots where removed is not relevant Field Type Label Description path string 'path' is the path to change value TypedValue 'value' is the change value TypedValue TypedValue is a value represented as a byte array Field Type Label Description bytes bytes 'bytes' is the bytes array type ValueType 'type' is the value type type_opts int32 repeated 'type_opts' is a set of type options ValueType ValueType is the type for a value Name Number Description EMPTY 0 STRING 1 INT 2 UINT 3 BOOL 4 DECIMAL 5 FLOAT 6 BYTES 7 LEAFLIST_STRING 8 LEAFLIST_INT 9 LEAFLIST_UINT 10 LEAFLIST_BOOL 11 LEAFLIST_DECIMAL 12 LEAFLIST_FLOAT 13 LEAFLIST_BYTES 14 Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Device Change Types"},{"location":"onos-config/docs/api/types_change_device/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/types_change_device/#table-of-contents","text":"api/types/change/device/types.proto Change ChangeValue DeviceChange NetworkChangeRef PathValue TypedValue ValueType Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/types_change_device/#apitypeschangedevicetypesproto","text":"","title":"api/types/change/device/types.proto"},{"location":"onos-config/docs/api/types_change_device/#change","text":"Change represents a configuration change to a single device Field Type Label Description device_id string 'device_id' is the identifier of the device to which this change applies device_version string 'device_version' is an optional device version to which to apply this change device_type string 'device_type' is an optional device type to which to apply this change values ChangeValue repeated 'values' is a set of change values to apply","title":"Change"},{"location":"onos-config/docs/api/types_change_device/#changevalue","text":"ChangeValue is an individual Path/Value and removed flag combination in a Change Field Type Label Description path string 'path' is the path to change value TypedValue 'value' is the change value removed bool 'removed' indicates whether this is a delete","title":"ChangeValue"},{"location":"onos-config/docs/api/types_change_device/#devicechange","text":"DeviceChange is a stored configuration change for a single device Field Type Label Description id string 'id' is the unique identifier of the change index uint64 'index' is a monotonically increasing, globally unique index of the change The index is provided by the store, is static and unique for each unique change identifier, and should not be modified by client code. revision uint64 'revision' is the change revision number The revision number is provided by the store and should not be modified by client code. Each unique state of the change will be assigned a unique revision number which can be used for optimistic concurrency control when updating or deleting the change state. network_change NetworkChangeRef 'network_change' is a reference to the NetworkChange that created this change change Change 'change' is the change object status onos.config.change.Status 'status' is the lifecycle status of the change created google.protobuf.Timestamp 'created' is the time at which the change was created updated google.protobuf.Timestamp 'updated' is the time at which the change was last updated","title":"DeviceChange"},{"location":"onos-config/docs/api/types_change_device/#networkchangeref","text":"NetworkChangeRef is a back reference to the NetworkChange that created a DeviceChange Field Type Label Description id string 'id' is the identifier of the network change from which this change was created index uint64 'index' is the index of the network change from which this change was created","title":"NetworkChangeRef"},{"location":"onos-config/docs/api/types_change_device/#pathvalue","text":"PathValue is an individual Path/Value combination - it is like ChangeValue above without the removed flag - it is not used in the DeviceChange store Instead it is useful for handling OpState and Snapshots where removed is not relevant Field Type Label Description path string 'path' is the path to change value TypedValue 'value' is the change value","title":"PathValue"},{"location":"onos-config/docs/api/types_change_device/#typedvalue","text":"TypedValue is a value represented as a byte array Field Type Label Description bytes bytes 'bytes' is the bytes array type ValueType 'type' is the value type type_opts int32 repeated 'type_opts' is a set of type options","title":"TypedValue"},{"location":"onos-config/docs/api/types_change_device/#valuetype","text":"ValueType is the type for a value Name Number Description EMPTY 0 STRING 1 INT 2 UINT 3 BOOL 4 DECIMAL 5 FLOAT 6 BYTES 7 LEAFLIST_STRING 8 LEAFLIST_INT 9 LEAFLIST_UINT 10 LEAFLIST_BOOL 11 LEAFLIST_DECIMAL 12 LEAFLIST_FLOAT 13 LEAFLIST_BYTES 14","title":"ValueType"},{"location":"onos-config/docs/api/types_change_device/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-config/docs/api/types_change_network/","text":"Protocol Documentation Table of Contents api/types/change/network/types.proto DeviceChangeRef NetworkChange Scalar Value Types Top api/types/change/network/types.proto DeviceChangeRef DeviceChangeRef is a reference to a device change Field Type Label Description device_change_id string 'device_change_id' is the unique identifier of the device change NetworkChange NetworkChange specifies the configuration for a network change A network change is a configuration change that spans multiple devices. The change contains a list of per-device changes to be applied to the network. Field Type Label Description id string 'id' is the unique identifier of the change This field should be set prior to persisting the object. index uint64 'index' is a monotonically increasing, globally unique index of the change The index is provided by the store, is static and unique for each unique change identifier, and should not be modified by client code. revision uint64 'revision' is the change revision number The revision number is provided by the store and should not be modified by client code. Each unique state of the change will be assigned a unique revision number which can be used for optimistic concurrency control when updating or deleting the change state. status onos.config.change.Status 'status' is the current lifecycle status of the change created google.protobuf.Timestamp 'created' is the time at which the change was created updated google.protobuf.Timestamp 'updated' is the time at which the change was last updated changes onos.config.change.device.Change repeated 'changes' is a set of changes to apply to devices The list of changes should contain only a single change per device/version pair. refs DeviceChangeRef repeated 'refs' is a set of references to stored device changes deleted bool 'deleted' is a flag indicating whether this change is being deleted by a snapshot Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Network Change Types"},{"location":"onos-config/docs/api/types_change_network/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/types_change_network/#table-of-contents","text":"api/types/change/network/types.proto DeviceChangeRef NetworkChange Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/types_change_network/#apitypeschangenetworktypesproto","text":"","title":"api/types/change/network/types.proto"},{"location":"onos-config/docs/api/types_change_network/#devicechangeref","text":"DeviceChangeRef is a reference to a device change Field Type Label Description device_change_id string 'device_change_id' is the unique identifier of the device change","title":"DeviceChangeRef"},{"location":"onos-config/docs/api/types_change_network/#networkchange","text":"NetworkChange specifies the configuration for a network change A network change is a configuration change that spans multiple devices. The change contains a list of per-device changes to be applied to the network. Field Type Label Description id string 'id' is the unique identifier of the change This field should be set prior to persisting the object. index uint64 'index' is a monotonically increasing, globally unique index of the change The index is provided by the store, is static and unique for each unique change identifier, and should not be modified by client code. revision uint64 'revision' is the change revision number The revision number is provided by the store and should not be modified by client code. Each unique state of the change will be assigned a unique revision number which can be used for optimistic concurrency control when updating or deleting the change state. status onos.config.change.Status 'status' is the current lifecycle status of the change created google.protobuf.Timestamp 'created' is the time at which the change was created updated google.protobuf.Timestamp 'updated' is the time at which the change was last updated changes onos.config.change.device.Change repeated 'changes' is a set of changes to apply to devices The list of changes should contain only a single change per device/version pair. refs DeviceChangeRef repeated 'refs' is a set of references to stored device changes deleted bool 'deleted' is a flag indicating whether this change is being deleted by a snapshot","title":"NetworkChange"},{"location":"onos-config/docs/api/types_change_network/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-config/docs/api/types_snapshot/","text":"Protocol Documentation Table of Contents api/types/snapshot/types.proto RetentionOptions Status Phase State Scalar Value Types Top api/types/snapshot/types.proto RetentionOptions RetentionOptions specifies the retention policy for a change log Field Type Label Description retain_window google.protobuf.Duration 'retain_window' is the duration for which to retain network changes Status Status is the status of a snapshot Field Type Label Description phase Phase 'phase' is the snapshot phase state State 'state' is the state of a snapshot Phase Phase is a snapshot phase Name Number Description MARK 0 MARK is the first phase in which changes are marked for deletion DELETE 1 DELETE is the second phase in which changes are deleted from stores State State is the state of a snapshot within a phase Name Number Description PENDING 0 PENDING indicates the snapshot is pending RUNNING 1 RUNNING indicates the snapshot is in progress COMPLETE 2 COMPLETE indicates the snapshot is complete Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Common Snapshot Types"},{"location":"onos-config/docs/api/types_snapshot/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/types_snapshot/#table-of-contents","text":"api/types/snapshot/types.proto RetentionOptions Status Phase State Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/types_snapshot/#apitypessnapshottypesproto","text":"","title":"api/types/snapshot/types.proto"},{"location":"onos-config/docs/api/types_snapshot/#retentionoptions","text":"RetentionOptions specifies the retention policy for a change log Field Type Label Description retain_window google.protobuf.Duration 'retain_window' is the duration for which to retain network changes","title":"RetentionOptions"},{"location":"onos-config/docs/api/types_snapshot/#status","text":"Status is the status of a snapshot Field Type Label Description phase Phase 'phase' is the snapshot phase state State 'state' is the state of a snapshot","title":"Status"},{"location":"onos-config/docs/api/types_snapshot/#phase","text":"Phase is a snapshot phase Name Number Description MARK 0 MARK is the first phase in which changes are marked for deletion DELETE 1 DELETE is the second phase in which changes are deleted from stores","title":"Phase"},{"location":"onos-config/docs/api/types_snapshot/#state","text":"State is the state of a snapshot within a phase Name Number Description PENDING 0 PENDING indicates the snapshot is pending RUNNING 1 RUNNING indicates the snapshot is in progress COMPLETE 2 COMPLETE indicates the snapshot is complete","title":"State"},{"location":"onos-config/docs/api/types_snapshot/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-config/docs/api/types_snapshot_device/","text":"Protocol Documentation Table of Contents api/types/snapshot/device/types.proto DeviceSnapshot NetworkSnapshotRef Snapshot Scalar Value Types Top api/types/snapshot/device/types.proto DeviceSnapshot DeviceSnapshot is a device snapshot Field Type Label Description id string 'id' is the unique snapshot identifier device_id string 'device_id' is the device to which the snapshot applies device_version string 'device_version' is the version to which the snapshot applies revision uint64 'revision' is the request revision number network_snapshot NetworkSnapshotRef 'network_snapshot' is a reference to the network snapshot from which this snapshot was created max_network_change_index uint64 'max_network_change_index' is the maximum network change index to be snapshotted for the device status onos.config.snapshot.Status 'status' is the snapshot status created google.protobuf.Timestamp 'created' is the time at which the configuration was created updated google.protobuf.Timestamp 'updated' is the time at which the configuration was last updated NetworkSnapshotRef NetworkSnapshotRef is a back reference to the NetworkSnapshot that created a DeviceSnapshot Field Type Label Description id string 'id' is the identifier of the network snapshot from which this snapshot was created index uint64 'index' is the index of the network snapshot from which this snapshot was created Snapshot Snapshot is a snapshot of the state of a single device Field Type Label Description id string 'id' is a unique snapshot identifier device_id string 'device_id' is the device to which the snapshot applies device_version string 'device_version' is the version to which the snapshot applies snapshot_id string 'snapshot_id' is the ID of the snapshot change_index uint64 'change_index' is the change index at which the snapshot ended values onos.config.change.device.PathValue repeated 'values' is a list of values to set Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Device Snapshot Types"},{"location":"onos-config/docs/api/types_snapshot_device/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/types_snapshot_device/#table-of-contents","text":"api/types/snapshot/device/types.proto DeviceSnapshot NetworkSnapshotRef Snapshot Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/types_snapshot_device/#apitypessnapshotdevicetypesproto","text":"","title":"api/types/snapshot/device/types.proto"},{"location":"onos-config/docs/api/types_snapshot_device/#devicesnapshot","text":"DeviceSnapshot is a device snapshot Field Type Label Description id string 'id' is the unique snapshot identifier device_id string 'device_id' is the device to which the snapshot applies device_version string 'device_version' is the version to which the snapshot applies revision uint64 'revision' is the request revision number network_snapshot NetworkSnapshotRef 'network_snapshot' is a reference to the network snapshot from which this snapshot was created max_network_change_index uint64 'max_network_change_index' is the maximum network change index to be snapshotted for the device status onos.config.snapshot.Status 'status' is the snapshot status created google.protobuf.Timestamp 'created' is the time at which the configuration was created updated google.protobuf.Timestamp 'updated' is the time at which the configuration was last updated","title":"DeviceSnapshot"},{"location":"onos-config/docs/api/types_snapshot_device/#networksnapshotref","text":"NetworkSnapshotRef is a back reference to the NetworkSnapshot that created a DeviceSnapshot Field Type Label Description id string 'id' is the identifier of the network snapshot from which this snapshot was created index uint64 'index' is the index of the network snapshot from which this snapshot was created","title":"NetworkSnapshotRef"},{"location":"onos-config/docs/api/types_snapshot_device/#snapshot","text":"Snapshot is a snapshot of the state of a single device Field Type Label Description id string 'id' is a unique snapshot identifier device_id string 'device_id' is the device to which the snapshot applies device_version string 'device_version' is the version to which the snapshot applies snapshot_id string 'snapshot_id' is the ID of the snapshot change_index uint64 'change_index' is the change index at which the snapshot ended values onos.config.change.device.PathValue repeated 'values' is a list of values to set","title":"Snapshot"},{"location":"onos-config/docs/api/types_snapshot_device/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-config/docs/api/types_snapshot_network/","text":"Protocol Documentation Table of Contents api/types/snapshot/network/types.proto DeviceSnapshotRef NetworkSnapshot Scalar Value Types Top api/types/snapshot/network/types.proto DeviceSnapshotRef DeviceSnapshotRef is a reference to a device snapshot Field Type Label Description device_snapshot_id string 'device_snapshot_id' is the unique identifier of the device snapshot NetworkSnapshot NetworkSnapshot is a snapshot of all network changes Field Type Label Description id string 'id' is the unique snapshot identifier index uint64 'index' is a monotonically increasing, globally unique snapshot index revision uint64 'revision' is the request revision number status onos.config.snapshot.Status 'status' is the snapshot status retention onos.config.snapshot.RetentionOptions 'retention' specifies the duration for which to retain changes created google.protobuf.Timestamp 'created' is the time at which the configuration was created updated google.protobuf.Timestamp 'updated' is the time at which the configuration was last updated refs DeviceSnapshotRef repeated 'refs' is a set of references to stored device snapshots Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Network Snapshot Types"},{"location":"onos-config/docs/api/types_snapshot_network/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-config/docs/api/types_snapshot_network/#table-of-contents","text":"api/types/snapshot/network/types.proto DeviceSnapshotRef NetworkSnapshot Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-config/docs/api/types_snapshot_network/#apitypessnapshotnetworktypesproto","text":"","title":"api/types/snapshot/network/types.proto"},{"location":"onos-config/docs/api/types_snapshot_network/#devicesnapshotref","text":"DeviceSnapshotRef is a reference to a device snapshot Field Type Label Description device_snapshot_id string 'device_snapshot_id' is the unique identifier of the device snapshot","title":"DeviceSnapshotRef"},{"location":"onos-config/docs/api/types_snapshot_network/#networksnapshot","text":"NetworkSnapshot is a snapshot of all network changes Field Type Label Description id string 'id' is the unique snapshot identifier index uint64 'index' is a monotonically increasing, globally unique snapshot index revision uint64 'revision' is the request revision number status onos.config.snapshot.Status 'status' is the snapshot status retention onos.config.snapshot.RetentionOptions 'retention' specifies the duration for which to retain changes created google.protobuf.Timestamp 'created' is the time at which the configuration was created updated google.protobuf.Timestamp 'updated' is the time at which the configuration was last updated refs DeviceSnapshotRef repeated 'refs' is a set of references to stored device snapshots","title":"NetworkSnapshot"},{"location":"onos-config/docs/api/types_snapshot_network/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-gui/docs/","text":"onos-gui project GUI for ONOS (\u00b5ONOS Architecture). onos-gui is the GUI application for all of the GUI functionality of \u00b5ONOS. It will provide GUI interfaces for all of the core projects such as onos-config onos-topo onos-control In the first iteration (Sep '19) the Configuration GUI is the main target, but generally the architecture will support UI extensions for any project, as libraries. Architecture See architecture.md for an architectural discussion. Running the GUI prerequisites.md has instructions on how to install the necessary tools. run.md has instructions how to run the GUI.","title":"ONOS-GUI Subsystem"},{"location":"onos-gui/docs/#onos-gui-project","text":"GUI for ONOS (\u00b5ONOS Architecture). onos-gui is the GUI application for all of the GUI functionality of \u00b5ONOS. It will provide GUI interfaces for all of the core projects such as onos-config onos-topo onos-control In the first iteration (Sep '19) the Configuration GUI is the main target, but generally the architecture will support UI extensions for any project, as libraries.","title":"onos-gui project"},{"location":"onos-gui/docs/#architecture","text":"See architecture.md for an architectural discussion.","title":"Architecture"},{"location":"onos-gui/docs/#running-the-gui","text":"prerequisites.md has instructions on how to install the necessary tools. run.md has instructions how to run the GUI.","title":"Running the GUI"},{"location":"onos-gui/docs/architecture/","text":"onos-gui Architecture The GUI is architected as a Cloud Native application to be run on Kubernetes accessing the back end modules through gRPC (and in the case of the Config GUI mostly through gNMI). The main front end technology is Angular and is supplemented by gRPC Web to access the back through a gRPC proxy. Nginx acts as a web server and web Proxy, while Envoy proxy server acts as a grpc-web proxy and all are deployed on Docker or Kubernetes . While 2 proxies seem to be an overhead, it is unavoidable at present because: nginx cannot do the grpc-web proxying (while there was a module written for nginx in the grpc-web project, this does not work with anything beyond nginx v1.14.2) Envoy cannot load static web pages, and so nginx is required to perform this role Alternatives to grpc-web There are some alternatives to using grpc-web to allow web browsers to access gRPC directly, but grpc-web is the recommended solution as per the gRPC website . See also this article on hacker noon .","title":"GUI Architecture"},{"location":"onos-gui/docs/architecture/#onos-gui-architecture","text":"The GUI is architected as a Cloud Native application to be run on Kubernetes accessing the back end modules through gRPC (and in the case of the Config GUI mostly through gNMI). The main front end technology is Angular and is supplemented by gRPC Web to access the back through a gRPC proxy. Nginx acts as a web server and web Proxy, while Envoy proxy server acts as a grpc-web proxy and all are deployed on Docker or Kubernetes . While 2 proxies seem to be an overhead, it is unavoidable at present because: nginx cannot do the grpc-web proxying (while there was a module written for nginx in the grpc-web project, this does not work with anything beyond nginx v1.14.2) Envoy cannot load static web pages, and so nginx is required to perform this role","title":"onos-gui Architecture"},{"location":"onos-gui/docs/architecture/#alternatives-to-grpc-web","text":"There are some alternatives to using grpc-web to allow web browsers to access gRPC directly, but grpc-web is the recommended solution as per the gRPC website . See also this article on hacker noon .","title":"Alternatives to grpc-web"},{"location":"onos-gui/docs/config-gui/","text":"Configuration GUI The configuration GUI allows configuration changes to be made in to onos-config. It comprises of: Network changes view is a tabular layout that shows network changes. A corresponding Details view shows individual details Rollback of the last Network change Creation of a new Network change (temporarily referred to as pending ) Deletion of the pending Network Change Commit of the pending Network Change Configurations view is a tabular layout that lists all the set of configurations on the system Selecting individual configuration will change to the Config View graphical layout. Config view is a graphical layout that shows the entire configuration of the device in a tree view. It contains a panel that lists all of the config changes that have happened to the device. Each of these can be hidden or displayed (like a layer) that can be used to see the history of config changes. An additional layer shows the Operational State (from the OpState cache) when connected to a real device Another layer shows all of the configurable (Read Write) paths possible for the device. Within the graphical view clicking on a node allows the value to be edited (as long as a pending network change has been created) Zoom and Pan functions are also available within the graphical view Model View is a tabular layout that shows the list of Model Plugins loaded in the system. A details view shows the list of YANG models for that Model Plugin.","title":"Configuration GUI"},{"location":"onos-gui/docs/config-gui/#configuration-gui","text":"The configuration GUI allows configuration changes to be made in to onos-config. It comprises of: Network changes view is a tabular layout that shows network changes. A corresponding Details view shows individual details Rollback of the last Network change Creation of a new Network change (temporarily referred to as pending ) Deletion of the pending Network Change Commit of the pending Network Change Configurations view is a tabular layout that lists all the set of configurations on the system Selecting individual configuration will change to the Config View graphical layout. Config view is a graphical layout that shows the entire configuration of the device in a tree view. It contains a panel that lists all of the config changes that have happened to the device. Each of these can be hidden or displayed (like a layer) that can be used to see the history of config changes. An additional layer shows the Operational State (from the OpState cache) when connected to a real device Another layer shows all of the configurable (Read Write) paths possible for the device. Within the graphical view clicking on a node allows the value to be edited (as long as a pending network change has been created) Zoom and Pan functions are also available within the graphical view Model View is a tabular layout that shows the list of Model Plugins loaded in the system. A details view shows the list of YANG models for that Model Plugin.","title":"Configuration GUI"},{"location":"onos-gui/docs/prerequisites/","text":"GUI Development Prerequisites This document provides an overview of the tools and packages needed to work on and to build onos-gui. Developers are expected to have these tools installed on the machine where the project is built. NodeJS Install the latest Long Term Support version of NodeJS on your system. Downloads are available from https://nodejs.org/en/download/ Instructions for installing on Linux are at https://github.com/nodejs/help/wiki/Installation After installing it should be possible to see the version of node and npm (which is bundled with it) that you installed with: node -v npm -v Angular CLI Angular CLI provides the ng tools. Installation instructions are at https://angular.io/guide/setup-local The following command can be run from any folder: npm install -g @angular/cli Checkout the onos-gui code from Git Using a process described contributing.md the Git repo should be forked in your own name on github.com/onosproject/onos-gui . git clone https://github.com/ $GIT_USER /onos-gui.git # or: git clone git@github.com: $GIT_USER /onos-gui.git cd $ONOS_ROOT /onos-gui git remote add upstream https://github.com/onosproject/onos-gui.git # or: git remote add upstream git@github.com:onosproject/onos-gui.git # Never push to upstream master git remote set-url --push upstream no_push # Confirm that your remotes make sense: git remote -v Set up Angular for local development After this install (and after changing to the web/onos-gui folder) it should be possible to see the Angular CLI version: cd web/onos-gui ng version This should give a result like: Your global Angular CLI version ( 8 .1.2 ) is greater than your local version ( 7 .0.7 ) . The local Angular CLI version is used. To disable this warning use \"ng config -g cli.warnings.versionMismatch false\" . _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 7 .0.7 Node: 12 .6.0 OS: linux x64 Angular: 7 .0.4 ... animations, common, compiler, compiler-cli, core, forms ... http, language-service, platform-browser ... platform-browser-dynamic, router ... Angular dependencies Staying inside the web/onos-gui folder, the Angular dependencies must be installed. This is as simple as running npm install in the folder. This takes the dependencies listed in package.json and installs them in the temporary folder node_modules : npm install Docker Docker is required to build the project Docker images and also to compile *.proto files into TypeScript source files. Local kubernetes environment Some form of local kubernetes development environment is also needed. The core team uses Kind , but there are other options such as Minikube and Microk8s for Ubuntu. The onit (ONOS Integration Test tool) should be used to set up the cluster, or deploy gives more details on a Helm installation. IDE Some form of an integrated development environment that supports Web Development with TypeScript is also recommended. The core team uses the Intellij WebStorm IDE from JetBrains, but there are many other options. The Atom editor is a lightweight solution supporting TypeScript and Git integration. Visual Studio Code is another option that supports TypeScript.. License The project requires that all Typescript source files are properly annotated using the Apache 2.0 License. Since this requirement is enforced by the CI process, it is strongly recommended that developers setup their IDE to include the license text automatically.","title":"GUI Development Prerequisites"},{"location":"onos-gui/docs/prerequisites/#gui-development-prerequisites","text":"This document provides an overview of the tools and packages needed to work on and to build onos-gui. Developers are expected to have these tools installed on the machine where the project is built.","title":"GUI Development Prerequisites"},{"location":"onos-gui/docs/prerequisites/#nodejs","text":"Install the latest Long Term Support version of NodeJS on your system. Downloads are available from https://nodejs.org/en/download/ Instructions for installing on Linux are at https://github.com/nodejs/help/wiki/Installation After installing it should be possible to see the version of node and npm (which is bundled with it) that you installed with: node -v npm -v","title":"NodeJS"},{"location":"onos-gui/docs/prerequisites/#angular-cli","text":"Angular CLI provides the ng tools. Installation instructions are at https://angular.io/guide/setup-local The following command can be run from any folder: npm install -g @angular/cli","title":"Angular CLI"},{"location":"onos-gui/docs/prerequisites/#checkout-the-onos-gui-code-from-git","text":"Using a process described contributing.md the Git repo should be forked in your own name on github.com/onosproject/onos-gui . git clone https://github.com/ $GIT_USER /onos-gui.git # or: git clone git@github.com: $GIT_USER /onos-gui.git cd $ONOS_ROOT /onos-gui git remote add upstream https://github.com/onosproject/onos-gui.git # or: git remote add upstream git@github.com:onosproject/onos-gui.git # Never push to upstream master git remote set-url --push upstream no_push # Confirm that your remotes make sense: git remote -v","title":"Checkout the onos-gui code from Git"},{"location":"onos-gui/docs/prerequisites/#set-up-angular-for-local-development","text":"After this install (and after changing to the web/onos-gui folder) it should be possible to see the Angular CLI version: cd web/onos-gui ng version This should give a result like: Your global Angular CLI version ( 8 .1.2 ) is greater than your local version ( 7 .0.7 ) . The local Angular CLI version is used. To disable this warning use \"ng config -g cli.warnings.versionMismatch false\" . _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 7 .0.7 Node: 12 .6.0 OS: linux x64 Angular: 7 .0.4 ... animations, common, compiler, compiler-cli, core, forms ... http, language-service, platform-browser ... platform-browser-dynamic, router ...","title":"Set up Angular for local development"},{"location":"onos-gui/docs/prerequisites/#angular-dependencies","text":"Staying inside the web/onos-gui folder, the Angular dependencies must be installed. This is as simple as running npm install in the folder. This takes the dependencies listed in package.json and installs them in the temporary folder node_modules : npm install","title":"Angular dependencies"},{"location":"onos-gui/docs/prerequisites/#docker","text":"Docker is required to build the project Docker images and also to compile *.proto files into TypeScript source files.","title":"Docker"},{"location":"onos-gui/docs/prerequisites/#local-kubernetes-environment","text":"Some form of local kubernetes development environment is also needed. The core team uses Kind , but there are other options such as Minikube and Microk8s for Ubuntu. The onit (ONOS Integration Test tool) should be used to set up the cluster, or deploy gives more details on a Helm installation.","title":"Local kubernetes environment"},{"location":"onos-gui/docs/prerequisites/#ide","text":"Some form of an integrated development environment that supports Web Development with TypeScript is also recommended. The core team uses the Intellij WebStorm IDE from JetBrains, but there are many other options. The Atom editor is a lightweight solution supporting TypeScript and Git integration. Visual Studio Code is another option that supports TypeScript..","title":"IDE"},{"location":"onos-gui/docs/prerequisites/#license","text":"The project requires that all Typescript source files are properly annotated using the Apache 2.0 License. Since this requirement is enforced by the CI process, it is strongly recommended that developers setup their IDE to include the license text automatically.","title":"License"},{"location":"onos-gui/docs/run/","text":"Running onos-gui onos-gui can only be run in a Kubernetes cluster. The easiest set up is to deploy it using the ONOS Integration Test tool. See onos-gui-access-inside-kubernetes . Browser access When deployed, the onos-gui is available to a browser at http://onos-gui (or with a specific port number if port-forwarding or an ingress is involved). Using the hostname onos-gui is mandatory - an IP address will not suffice. This means that you may have to add an entry to your /etc/hosts file if the name is not configured on a DNS server The browser connects to onos-gui over HTTP 1.1 to retrieve the Angular compiled static files. When the List onos-config capabilities button is pressed: A grpc-web request is formed and sent as a POST to http://onos-gui/gnmi.gNMI/Capabilities This is forwarded by a proxy_pass declaration in nginx.conf to http://onos-config-envoy:8080 This is converted in to a gRPC request by Envoy Proxy server's grpc-web filter and is forwarded to https://onos-config:5150 as a gRPC request onos-config sends back the response to envoy asynchronously as a gRPC response Envoy's grpc-web service turns it in to a grpc-web response and sends it back to nginx nginx sends the response back to the browser and the callback function is called Inside the browser the callback updates the capabilities object inside the AppComponent the binding in the app.component.html page is alerted to the updated value and refreshes the display Developer mode To run the GUI locally on a development machine install the prerequisites as described in prerequisites.md run ONIT in Kubernetes as above perform additional configuration steps on Kubernetes (such as port forwarding or firewall rules as described in onos-test/run ) run the Angular CLI in 'serve' mode from the web/onos-gui folder browse to http://localhost:4200 ensure that the models page shows the 4 loaded model plugins (this ensures that the gRPC requests are proxied correctly through the envoy proxy)","title":"How To Run ONOS GUI?"},{"location":"onos-gui/docs/run/#running-onos-gui","text":"onos-gui can only be run in a Kubernetes cluster. The easiest set up is to deploy it using the ONOS Integration Test tool. See onos-gui-access-inside-kubernetes .","title":"Running onos-gui"},{"location":"onos-gui/docs/run/#browser-access","text":"When deployed, the onos-gui is available to a browser at http://onos-gui (or with a specific port number if port-forwarding or an ingress is involved). Using the hostname onos-gui is mandatory - an IP address will not suffice. This means that you may have to add an entry to your /etc/hosts file if the name is not configured on a DNS server The browser connects to onos-gui over HTTP 1.1 to retrieve the Angular compiled static files. When the List onos-config capabilities button is pressed: A grpc-web request is formed and sent as a POST to http://onos-gui/gnmi.gNMI/Capabilities This is forwarded by a proxy_pass declaration in nginx.conf to http://onos-config-envoy:8080 This is converted in to a gRPC request by Envoy Proxy server's grpc-web filter and is forwarded to https://onos-config:5150 as a gRPC request onos-config sends back the response to envoy asynchronously as a gRPC response Envoy's grpc-web service turns it in to a grpc-web response and sends it back to nginx nginx sends the response back to the browser and the callback function is called Inside the browser the callback updates the capabilities object inside the AppComponent the binding in the app.component.html page is alerted to the updated value and refreshes the display","title":"Browser access"},{"location":"onos-gui/docs/run/#developer-mode","text":"To run the GUI locally on a development machine install the prerequisites as described in prerequisites.md run ONIT in Kubernetes as above perform additional configuration steps on Kubernetes (such as port forwarding or firewall rules as described in onos-test/run ) run the Angular CLI in 'serve' mode from the web/onos-gui folder browse to http://localhost:4200 ensure that the models page shows the 4 loaded model plugins (this ensures that the gRPC requests are proxied correctly through the envoy proxy)","title":"Developer mode"},{"location":"onos-test/docs/run/","text":"How To Use ONIT? The primary interface for setting up test clusters and running tests is the onit command, which provides a suite of commands for setting up and tearing down test clusters, adding and removing device simulators , adding and removing networks of [stratum] switches, adding and removing applications, running tests, and viewing test history. To see list of onit commands run onit from the shell as follows: > onit Run onos integration tests on Kubernetes Usage: onit [ command ] Available Commands: add Add resources to the cluster completion Generated bash or zsh auto-completion script create Create a test resource on Kubernetes debug Open a debugger port to the given resource delete Delete Kubernetes test resources fetch Fetch resources from the cluster get Get test configurations help Help about any command onos-cli Open onos-cli shell for executing commands remove Remove resources from the cluster run Run integration tests set Set test configurations ssh Open a ssh session to a node for executing remote commands Flags: -h, --help help for onit Use \"onit [command] --help\" for more information about a command. Cluster Setup The first step to running tests is to setup a test cluster with onit create cluster : > onit create cluster \u2713 Creating cluster namespace \u2713 Setting up RBAC \u2713 Setting up Atomix controller \u2713 Starting Raft partitions \u2713 Adding secrets \u2713 Bootstrapping onos-topo cluster \u2713 Bootstrapping onos-config cluster \u2713 Setting up GUI \u2713 Setting up CLI \u2713 Creating ingress for services cluster-8face0a8-bed6-11e9-a853-3c15c2cff232 You can also specify the number of nodes for each onos subsystem, for example, to create a cluster which runs two onos-config and two onos-topo pods, run the following command: onit create cluster onit-1 --config-nodes 2 --topo-nodes 2 To setup the cluster, onit creates a unique namespace within which to create test resources, deploys Atomix inside the test namespace, and configures and deploys onos-config nodes. Once the cluster is setup, the command will output the name of the test namespace. The namespace can be used to view test resources via kubectl : > kubectl get pods -n cluster-8face0a8-bed6-11e9-a853-3c15c2cff232 NAME READY STATUS RESTARTS AGE atomix-controller-7f95d69f47-sbsn4 1 /1 Running 0 107s onos-cli-6c6cf7cc89-fmvwq 1 /1 Running 0 63s onos-config-d68456bd7-xf9nv 1 /1 Running 0 72s onos-config-envoy-5c49b74dc4-vpmm4 1 /1 Running 0 71s onos-gui-6c78895d94-lj5vq 1 /1 Running 0 65s onos-topo-654999644-674z5 1 /1 Running 0 87s onos-topo-envoy-dcddf9dc6-2f5q9 1 /1 Running 0 87s raft-1-0 1 /1 Running 0 98s The create cluster command supports additional flags for defining the cluster architecture: Flags: -c, --config string test cluster configuration ( default \"default\" ) --config-nodes int the number of onos-config nodes to deploy ( default 1 ) --docker-registry string an optional host:port for a private Docker registry -h, --help help for cluster --image-pull-policy string the Docker image pull policy ( default \"IfNotPresent\" ) --image-tags stringToString the image docker container tag for each node in the cluster ( default [ topo = debug,simulator = latest,stratum = latest,test = latest,atomix = latest,raft = latest,config = debug ]) -s, --partition-size int the size of each Raft partition ( default 1 ) -p, --partitions int the number of Raft partitions to deploy ( default 1 ) --topo-nodes int the number of onos-topo nodes to deploy ( default 1 ) Once the cluster is setup, the cluster configuration will be added to the onit configuration and the deployed cluster will be set as the current cluster context: > onit get cluster cluster-b8c45834-a81c-11e9-82f4-3c15c2cff232 You can also create a cluster by passing a name to the onit create cluster command. To create a cluster with name onit-2 , we run the following command: > onit create cluster onit-1 onit create cluster onit-1 \u2713 Creating cluster namespace \u2713 Setting up RBAC \u2713 Setting up Atomix controller \u2713 Starting Raft partitions \u2713 Adding secrets \u2713 Bootstrapping onos-topo cluster \u2713 Bootstrapping onos-config cluster \u2713 Setting up GUI \u2713 Setting up CLI \u2713 Creating ingress for services onit-1 if we run onit get clusters command, we should be able to see the two clusters that we created: > onit get clusters ID SIZE PARTITIONS cluster-b8c45834-a81c-11e9-82f4-3c15c2cff232 1 1 onit-1 When multiple clusters are deployed, you can switch between clusters by setting the current cluster context: > onit set cluster onit-1 onit-1 This will run all future cluster operations on the configured cluster. Alternatively, most commands support a flag to override the default cluster. You can also use set command to redeploy a deployment with a new container image. For example, to redeploy onos-config subsystem with a new debug image, you can run the following command: onit set image onos-config --image onosproject/onos-config:debug To delete a cluster, run onit delete cluster : > onit delete cluster \u2713 Deleting cluster namespace Adding Simulators Most tests require devices to be added to the cluster. The onit command supports adding and removing device simulators through the add and remove commands. To add a simulator to the current cluster, simply run onit add simulator : > onit add simulator \u2713 Setting up simulator \u2713 Reconfiguring onos-config nodes device-1186885096 When a simulator is added to the cluster, the cluster is reconfigured in two phases: * Bootstrap a new device simulator with the provided configuration * Reconfigure and redeploy the onos-config cluster with the new device in its stores To give a name to a simulator, pass a name to onit add simulator command as follows > onit add simulator sim-2 \u2713 Setting up simulator \u2713 Reconfiguring onos-config nodes sim-2 To get list of simulators, run onit get simulators as follows: > onit get simulators device-1186885096 sim-2 Simulators can similarly be removed with the remove simulator command: > onit remove simulator device-1186885096 \u2713 Tearing down simulator \u2713 Reconfiguring onos-config nodes As with the add command, removing a simulator requires that the onos-config cluster be reconfigured and redeployed. Adding Networks To run some of the tests on stratum switches, we can create a network of stratum switches using Mininet. To create a network of stratum switches, we can use onit add network [Name] [Mininet Options] as follows: To create a single node network, simply run onit add network . This command creates a single node network and assigns a name to it automatically. To create a linear network topology with two switches and name it stratum-linear , simply run the following command: > onit add network stratum-linear -- --topo linear,2 \u2713 Setting up network \u2713 Reconfiguring onos-config nodes stratum-linear When a network is added to the cluster, the cluster is reconfigured in two phases: * Bootstrap one or more than one new stratum switches with the provided configuration * Reconfigure and redeploy the onos-config cluster with the new switches in its stores To add a single node network topology, run the following command: > onit add network \u2713 Setting up network \u2713 Reconfiguring onos-config nodes network-2878434070 To get list of networks, run the following command: > onit get networks network-2878434070 stratum-linear Networks can be removed using onit remove network command. For example, to remove the linear topolog that is created using the above command, you should run the following command: > onit remove network stratum-linear \u2713 Tearing down network \u2713 Reconfiguring onos-config nodes As with the add command, removing a network requires that the onos-config cluster be reconfigured and redeployed. Note : In the current implementation, we support the following network topologies: A Single node network topology A Linear network topology Adding Applications Applications from outside of onit can be added to an onit cluster using the onit add app command. This command takes the name of the app as an argument. It also has the --image flag that allows a user to specify the image of the application that should be deployed. The user also can specify the pull policy for the image using --image-pull-policy flag. For example, to deploy the latest version of the onos-ztp application: > onit add app onos-ztp --image onosproject/onos-ztp:latest --image-pull-policy \"Always\" \u2713 Setting up app onos-ztp To give a name to an app, pass a name to the onit add app command as follows > onit add app onosproject/onos-ztp:latest ztp \u2713 Setting up app ztp To get list of apps, run onit get apps as follows: > onit get apps app-128922186 Apps can be removed with the remove app command: > onit remove app app-128922186 \u2713 Tearing down app SSH Into A Cluster Node onit allows you to ssh into a node using the following command: onit ssh <name of a node> onos-cli in a cluster onit also provides a command that you can run onos-cli commands via onit as follows: onit onos-cli ~ $ onos ONOS command line client Usage: onos [ command ] Available Commands: completion Generated bash or zsh auto-completion script help Help about any command topo ztp ONOS zero-touch provisioning subsystem commands Flags: -h, --help help for onos Use \"onos [command] --help\" for more information about a command. Onos-gui access inside Kubernetes The correct way to access a Gui inside a cluster node is to have a Kubernetes ingress configured on the cluster. This handles load balancing and failover of nodes in a production environment. The Demo cluster has an ingress configured for port 80 and is available on the cluster's IP address 10.128.100.91 at port 31214. To access the GUI however it must be accessed by hostname onos-gui and so can be accessed at http://onos-gui:31214 Gui access for Development - Microk8s This following procedure has only been proven only on Microk8s on Ubuntu. Additionally for GUI development (only) the browser running under Angular CLI will need to access http://onos-config-envoy:8080 and http://onos-topo-envoy:8080 . On Microk8s to allow either of these it is necessary to further open the firewall (on Ubuntu) with sudo iptables -P FORWARD ACCEPT and also to add the ip addresses of these services running on Kubernetes to your local /etc/hosts file. uonos@uonos-S210-X12RS-V2:~$ kubectl get svc -A onos-demo onos-gui ClusterIP 10 .103.230.163 <none> 80 /TCP 3d2h onos-demo onos-config-envoy ClusterIP 10 .96.237.14 <none> 8080 /TCP 3d2h onos-demo onos-topo-envoy ClusterIP 10 .97.188.229 <none> 8080 /TCP 3d2h uonos@uonos-S210-X12RS-V2:~$ These should be added to /etc/hosts like: uonos@uonos-S210-X12RS-V2:~$ cat /etc/hosts | grep envoy 10 .103.230.163 onos-gui 10 .96.237.14 onos-config-envoy 10 .97.188.229 onos-topo-envoy uonos@uonos-S210-X12RS-V2:~$ Gui access for Development - KinD The following procedure is for Kubernetes in Docker only. To access the GUI through KinD a port forwarding connection must be established: kubectl -n <cluster-namespace> port-forward <onos-gui-pod-id> 8080 :80 where the and may be found with the command result (first 2 columns): scondon@Z420:~/go/src/github.com/onosproject/onos-test$ kubectl get pods -A | grep onos-gui onit-1 onos-gui-67b867c7c7-cpm5w 1 /1 Running 0 35m This port forwarding arrangement must stay active as lone as the GUI is being accessed. This makes the GUI available at http://localhost:8080 but it will not connect properly to the gRPC services in the onos-config-envoy proxy unless the GUI is accessed with the hostname \"onos-gui\". To make this work add onos-gui to the line with localhost in your /etc/hosts file e.g.: 127.0.0.1 localhost onos-gui Then the GUI will then be available at http://onos-gui:8080 If GUI development needs to be done on KinD an alternative arrangement where onos-config-envoy:8080 and onos-topo-envoy:8080 are exposed through port forwarding will have to be setup instead . Note these are only for GUI development To do this use: kubectl -n <cluster-namespace> port-forward <onos-config-envoy-pod-id> 8091 :8080 and in another terminal (remembering to set KUBECONFIG) kubectl -n <cluster-namespace> port-forward <onos-topo-envoy-pod-id> 8092 :8080 Then run Angular CLI in development mode with: ng serve --configuration = kind Further information on running the GUI in development mode is at onos-gui/run.md","title":"How To Use ONIT?"},{"location":"onos-test/docs/run/#how-to-use-onit","text":"The primary interface for setting up test clusters and running tests is the onit command, which provides a suite of commands for setting up and tearing down test clusters, adding and removing device simulators , adding and removing networks of [stratum] switches, adding and removing applications, running tests, and viewing test history. To see list of onit commands run onit from the shell as follows: > onit Run onos integration tests on Kubernetes Usage: onit [ command ] Available Commands: add Add resources to the cluster completion Generated bash or zsh auto-completion script create Create a test resource on Kubernetes debug Open a debugger port to the given resource delete Delete Kubernetes test resources fetch Fetch resources from the cluster get Get test configurations help Help about any command onos-cli Open onos-cli shell for executing commands remove Remove resources from the cluster run Run integration tests set Set test configurations ssh Open a ssh session to a node for executing remote commands Flags: -h, --help help for onit Use \"onit [command] --help\" for more information about a command.","title":"How To Use ONIT?"},{"location":"onos-test/docs/run/#cluster-setup","text":"The first step to running tests is to setup a test cluster with onit create cluster : > onit create cluster \u2713 Creating cluster namespace \u2713 Setting up RBAC \u2713 Setting up Atomix controller \u2713 Starting Raft partitions \u2713 Adding secrets \u2713 Bootstrapping onos-topo cluster \u2713 Bootstrapping onos-config cluster \u2713 Setting up GUI \u2713 Setting up CLI \u2713 Creating ingress for services cluster-8face0a8-bed6-11e9-a853-3c15c2cff232 You can also specify the number of nodes for each onos subsystem, for example, to create a cluster which runs two onos-config and two onos-topo pods, run the following command: onit create cluster onit-1 --config-nodes 2 --topo-nodes 2 To setup the cluster, onit creates a unique namespace within which to create test resources, deploys Atomix inside the test namespace, and configures and deploys onos-config nodes. Once the cluster is setup, the command will output the name of the test namespace. The namespace can be used to view test resources via kubectl : > kubectl get pods -n cluster-8face0a8-bed6-11e9-a853-3c15c2cff232 NAME READY STATUS RESTARTS AGE atomix-controller-7f95d69f47-sbsn4 1 /1 Running 0 107s onos-cli-6c6cf7cc89-fmvwq 1 /1 Running 0 63s onos-config-d68456bd7-xf9nv 1 /1 Running 0 72s onos-config-envoy-5c49b74dc4-vpmm4 1 /1 Running 0 71s onos-gui-6c78895d94-lj5vq 1 /1 Running 0 65s onos-topo-654999644-674z5 1 /1 Running 0 87s onos-topo-envoy-dcddf9dc6-2f5q9 1 /1 Running 0 87s raft-1-0 1 /1 Running 0 98s The create cluster command supports additional flags for defining the cluster architecture: Flags: -c, --config string test cluster configuration ( default \"default\" ) --config-nodes int the number of onos-config nodes to deploy ( default 1 ) --docker-registry string an optional host:port for a private Docker registry -h, --help help for cluster --image-pull-policy string the Docker image pull policy ( default \"IfNotPresent\" ) --image-tags stringToString the image docker container tag for each node in the cluster ( default [ topo = debug,simulator = latest,stratum = latest,test = latest,atomix = latest,raft = latest,config = debug ]) -s, --partition-size int the size of each Raft partition ( default 1 ) -p, --partitions int the number of Raft partitions to deploy ( default 1 ) --topo-nodes int the number of onos-topo nodes to deploy ( default 1 ) Once the cluster is setup, the cluster configuration will be added to the onit configuration and the deployed cluster will be set as the current cluster context: > onit get cluster cluster-b8c45834-a81c-11e9-82f4-3c15c2cff232 You can also create a cluster by passing a name to the onit create cluster command. To create a cluster with name onit-2 , we run the following command: > onit create cluster onit-1 onit create cluster onit-1 \u2713 Creating cluster namespace \u2713 Setting up RBAC \u2713 Setting up Atomix controller \u2713 Starting Raft partitions \u2713 Adding secrets \u2713 Bootstrapping onos-topo cluster \u2713 Bootstrapping onos-config cluster \u2713 Setting up GUI \u2713 Setting up CLI \u2713 Creating ingress for services onit-1 if we run onit get clusters command, we should be able to see the two clusters that we created: > onit get clusters ID SIZE PARTITIONS cluster-b8c45834-a81c-11e9-82f4-3c15c2cff232 1 1 onit-1 When multiple clusters are deployed, you can switch between clusters by setting the current cluster context: > onit set cluster onit-1 onit-1 This will run all future cluster operations on the configured cluster. Alternatively, most commands support a flag to override the default cluster. You can also use set command to redeploy a deployment with a new container image. For example, to redeploy onos-config subsystem with a new debug image, you can run the following command: onit set image onos-config --image onosproject/onos-config:debug To delete a cluster, run onit delete cluster : > onit delete cluster \u2713 Deleting cluster namespace","title":"Cluster Setup"},{"location":"onos-test/docs/run/#adding-simulators","text":"Most tests require devices to be added to the cluster. The onit command supports adding and removing device simulators through the add and remove commands. To add a simulator to the current cluster, simply run onit add simulator : > onit add simulator \u2713 Setting up simulator \u2713 Reconfiguring onos-config nodes device-1186885096 When a simulator is added to the cluster, the cluster is reconfigured in two phases: * Bootstrap a new device simulator with the provided configuration * Reconfigure and redeploy the onos-config cluster with the new device in its stores To give a name to a simulator, pass a name to onit add simulator command as follows > onit add simulator sim-2 \u2713 Setting up simulator \u2713 Reconfiguring onos-config nodes sim-2 To get list of simulators, run onit get simulators as follows: > onit get simulators device-1186885096 sim-2 Simulators can similarly be removed with the remove simulator command: > onit remove simulator device-1186885096 \u2713 Tearing down simulator \u2713 Reconfiguring onos-config nodes As with the add command, removing a simulator requires that the onos-config cluster be reconfigured and redeployed.","title":"Adding Simulators"},{"location":"onos-test/docs/run/#adding-networks","text":"To run some of the tests on stratum switches, we can create a network of stratum switches using Mininet. To create a network of stratum switches, we can use onit add network [Name] [Mininet Options] as follows: To create a single node network, simply run onit add network . This command creates a single node network and assigns a name to it automatically. To create a linear network topology with two switches and name it stratum-linear , simply run the following command: > onit add network stratum-linear -- --topo linear,2 \u2713 Setting up network \u2713 Reconfiguring onos-config nodes stratum-linear When a network is added to the cluster, the cluster is reconfigured in two phases: * Bootstrap one or more than one new stratum switches with the provided configuration * Reconfigure and redeploy the onos-config cluster with the new switches in its stores To add a single node network topology, run the following command: > onit add network \u2713 Setting up network \u2713 Reconfiguring onos-config nodes network-2878434070 To get list of networks, run the following command: > onit get networks network-2878434070 stratum-linear Networks can be removed using onit remove network command. For example, to remove the linear topolog that is created using the above command, you should run the following command: > onit remove network stratum-linear \u2713 Tearing down network \u2713 Reconfiguring onos-config nodes As with the add command, removing a network requires that the onos-config cluster be reconfigured and redeployed. Note : In the current implementation, we support the following network topologies: A Single node network topology A Linear network topology","title":"Adding Networks"},{"location":"onos-test/docs/run/#adding-applications","text":"Applications from outside of onit can be added to an onit cluster using the onit add app command. This command takes the name of the app as an argument. It also has the --image flag that allows a user to specify the image of the application that should be deployed. The user also can specify the pull policy for the image using --image-pull-policy flag. For example, to deploy the latest version of the onos-ztp application: > onit add app onos-ztp --image onosproject/onos-ztp:latest --image-pull-policy \"Always\" \u2713 Setting up app onos-ztp To give a name to an app, pass a name to the onit add app command as follows > onit add app onosproject/onos-ztp:latest ztp \u2713 Setting up app ztp To get list of apps, run onit get apps as follows: > onit get apps app-128922186 Apps can be removed with the remove app command: > onit remove app app-128922186 \u2713 Tearing down app","title":"Adding Applications"},{"location":"onos-test/docs/run/#ssh-into-a-cluster-node","text":"onit allows you to ssh into a node using the following command: onit ssh <name of a node>","title":"SSH Into A Cluster Node"},{"location":"onos-test/docs/run/#onos-cli-in-a-cluster","text":"onit also provides a command that you can run onos-cli commands via onit as follows: onit onos-cli ~ $ onos ONOS command line client Usage: onos [ command ] Available Commands: completion Generated bash or zsh auto-completion script help Help about any command topo ztp ONOS zero-touch provisioning subsystem commands Flags: -h, --help help for onos Use \"onos [command] --help\" for more information about a command.","title":"onos-cli in a cluster"},{"location":"onos-test/docs/run/#onos-gui-access-inside-kubernetes","text":"The correct way to access a Gui inside a cluster node is to have a Kubernetes ingress configured on the cluster. This handles load balancing and failover of nodes in a production environment. The Demo cluster has an ingress configured for port 80 and is available on the cluster's IP address 10.128.100.91 at port 31214. To access the GUI however it must be accessed by hostname onos-gui and so can be accessed at http://onos-gui:31214","title":"Onos-gui access inside Kubernetes"},{"location":"onos-test/docs/run/#gui-access-for-development-microk8s","text":"This following procedure has only been proven only on Microk8s on Ubuntu. Additionally for GUI development (only) the browser running under Angular CLI will need to access http://onos-config-envoy:8080 and http://onos-topo-envoy:8080 . On Microk8s to allow either of these it is necessary to further open the firewall (on Ubuntu) with sudo iptables -P FORWARD ACCEPT and also to add the ip addresses of these services running on Kubernetes to your local /etc/hosts file. uonos@uonos-S210-X12RS-V2:~$ kubectl get svc -A onos-demo onos-gui ClusterIP 10 .103.230.163 <none> 80 /TCP 3d2h onos-demo onos-config-envoy ClusterIP 10 .96.237.14 <none> 8080 /TCP 3d2h onos-demo onos-topo-envoy ClusterIP 10 .97.188.229 <none> 8080 /TCP 3d2h uonos@uonos-S210-X12RS-V2:~$ These should be added to /etc/hosts like: uonos@uonos-S210-X12RS-V2:~$ cat /etc/hosts | grep envoy 10 .103.230.163 onos-gui 10 .96.237.14 onos-config-envoy 10 .97.188.229 onos-topo-envoy uonos@uonos-S210-X12RS-V2:~$","title":"Gui access for Development - Microk8s"},{"location":"onos-test/docs/run/#gui-access-for-development-kind","text":"The following procedure is for Kubernetes in Docker only. To access the GUI through KinD a port forwarding connection must be established: kubectl -n <cluster-namespace> port-forward <onos-gui-pod-id> 8080 :80 where the and may be found with the command result (first 2 columns): scondon@Z420:~/go/src/github.com/onosproject/onos-test$ kubectl get pods -A | grep onos-gui onit-1 onos-gui-67b867c7c7-cpm5w 1 /1 Running 0 35m This port forwarding arrangement must stay active as lone as the GUI is being accessed. This makes the GUI available at http://localhost:8080 but it will not connect properly to the gRPC services in the onos-config-envoy proxy unless the GUI is accessed with the hostname \"onos-gui\". To make this work add onos-gui to the line with localhost in your /etc/hosts file e.g.: 127.0.0.1 localhost onos-gui Then the GUI will then be available at http://onos-gui:8080 If GUI development needs to be done on KinD an alternative arrangement where onos-config-envoy:8080 and onos-topo-envoy:8080 are exposed through port forwarding will have to be setup instead . Note these are only for GUI development To do this use: kubectl -n <cluster-namespace> port-forward <onos-config-envoy-pod-id> 8091 :8080 and in another terminal (remembering to set KUBECONFIG) kubectl -n <cluster-namespace> port-forward <onos-topo-envoy-pod-id> 8092 :8080 Then run Angular CLI in development mode with: ng serve --configuration = kind Further information on running the GUI in development mode is at onos-gui/run.md","title":"Gui access for Development - KinD"},{"location":"onos-test/docs/setup/","text":"How To Install and Run ONIT? Setup The integration test framework is designed to operate on a Kubernetes cluster. It's recommended that users use a local Kubernetes cluster suitable for development, e.g. k3d , Minikube , kind , or MicroK8s . To run onit , you need to install go tools on your machine as explained here Configuration The test framework is controlled through the onit command. To install the onit command, use go get : export GO111MODULE = on > go get github.com/onosproject/onos-test/cmd/onit To interact with a Kubernetes cluster, the onit command must have access to a local Kubernetes configuration. Onit expects the same configuration as kubectl and will connect to the same Kubernetes cluster as kubectl will connect to, so to determine which Kubernetes cluster onit will use, simply run kubectl cluster-info : > kubectl cluster-info Kubernetes master is running at https://127.0.0.1:49760 KubeDNS is running at https://127.0.0.1:49760/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy See the Kubernetes documentation for details on configuring both kubectl and onit to connect to a new cluster or multiple clusters. The onit command also maintains some cluster metadata in a local configuration file. The search path for the onit.yaml configuration file is: * ~/.onos * /etc/onos * . Users do not typically need to modify the onit.yaml configuration file directly. The onit configuration is primarily managed through various onit commands like onit set , onit create , onit add , etc. It's recommended that users avoid modifying the onit configuration file, but it's nevertheless important to note that the application must have write access to one of the above paths. Onit Auto-Completion Onit supports shell auto-completion for its various commands, sub-commands and flags. You can enable this feature for bash or zsh as follows: Bash Auto-Completion To enable this for bash , run the following from the shell: > eval \" $( onit completion bash ) \" Zsh Auto-Completion To enable this for zsh , run the following from the shell: > source < ( onit completion zsh ) Note : We also recommend to add the output of the above commands to .bashrc or .zshrc . Docker The onit command manages clusters and runs tests by deploying locally built [Docker] containers on Kubernetes . Docker image builds are an essential component of the onit workflow. Each time a change is made to either the core or integration tests, Docker images must be rebuilt and made available within the Kubernetes cluster in which tests are being run. The precise process for building Docker images and adding them to a local Kubernetes cluster is different for each setup. Build Using K8S Local Cluster Tools Building for Minikube Minikube runs a VM with its own Docker daemon running inside it. To build the Docker images for Minikube, ensure you use configure your shell to use Minikube Docker context before building: > eval $( minikube docker-env ) Once the shell has been configured, use make images to build the Docker images: > make images Note that make images must be run every time a change is made to either the core code or integration tests. Building for Kind Kind provides an alternative to Minikube which runs Kubernetes in a Docker container. Assuming you have dowloaded kind as per instructions , the first time you boot the kind cluster or if you have rebooted your docker deamon you need to issue: > kind create cluster and for each window you intend to use onit commands in you will need to export the KUBECONFIG variable: > export KUBECONFIG = \" $( kind get kubeconfig-path --name = \"kind\" ) \" As with Minikube, kind requires specific setup to ensure Docker images modified and built locally can be run within the kind cluster. Rather than switching your Docker environment to a remote Docker server, kind requires that images be explicitly loaded into the cluster each time they're built. For this reason, we provide a convenience make target: kind : > make kind if you run the above command from the root of onos-test, the onos-test-runner image will be built and loaded into the kind cluster. Note: The same make target (i.e. make kind) is provided in other onos subsystems Makefiles such as onos-config , onos-topo , etc that allows you to build and load other onos subsystem docker images into the kind cluster. Building for MicroK8s microk8s is a Kubernetes cluster solution that runs on Ubuntu and other platforms. On Ubuntu is installed through the snap system on Ubuntu 16 and above. After installing with: snap install microk8s --classic install kubectl . This can also be installed with snap: sudo snap install kubectl --classic Add your user name to the microk8s group in Linux: usermod -a -G microk8s $USER It will be necessary to log out and back in again to enable this. For onit to work the dns service at least has to be installed. It is also convenient to also install the dashboard. microk8s.enable dns,dashboard Also when onit runs it needs inter pod communication. Depending on the installation of on Ubuntu the firewall may need to be disabled. On Ubuntu, the system must be rebooted first and the cbr0 interface should be visible. Then run: sudo ufw allow in on cbr0 && sudo ufw allow out on cbr0 sudo ufw default allow routed Running microk8s.inspect should show no warnings about firewall. After this onit can start the cluster. On Ubuntu running the debug versions of onos-topo and onos-config has a problem in starting because of the need for root permissions. For this reason onit must be started as the latest version with: onit create cluster --image-tags = \"topo=latest,config=latest\" By default MicroK8s will pull docker images from docker hub, and not the local machine. To load a local image in to Microk8s: docker save mynginx > myimage.tar microk8s.ctr -n k8s.io image import myimage.tar (see https://microk8s.io/docs/working for more details).","title":"How To Install and Run ONIT?"},{"location":"onos-test/docs/setup/#how-to-install-and-run-onit","text":"","title":"How To Install and Run ONIT?"},{"location":"onos-test/docs/setup/#setup","text":"The integration test framework is designed to operate on a Kubernetes cluster. It's recommended that users use a local Kubernetes cluster suitable for development, e.g. k3d , Minikube , kind , or MicroK8s . To run onit , you need to install go tools on your machine as explained here","title":"Setup"},{"location":"onos-test/docs/setup/#configuration","text":"The test framework is controlled through the onit command. To install the onit command, use go get : export GO111MODULE = on > go get github.com/onosproject/onos-test/cmd/onit To interact with a Kubernetes cluster, the onit command must have access to a local Kubernetes configuration. Onit expects the same configuration as kubectl and will connect to the same Kubernetes cluster as kubectl will connect to, so to determine which Kubernetes cluster onit will use, simply run kubectl cluster-info : > kubectl cluster-info Kubernetes master is running at https://127.0.0.1:49760 KubeDNS is running at https://127.0.0.1:49760/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy See the Kubernetes documentation for details on configuring both kubectl and onit to connect to a new cluster or multiple clusters. The onit command also maintains some cluster metadata in a local configuration file. The search path for the onit.yaml configuration file is: * ~/.onos * /etc/onos * . Users do not typically need to modify the onit.yaml configuration file directly. The onit configuration is primarily managed through various onit commands like onit set , onit create , onit add , etc. It's recommended that users avoid modifying the onit configuration file, but it's nevertheless important to note that the application must have write access to one of the above paths.","title":"Configuration"},{"location":"onos-test/docs/setup/#onit-auto-completion","text":"Onit supports shell auto-completion for its various commands, sub-commands and flags. You can enable this feature for bash or zsh as follows:","title":"Onit Auto-Completion"},{"location":"onos-test/docs/setup/#bash-auto-completion","text":"To enable this for bash , run the following from the shell: > eval \" $( onit completion bash ) \"","title":"Bash Auto-Completion"},{"location":"onos-test/docs/setup/#zsh-auto-completion","text":"To enable this for zsh , run the following from the shell: > source < ( onit completion zsh ) Note : We also recommend to add the output of the above commands to .bashrc or .zshrc .","title":"Zsh Auto-Completion"},{"location":"onos-test/docs/setup/#docker","text":"The onit command manages clusters and runs tests by deploying locally built [Docker] containers on Kubernetes . Docker image builds are an essential component of the onit workflow. Each time a change is made to either the core or integration tests, Docker images must be rebuilt and made available within the Kubernetes cluster in which tests are being run. The precise process for building Docker images and adding them to a local Kubernetes cluster is different for each setup.","title":"Docker"},{"location":"onos-test/docs/setup/#build-using-k8s-local-cluster-tools","text":"","title":"Build Using K8S Local Cluster Tools"},{"location":"onos-test/docs/setup/#building-for-minikube","text":"Minikube runs a VM with its own Docker daemon running inside it. To build the Docker images for Minikube, ensure you use configure your shell to use Minikube Docker context before building: > eval $( minikube docker-env ) Once the shell has been configured, use make images to build the Docker images: > make images Note that make images must be run every time a change is made to either the core code or integration tests.","title":"Building for Minikube"},{"location":"onos-test/docs/setup/#building-for-kind","text":"Kind provides an alternative to Minikube which runs Kubernetes in a Docker container. Assuming you have dowloaded kind as per instructions , the first time you boot the kind cluster or if you have rebooted your docker deamon you need to issue: > kind create cluster and for each window you intend to use onit commands in you will need to export the KUBECONFIG variable: > export KUBECONFIG = \" $( kind get kubeconfig-path --name = \"kind\" ) \" As with Minikube, kind requires specific setup to ensure Docker images modified and built locally can be run within the kind cluster. Rather than switching your Docker environment to a remote Docker server, kind requires that images be explicitly loaded into the cluster each time they're built. For this reason, we provide a convenience make target: kind : > make kind if you run the above command from the root of onos-test, the onos-test-runner image will be built and loaded into the kind cluster. Note: The same make target (i.e. make kind) is provided in other onos subsystems Makefiles such as onos-config , onos-topo , etc that allows you to build and load other onos subsystem docker images into the kind cluster.","title":"Building for Kind"},{"location":"onos-test/docs/setup/#building-for-microk8s","text":"microk8s is a Kubernetes cluster solution that runs on Ubuntu and other platforms. On Ubuntu is installed through the snap system on Ubuntu 16 and above. After installing with: snap install microk8s --classic install kubectl . This can also be installed with snap: sudo snap install kubectl --classic Add your user name to the microk8s group in Linux: usermod -a -G microk8s $USER It will be necessary to log out and back in again to enable this. For onit to work the dns service at least has to be installed. It is also convenient to also install the dashboard. microk8s.enable dns,dashboard Also when onit runs it needs inter pod communication. Depending on the installation of on Ubuntu the firewall may need to be disabled. On Ubuntu, the system must be rebooted first and the cbr0 interface should be visible. Then run: sudo ufw allow in on cbr0 && sudo ufw allow out on cbr0 sudo ufw default allow routed Running microk8s.inspect should show no warnings about firewall. After this onit can start the cluster. On Ubuntu running the debug versions of onos-topo and onos-config has a problem in starting because of the need for root permissions. For this reason onit must be started as the latest version with: onit create cluster --image-tags = \"topo=latest,config=latest\" By default MicroK8s will pull docker images from docker hub, and not the local machine. To load a local image in to Microk8s: docker save mynginx > myimage.tar microk8s.ctr -n k8s.io image import myimage.tar (see https://microk8s.io/docs/working for more details).","title":"Building for MicroK8s"},{"location":"onos-test/docs/testing/","text":"Running Tests Running single Tests Once the cluster has been setup for the test, to run a test simply use onit run : > onit run test single-path \u2713 Starting test job: test-25324770 === RUN single-path --- PASS: single-path ( 0 .46s ) PASS PASS You can specify as many tests as desired: > onit run test single-path transaction subscribe ... Running a suite of Tests onit can also run a suite of tests e.g. integration-tests which encompasses all the active integration tests. > onit run suite integration-tests \u2713 Starting test job: test-3109317976 === RUN single-path --- PASS: single-path ( 0 .20s ) === RUN subscribe --- PASS: subscribe ( 0 .09s ) PASS Test Run logs Each test run is recorded as a job in the Kubernetes cluster. This ensures that logs, statuses, and exit codes are retained for the lifetime of the cluster. Onit supports viewing past test runs and logs via the get command: > onit get history ID TESTS STATUS EXIT CODE MESSAGE test-25324770 test,single-path PASSED 0 test-2886892866 test,subscribe PASSED 0 test-3109317976 suite,integration-tests PASSED 0 To get the logs from a specific test, use onit get logs with the test ID: > onit get logs test-2886892866 === RUN test-single-path-test --- PASS: test-single-path-test ( 0 .04s ) PASS Debugging The onit command provides a set of commands for debugging test clusters. The onit command can be used to get logs for every resource deployed in the test cluster. Simply pass the resource ID (e.g. test ID , node ID , partition ID , etc) to the onit get logs command to get the logs for a resource. To list all types of nodes (e.g. onos-topo, onos-config, etc) running in the cluster, use onit get nodes , the output will be like the following: > onit get nodes onit get nodes ID TYPE STATUS onos-topo-7cd788fb7f-2zvsp topo RUNNING onos-topo-7cd788fb7f-rc6m5 topo RUNNING onos-config-6f8fcf5954-55zn2 config RUNNING onos-config-6f8fcf5954-pglkz config RUNNING To get logs for the above node, run the following command: > onit get logs onos-config-569c7d8546-jscg8 I0625 21 :55:32.027255 1 onos-config.go:114 ] Starting onos-config I0625 21 :55:32.030184 1 manager.go:98 ] Configuration store loaded from /etc/onos-config/configs/configStore.json I0625 21 :55:32.030358 1 manager.go:105 ] Change store loaded from /etc/onos-config/configs/changeStore.json I0625 21 :55:32.031087 1 manager.go:112 ] Device store loaded from /etc/onos-config/configs/deviceStore.json I0625 21 :55:32.031222 1 manager.go:119 ] Network store loaded from /etc/onos-config/configs/networkStore.json I0625 21 :55:32.031301 1 manager.go:47 ] Creating Manager ... To list the Raft partitions running in the cluster, use onit get partitions : > onit get partitions ID GROUP NODES 1 raft raft-1-0 To get logs for the above partions, run the following command: > onit get logs raft-1-0 21 :10:24.466 [ main ] INFO io.atomix.server.AtomixServerRunner - Node ID: raft-1-0 21 :10:24.472 [ main ] INFO io.atomix.server.AtomixServerRunner - Partition Config: /etc/atomix/partition.json 21 :10:24.472 [ main ] INFO io.atomix.server.AtomixServerRunner - Protocol Config: /etc/atomix/protocol.json 21 :10:24.473 [ main ] INFO io.atomix.server.AtomixServerRunner - Starting server ... To list the tests that have been run, use onit get history : > onit get history ID TESTS STATUS EXIT CODE MESSAGE 3cf7311a-9776-11e9-bfc3-acde48001122 test-integration-test PASSED 0 68ad9154-977c-11e9-bcf2-acde48001122 test-integration-test FAILED 1 71a0623c-977c-11e9-8478-acde48001122 test-single-path-test PASSED 0 9e512cdc-9720-11e9-ba6e-acde48001122 * PASSED 0 da629d06-9774-11e9-bb50-acde48001122 * PASSED 0 To get logs for one of the above histories, run the following command: > onit get logs 71a0623c-977c-11e9-8478-acde48001122 === RUN test-single-path-test --- PASS: test-single-path-test ( 0 .04s ) PASS To download logs from a node, you can run onit fetch logs command. For example, to download logs from onos-config-66d54956f5-xwpsh node, run the following command: onit fetch logs onos-config-66d54956f5-xwpsh You can refer to Debug onos-config in Onit Using Delve to learn more about debugging of onos-config pod using Delve debugger. API Tests are implemented using Go's testing package; func MyTest ( t * testing . T ) { t . Fail ( \"you messed up!\" ) } However, rather than running tests using go test , we provide a custom registry of tests to allow human-readable names to be assigned to tests for ease of use. Once you've written a test, register the test in an init function: func init () { Registry . Register ( \"my-test\" , MyTest ) } Once a test has been registered, you should be able to see the test via the onit command: > onit get tests my-test ... The test framework also provides the capability of adding your test to a suite defined in suites.go . To see the suites you can execute: > onit get suites SUITE TESTS alltests single-path, subscribe, transaction sometests subscribe, transaction integration-tests single-path To add your test to a suite in the init function the register method must be called with the suites parameter: func init () { Registry . RegisterTest ( \"my-test\" , MyTest , [] * runner . TestSuite { AllTests }) } The test framework provides utility functions for creating clients and other resources within the test environment. The test environment is provided by the env package: client , err := env . NewGnmiClient ( context . Background (), \"\" ) ... When devices are deployed in the test configuration, a list of device IDs can be retrieved from the environment: devices := env . GetDevices ()","title":"How To Write and Run Tests?"},{"location":"onos-test/docs/testing/#running-tests","text":"","title":"Running Tests"},{"location":"onos-test/docs/testing/#running-single-tests","text":"Once the cluster has been setup for the test, to run a test simply use onit run : > onit run test single-path \u2713 Starting test job: test-25324770 === RUN single-path --- PASS: single-path ( 0 .46s ) PASS PASS You can specify as many tests as desired: > onit run test single-path transaction subscribe ...","title":"Running single Tests"},{"location":"onos-test/docs/testing/#running-a-suite-of-tests","text":"onit can also run a suite of tests e.g. integration-tests which encompasses all the active integration tests. > onit run suite integration-tests \u2713 Starting test job: test-3109317976 === RUN single-path --- PASS: single-path ( 0 .20s ) === RUN subscribe --- PASS: subscribe ( 0 .09s ) PASS","title":"Running a suite of Tests"},{"location":"onos-test/docs/testing/#test-run-logs","text":"Each test run is recorded as a job in the Kubernetes cluster. This ensures that logs, statuses, and exit codes are retained for the lifetime of the cluster. Onit supports viewing past test runs and logs via the get command: > onit get history ID TESTS STATUS EXIT CODE MESSAGE test-25324770 test,single-path PASSED 0 test-2886892866 test,subscribe PASSED 0 test-3109317976 suite,integration-tests PASSED 0 To get the logs from a specific test, use onit get logs with the test ID: > onit get logs test-2886892866 === RUN test-single-path-test --- PASS: test-single-path-test ( 0 .04s ) PASS","title":"Test Run logs"},{"location":"onos-test/docs/testing/#debugging","text":"The onit command provides a set of commands for debugging test clusters. The onit command can be used to get logs for every resource deployed in the test cluster. Simply pass the resource ID (e.g. test ID , node ID , partition ID , etc) to the onit get logs command to get the logs for a resource. To list all types of nodes (e.g. onos-topo, onos-config, etc) running in the cluster, use onit get nodes , the output will be like the following: > onit get nodes onit get nodes ID TYPE STATUS onos-topo-7cd788fb7f-2zvsp topo RUNNING onos-topo-7cd788fb7f-rc6m5 topo RUNNING onos-config-6f8fcf5954-55zn2 config RUNNING onos-config-6f8fcf5954-pglkz config RUNNING To get logs for the above node, run the following command: > onit get logs onos-config-569c7d8546-jscg8 I0625 21 :55:32.027255 1 onos-config.go:114 ] Starting onos-config I0625 21 :55:32.030184 1 manager.go:98 ] Configuration store loaded from /etc/onos-config/configs/configStore.json I0625 21 :55:32.030358 1 manager.go:105 ] Change store loaded from /etc/onos-config/configs/changeStore.json I0625 21 :55:32.031087 1 manager.go:112 ] Device store loaded from /etc/onos-config/configs/deviceStore.json I0625 21 :55:32.031222 1 manager.go:119 ] Network store loaded from /etc/onos-config/configs/networkStore.json I0625 21 :55:32.031301 1 manager.go:47 ] Creating Manager ... To list the Raft partitions running in the cluster, use onit get partitions : > onit get partitions ID GROUP NODES 1 raft raft-1-0 To get logs for the above partions, run the following command: > onit get logs raft-1-0 21 :10:24.466 [ main ] INFO io.atomix.server.AtomixServerRunner - Node ID: raft-1-0 21 :10:24.472 [ main ] INFO io.atomix.server.AtomixServerRunner - Partition Config: /etc/atomix/partition.json 21 :10:24.472 [ main ] INFO io.atomix.server.AtomixServerRunner - Protocol Config: /etc/atomix/protocol.json 21 :10:24.473 [ main ] INFO io.atomix.server.AtomixServerRunner - Starting server ... To list the tests that have been run, use onit get history : > onit get history ID TESTS STATUS EXIT CODE MESSAGE 3cf7311a-9776-11e9-bfc3-acde48001122 test-integration-test PASSED 0 68ad9154-977c-11e9-bcf2-acde48001122 test-integration-test FAILED 1 71a0623c-977c-11e9-8478-acde48001122 test-single-path-test PASSED 0 9e512cdc-9720-11e9-ba6e-acde48001122 * PASSED 0 da629d06-9774-11e9-bb50-acde48001122 * PASSED 0 To get logs for one of the above histories, run the following command: > onit get logs 71a0623c-977c-11e9-8478-acde48001122 === RUN test-single-path-test --- PASS: test-single-path-test ( 0 .04s ) PASS To download logs from a node, you can run onit fetch logs command. For example, to download logs from onos-config-66d54956f5-xwpsh node, run the following command: onit fetch logs onos-config-66d54956f5-xwpsh You can refer to Debug onos-config in Onit Using Delve to learn more about debugging of onos-config pod using Delve debugger.","title":"Debugging"},{"location":"onos-test/docs/testing/#api","text":"Tests are implemented using Go's testing package; func MyTest ( t * testing . T ) { t . Fail ( \"you messed up!\" ) } However, rather than running tests using go test , we provide a custom registry of tests to allow human-readable names to be assigned to tests for ease of use. Once you've written a test, register the test in an init function: func init () { Registry . Register ( \"my-test\" , MyTest ) } Once a test has been registered, you should be able to see the test via the onit command: > onit get tests my-test ... The test framework also provides the capability of adding your test to a suite defined in suites.go . To see the suites you can execute: > onit get suites SUITE TESTS alltests single-path, subscribe, transaction sometests subscribe, transaction integration-tests single-path To add your test to a suite in the init function the register method must be called with the suites parameter: func init () { Registry . RegisterTest ( \"my-test\" , MyTest , [] * runner . TestSuite { AllTests }) } The test framework provides utility functions for creating clients and other resources within the test environment. The test environment is provided by the env package: client , err := env . NewGnmiClient ( context . Background (), \"\" ) ... When devices are deployed in the test configuration, a list of device IDs can be retrieved from the environment: devices := env . GetDevices ()","title":"API"},{"location":"onos-topo/docs/cli/","text":"Command-Line Interface The project provides a command-line facilities for remotely interacting with the topology subsystem. The commands are available at run-time using the consolidated onos client hosted in the onos-cli repository, but their implementation is hosted and built here. The documentation about building and deploying the consolidate onos client or its Docker container is available in the onos-cli GitHub repository. Usage > onos topo --help ... Global Flags Since the onos command is a client, it requires the address of the server as well as the paths to the key and the certificate to establish secure connection to the server. These options are global to all commands and can be persisted to avoid having to specify them for each command. For example, you can set the default server address as follows: > onos topo config set address onos-topo-server:5150 Subsequent usages of the onos command can then abstain from using the --address option to indicate the server address, resulting in easier usage. Example Commands Adding, Removing and Listing Devices Until the full topology subsystem is available, there is a provisional administrative interface that allows devices to be added, removed and listed via gRPC. A command has been provided to allow manipulating the device inventory from the command line using this gRPC service. To add a new device, specify the device information protobuf encoding as the value of the addDevice option. The id , address and version fields are required at the minimum. For example: > onos topo add device device-4 --address localhost:10164 --version 1 .0.0 Added device device-4 TODO: We will have to add type and role fields to the device. In order to remove a device, specify its ID as follows: > onos topo remove device device-2 Removed device device-2 If you do not specify any options, the command will list all the devices currently in the inventory: > onos topo get devices -v NAME ADDRESS VERSION localhost-3 localhost:10163 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE 5 false false stratum-sim-1 localhost:50001 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE 5 true false localhost-1 localhost:10161 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE devicesim notused 5 false false localhost-2 localhost:10162 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE 5 false false","title":"How To Use Topology Subsystem CLI?"},{"location":"onos-topo/docs/cli/#command-line-interface","text":"The project provides a command-line facilities for remotely interacting with the topology subsystem. The commands are available at run-time using the consolidated onos client hosted in the onos-cli repository, but their implementation is hosted and built here. The documentation about building and deploying the consolidate onos client or its Docker container is available in the onos-cli GitHub repository.","title":"Command-Line Interface"},{"location":"onos-topo/docs/cli/#usage","text":"> onos topo --help ...","title":"Usage"},{"location":"onos-topo/docs/cli/#global-flags","text":"Since the onos command is a client, it requires the address of the server as well as the paths to the key and the certificate to establish secure connection to the server. These options are global to all commands and can be persisted to avoid having to specify them for each command. For example, you can set the default server address as follows: > onos topo config set address onos-topo-server:5150 Subsequent usages of the onos command can then abstain from using the --address option to indicate the server address, resulting in easier usage.","title":"Global Flags"},{"location":"onos-topo/docs/cli/#example-commands","text":"","title":"Example Commands"},{"location":"onos-topo/docs/cli/#adding-removing-and-listing-devices","text":"Until the full topology subsystem is available, there is a provisional administrative interface that allows devices to be added, removed and listed via gRPC. A command has been provided to allow manipulating the device inventory from the command line using this gRPC service. To add a new device, specify the device information protobuf encoding as the value of the addDevice option. The id , address and version fields are required at the minimum. For example: > onos topo add device device-4 --address localhost:10164 --version 1 .0.0 Added device device-4 TODO: We will have to add type and role fields to the device. In order to remove a device, specify its ID as follows: > onos topo remove device device-2 Removed device device-2 If you do not specify any options, the command will list all the devices currently in the inventory: > onos topo get devices -v NAME ADDRESS VERSION localhost-3 localhost:10163 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE 5 false false stratum-sim-1 localhost:50001 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE 5 true false localhost-1 localhost:10161 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE devicesim notused 5 false false localhost-2 localhost:10162 1 .0.0 USER PASSWORD TIMEOUT PLAIN INSECURE 5 false false","title":"Adding, Removing and Listing Devices"},{"location":"onos-topo/docs/deployment/","text":"Deploying onos-topo This guide deploys onos-topo through it's Helm chart assumes you have a [Kubernets] cluster running with an atomix controller deployed in a namespace. If you dont' specify the --namespace in the commands below atomix controller must be deployed in the default onos-topo Helm chart is based on Helm 3.0 version, with no need for the Tiller pod to be present. If you don't have a cluster running and want to try on your local machine please follow first the Kubernetes setup steps outlined in deploy with Helm . Installing the Chart To install the chart, simply run helm install deployments/helm/onos-topo from the root directory of this project: helm install onos-topo deployments/helm/onos-topo NAME: onos-topo LAST DEPLOYED: Tue Nov 26 13 :31:42 2019 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None helm install assigns a unique name to the chart and displays all the k8s resources that were created by it. To list the charts that are installed and view their statuses, run helm ls : helm ls NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ... onos-topo 1 Tue May 14 18 :56:39 2019 DEPLOYED onos-topo-0.0.1 0 .0.1 default Onos Topo Partition Set The onos-topo chart also deployes a PartitionSet custom Atomix resource to store all the configuration in a replicated and fail safe manner. In the following example there is only one partition set deployed onos-topo-1-0 . NAMESPACE NAME READY STATUS RESTARTS AGE default atomix-controller-b579b9f48-lgvxf 1 /1 Running 0 63m default onos-topo-1-0 1 /1 Running 0 61m default onos-topo-77765c9dc4-vsjjn 1 /1 Running 0 61m One can customize the number of partitions and replicas by modifying, in values.yaml , under store/raft the values of partitions: 1 partitionSize: 1 Installing the chart in a different namespace. To install the chart in a different namespace please modify the default occurances in the values.yaml file. Please be aware to change also atomix-controller.default.svc.cluster.local:5679 to atomix-controller.<your_name_space_here>.svc.cluster.local:5679 . Then issue the helm install command helm install onos-topo --namespace <your_name_space> deployments/helm/onos-topo Installing the chart with debug. onos-topo offers the capability to open a debug port (4000) to the image. To enable the debug capabilities please set the debug flag to true in values.yaml or pass it to helm install helm install onos-topo deployments/helm/onos-topo --set debug = true Troubleshoot If your chart does not install or the pod is not running for some reason and/or you modified values Helm offers two flags to help you debug your chart: --dry-run check the chart without actually installing the pod. --debug prints out more information about your chart helm install onos-topo --debug --dry-run ./deployments/helm/onos-topo/ Uninstalling the chart. To remove the onos-topo pod issue helm delete onos-topo Pod Information To view the pods that are deployed, run kubectl get pods .","title":"How To Deploy with Helm"},{"location":"onos-topo/docs/deployment/#deploying-onos-topo","text":"This guide deploys onos-topo through it's Helm chart assumes you have a [Kubernets] cluster running with an atomix controller deployed in a namespace. If you dont' specify the --namespace in the commands below atomix controller must be deployed in the default onos-topo Helm chart is based on Helm 3.0 version, with no need for the Tiller pod to be present. If you don't have a cluster running and want to try on your local machine please follow first the Kubernetes setup steps outlined in deploy with Helm .","title":"Deploying onos-topo"},{"location":"onos-topo/docs/deployment/#installing-the-chart","text":"To install the chart, simply run helm install deployments/helm/onos-topo from the root directory of this project: helm install onos-topo deployments/helm/onos-topo NAME: onos-topo LAST DEPLOYED: Tue Nov 26 13 :31:42 2019 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None helm install assigns a unique name to the chart and displays all the k8s resources that were created by it. To list the charts that are installed and view their statuses, run helm ls : helm ls NAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACE ... onos-topo 1 Tue May 14 18 :56:39 2019 DEPLOYED onos-topo-0.0.1 0 .0.1 default","title":"Installing the Chart"},{"location":"onos-topo/docs/deployment/#onos-topo-partition-set","text":"The onos-topo chart also deployes a PartitionSet custom Atomix resource to store all the configuration in a replicated and fail safe manner. In the following example there is only one partition set deployed onos-topo-1-0 . NAMESPACE NAME READY STATUS RESTARTS AGE default atomix-controller-b579b9f48-lgvxf 1 /1 Running 0 63m default onos-topo-1-0 1 /1 Running 0 61m default onos-topo-77765c9dc4-vsjjn 1 /1 Running 0 61m One can customize the number of partitions and replicas by modifying, in values.yaml , under store/raft the values of partitions: 1 partitionSize: 1","title":"Onos Topo Partition Set"},{"location":"onos-topo/docs/deployment/#installing-the-chart-in-a-different-namespace","text":"To install the chart in a different namespace please modify the default occurances in the values.yaml file. Please be aware to change also atomix-controller.default.svc.cluster.local:5679 to atomix-controller.<your_name_space_here>.svc.cluster.local:5679 . Then issue the helm install command helm install onos-topo --namespace <your_name_space> deployments/helm/onos-topo","title":"Installing the chart in a different namespace."},{"location":"onos-topo/docs/deployment/#installing-the-chart-with-debug","text":"onos-topo offers the capability to open a debug port (4000) to the image. To enable the debug capabilities please set the debug flag to true in values.yaml or pass it to helm install helm install onos-topo deployments/helm/onos-topo --set debug = true","title":"Installing the chart with debug."},{"location":"onos-topo/docs/deployment/#troubleshoot","text":"If your chart does not install or the pod is not running for some reason and/or you modified values Helm offers two flags to help you debug your chart: --dry-run check the chart without actually installing the pod. --debug prints out more information about your chart helm install onos-topo --debug --dry-run ./deployments/helm/onos-topo/","title":"Troubleshoot"},{"location":"onos-topo/docs/deployment/#uninstalling-the-chart","text":"To remove the onos-topo pod issue helm delete onos-topo","title":"Uninstalling the chart."},{"location":"onos-topo/docs/deployment/#pod-information","text":"To view the pods that are deployed, run kubectl get pods .","title":"Pod Information"},{"location":"onos-topo/docs/api/admin/","text":"Protocol Documentation Table of Contents api/admin/admin.proto TopoAdminService Scalar Value Types Top api/admin/admin.proto TopoAdminService TopoAdminService provides means for interactions with the topology subsystem. Method Name Request Type Response Type Description Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Admin API"},{"location":"onos-topo/docs/api/admin/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-topo/docs/api/admin/#table-of-contents","text":"api/admin/admin.proto TopoAdminService Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-topo/docs/api/admin/#apiadminadminproto","text":"","title":"api/admin/admin.proto"},{"location":"onos-topo/docs/api/admin/#topoadminservice","text":"TopoAdminService provides means for interactions with the topology subsystem. Method Name Request Type Response Type Description","title":"TopoAdminService"},{"location":"onos-topo/docs/api/admin/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-topo/docs/api/device/","text":"Protocol Documentation Table of Contents api/device/device.proto AddRequest AddResponse Credentials Device Device.AttributesEntry GetRequest GetResponse ListRequest ListResponse ProtocolState RemoveRequest RemoveResponse TlsConfig UpdateRequest UpdateResponse ChannelState ConnectivityState ListResponse.Type Protocol ServiceState DeviceService Scalar Value Types Top api/device/device.proto AddRequest AddRequest adds a device to the topology Field Type Label Description device Device device is the device to add AddResponse AddResponse is sent in response to an AddDeviceRequest Field Type Label Description device Device device is the device with a revision number Credentials Credentials is the device credentials Field Type Label Description user string user is the user with which to connect to the device password string password is the password for connecting to the device Device Device contains information about a device Field Type Label Description id string id is a globally unique device identifier revision uint64 revision is the revision of the device address string address is the host:port of the device target string target is the device target version string version is the device software version timeout google.protobuf.Duration timeout indicates the device request timeout credentials Credentials credentials contains the credentials for connecting to the device tls TlsConfig tls is the device TLS configuration type string type is the type of the device role string role is a role for the device attributes Device.AttributesEntry repeated attributes is an arbitrary mapping of attribute keys/values protocols ProtocolState repeated Device.AttributesEntry Field Type Label Description key string value string GetRequest GetRequest gets a device by ID Field Type Label Description id string id is the unique device ID with which to lookup the device GetResponse GetResponse carries a device Field Type Label Description device Device device is the device object ListRequest ListRequest requests a stream of devices and changes By default, the request requests a stream of all devices that are present in the topology when the request is received by the service. However, if subscribe is true , the stream will remain open after all devices have been sent and events that occur following the last device will be streamed to the client until the stream is closed. Field Type Label Description subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all devices have been streamed to the client ListResponse ListResponse carries a single device event Field Type Label Description type ListResponse.Type type is the type of the event device Device device is the device on which the event occurred ProtocolState ProtocolState contains information related to service and connectivity to a device Field Type Label Description protocol Protocol The protocol to which state relates connectivityState ConnectivityState ConnectivityState contains the L3 connectivity information channelState ChannelState ChannelState relates to the availability of the gRPC channel serviceState ServiceState ServiceState indicates the availability of the gRPC servic on top of the channel RemoveRequest RemoveRequest removes a device by ID Field Type Label Description device Device device is the device to remove RemoveResponse RemoveResponse is sent in response to a RemoveDeviceRequest TlsConfig Device TLS configuration Field Type Label Description caCert string caCert is the name of the device's CA certificate cert string cert is the name of the device's certificate key string key is the name of the device's TLS key plain bool plain indicates whether to connect to the device over plaintext insecure bool insecure indicates whether to connect to the device with insecure communication UpdateRequest UpdateRequest updates a device Field Type Label Description device Device device is the updated device UpdateResponse UpdateResponse is sent in response to an UpdateDeviceRequest Field Type Label Description device Device device is the device with updated revision ChannelState ConnectivityState represents the state of a gRPC channel to the device from the service container Name Number Description UNKNOWN_CHANNEL_STATE 0 UNKNOWN_CHANNEL_STATE constant needed to go around proto3 nullifying the 0 values CONNECTED 1 CONNECTED indicates the corresponding grpc channel is connected on this device DISCONNECTED 2 DISCONNECTED indicates the corresponding grpc channel is not connected on this device ConnectivityState ConnectivityState represents the L3 reachability of a device from the service container (e.g. enos-config), independently of gRPC or the service itself (e.g. gNMI) Name Number Description UNKNOWN_CONNECTIVITY_STATE 0 UNKNOWN_CONNECTIVITY_STATE constant needed to go around proto3 nullifying the 0 values REACHABLE 1 REACHABLE indicates the the service can reach the device at L3 UNREACHABLE 2 UNREACHABLE indicates the the service can't reach the device at L3 ListResponse.Type Device event type Name Number Description NONE 0 NONE indicates this response does not represent a state change ADDED 1 ADDED is an event which occurs when a device is added to the topology UPDATED 2 UPDATED is an event which occurs when a device is updated REMOVED 3 REMOVED is an event which occurs when a device is removed from the topology Protocol Protocol to interact with a device Name Number Description UNKNOWN_PROTOCOL 0 UNKNOWN_PROTOCOL constant needed to go around proto3 nullifying the 0 values GNMI 1 GNMI protocol reference P4RUNTIME 2 P4RUNTIME protocol reference GNOI 3 GNOI protocol reference ServiceState ServiceState represents the state of the gRPC service (e.g. gNMI) to the device from the service container Name Number Description UNKNOWN_SERVICE_STATE 0 UNKNOWN_SERVICE_STATE constant needed to go around proto3 nullifying the 0 values AVAILABLE 1 AVAILABLE indicates the corresponding grpc service is available UNAVAILABLE 2 UNAVAILABLE indicates the corresponding grpc service is not available CONNECTING 3 CONNECTING indicates the corresponding protocol is in the connecting phase on this device DeviceService DeviceService provides an API for managing devices. Method Name Request Type Response Type Description Add AddRequest AddResponse Add adds a device to the topology Update UpdateRequest UpdateResponse Update updates a device Get GetRequest GetResponse Get gets a device by ID List ListRequest ListResponse stream List gets a stream of device add/update/remove events Remove RemoveRequest RemoveResponse Remove removes a device from the topology Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Device API"},{"location":"onos-topo/docs/api/device/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-topo/docs/api/device/#table-of-contents","text":"api/device/device.proto AddRequest AddResponse Credentials Device Device.AttributesEntry GetRequest GetResponse ListRequest ListResponse ProtocolState RemoveRequest RemoveResponse TlsConfig UpdateRequest UpdateResponse ChannelState ConnectivityState ListResponse.Type Protocol ServiceState DeviceService Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-topo/docs/api/device/#apidevicedeviceproto","text":"","title":"api/device/device.proto"},{"location":"onos-topo/docs/api/device/#addrequest","text":"AddRequest adds a device to the topology Field Type Label Description device Device device is the device to add","title":"AddRequest"},{"location":"onos-topo/docs/api/device/#addresponse","text":"AddResponse is sent in response to an AddDeviceRequest Field Type Label Description device Device device is the device with a revision number","title":"AddResponse"},{"location":"onos-topo/docs/api/device/#credentials","text":"Credentials is the device credentials Field Type Label Description user string user is the user with which to connect to the device password string password is the password for connecting to the device","title":"Credentials"},{"location":"onos-topo/docs/api/device/#device","text":"Device contains information about a device Field Type Label Description id string id is a globally unique device identifier revision uint64 revision is the revision of the device address string address is the host:port of the device target string target is the device target version string version is the device software version timeout google.protobuf.Duration timeout indicates the device request timeout credentials Credentials credentials contains the credentials for connecting to the device tls TlsConfig tls is the device TLS configuration type string type is the type of the device role string role is a role for the device attributes Device.AttributesEntry repeated attributes is an arbitrary mapping of attribute keys/values protocols ProtocolState repeated","title":"Device"},{"location":"onos-topo/docs/api/device/#deviceattributesentry","text":"Field Type Label Description key string value string","title":"Device.AttributesEntry"},{"location":"onos-topo/docs/api/device/#getrequest","text":"GetRequest gets a device by ID Field Type Label Description id string id is the unique device ID with which to lookup the device","title":"GetRequest"},{"location":"onos-topo/docs/api/device/#getresponse","text":"GetResponse carries a device Field Type Label Description device Device device is the device object","title":"GetResponse"},{"location":"onos-topo/docs/api/device/#listrequest","text":"ListRequest requests a stream of devices and changes By default, the request requests a stream of all devices that are present in the topology when the request is received by the service. However, if subscribe is true , the stream will remain open after all devices have been sent and events that occur following the last device will be streamed to the client until the stream is closed. Field Type Label Description subscribe bool subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur after all devices have been streamed to the client","title":"ListRequest"},{"location":"onos-topo/docs/api/device/#listresponse","text":"ListResponse carries a single device event Field Type Label Description type ListResponse.Type type is the type of the event device Device device is the device on which the event occurred","title":"ListResponse"},{"location":"onos-topo/docs/api/device/#protocolstate","text":"ProtocolState contains information related to service and connectivity to a device Field Type Label Description protocol Protocol The protocol to which state relates connectivityState ConnectivityState ConnectivityState contains the L3 connectivity information channelState ChannelState ChannelState relates to the availability of the gRPC channel serviceState ServiceState ServiceState indicates the availability of the gRPC servic on top of the channel","title":"ProtocolState"},{"location":"onos-topo/docs/api/device/#removerequest","text":"RemoveRequest removes a device by ID Field Type Label Description device Device device is the device to remove","title":"RemoveRequest"},{"location":"onos-topo/docs/api/device/#removeresponse","text":"RemoveResponse is sent in response to a RemoveDeviceRequest","title":"RemoveResponse"},{"location":"onos-topo/docs/api/device/#tlsconfig","text":"Device TLS configuration Field Type Label Description caCert string caCert is the name of the device's CA certificate cert string cert is the name of the device's certificate key string key is the name of the device's TLS key plain bool plain indicates whether to connect to the device over plaintext insecure bool insecure indicates whether to connect to the device with insecure communication","title":"TlsConfig"},{"location":"onos-topo/docs/api/device/#updaterequest","text":"UpdateRequest updates a device Field Type Label Description device Device device is the updated device","title":"UpdateRequest"},{"location":"onos-topo/docs/api/device/#updateresponse","text":"UpdateResponse is sent in response to an UpdateDeviceRequest Field Type Label Description device Device device is the device with updated revision","title":"UpdateResponse"},{"location":"onos-topo/docs/api/device/#channelstate","text":"ConnectivityState represents the state of a gRPC channel to the device from the service container Name Number Description UNKNOWN_CHANNEL_STATE 0 UNKNOWN_CHANNEL_STATE constant needed to go around proto3 nullifying the 0 values CONNECTED 1 CONNECTED indicates the corresponding grpc channel is connected on this device DISCONNECTED 2 DISCONNECTED indicates the corresponding grpc channel is not connected on this device","title":"ChannelState"},{"location":"onos-topo/docs/api/device/#connectivitystate","text":"ConnectivityState represents the L3 reachability of a device from the service container (e.g. enos-config), independently of gRPC or the service itself (e.g. gNMI) Name Number Description UNKNOWN_CONNECTIVITY_STATE 0 UNKNOWN_CONNECTIVITY_STATE constant needed to go around proto3 nullifying the 0 values REACHABLE 1 REACHABLE indicates the the service can reach the device at L3 UNREACHABLE 2 UNREACHABLE indicates the the service can't reach the device at L3","title":"ConnectivityState"},{"location":"onos-topo/docs/api/device/#listresponsetype","text":"Device event type Name Number Description NONE 0 NONE indicates this response does not represent a state change ADDED 1 ADDED is an event which occurs when a device is added to the topology UPDATED 2 UPDATED is an event which occurs when a device is updated REMOVED 3 REMOVED is an event which occurs when a device is removed from the topology","title":"ListResponse.Type"},{"location":"onos-topo/docs/api/device/#protocol","text":"Protocol to interact with a device Name Number Description UNKNOWN_PROTOCOL 0 UNKNOWN_PROTOCOL constant needed to go around proto3 nullifying the 0 values GNMI 1 GNMI protocol reference P4RUNTIME 2 P4RUNTIME protocol reference GNOI 3 GNOI protocol reference","title":"Protocol"},{"location":"onos-topo/docs/api/device/#servicestate","text":"ServiceState represents the state of the gRPC service (e.g. gNMI) to the device from the service container Name Number Description UNKNOWN_SERVICE_STATE 0 UNKNOWN_SERVICE_STATE constant needed to go around proto3 nullifying the 0 values AVAILABLE 1 AVAILABLE indicates the corresponding grpc service is available UNAVAILABLE 2 UNAVAILABLE indicates the corresponding grpc service is not available CONNECTING 3 CONNECTING indicates the corresponding protocol is in the connecting phase on this device","title":"ServiceState"},{"location":"onos-topo/docs/api/device/#deviceservice","text":"DeviceService provides an API for managing devices. Method Name Request Type Response Type Description Add AddRequest AddResponse Add adds a device to the topology Update UpdateRequest UpdateResponse Update updates a device Get GetRequest GetResponse Get gets a device by ID List ListRequest ListResponse stream List gets a stream of device add/update/remove events Remove RemoveRequest RemoveResponse Remove removes a device from the topology","title":"DeviceService"},{"location":"onos-topo/docs/api/device/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-topo/docs/api/diags/","text":"Protocol Documentation Table of Contents api/diags/diags.proto TopoDiags Scalar Value Types Top api/diags/diags.proto TopoDiags TopoDiags provides means for obtaining diagnostic information about internal system state. Method Name Request Type Response Type Description Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Diagnostic API"},{"location":"onos-topo/docs/api/diags/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-topo/docs/api/diags/#table-of-contents","text":"api/diags/diags.proto TopoDiags Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-topo/docs/api/diags/#apidiagsdiagsproto","text":"","title":"api/diags/diags.proto"},{"location":"onos-topo/docs/api/diags/#topodiags","text":"TopoDiags provides means for obtaining diagnostic information about internal system state. Method Name Request Type Response Type Description","title":"TopoDiags"},{"location":"onos-topo/docs/api/diags/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"},{"location":"onos-ztp/docs/setup/","text":"How to install and run onos-ztp? The current implementation of the ZTP subsystem uses local file system storage for the role configuration; this is only temporary. To start the server simply run: > go run github.com/onosproject/onos-ztp/cmd/onos-ztp You may then use the ONOS CLI ztp commands from the consolidated ONOS CLI program, e.g. > onos ztp get roles > onos ztp add role test/samplejson/leaf.json > onos ztp add role test/samplejson/spine.json > onos ztp get role leaf > onos ztp remove role spine More documentation to be added.","title":"How To Install And Run ZTP?"},{"location":"onos-ztp/docs/setup/#how-to-install-and-run-onos-ztp","text":"The current implementation of the ZTP subsystem uses local file system storage for the role configuration; this is only temporary. To start the server simply run: > go run github.com/onosproject/onos-ztp/cmd/onos-ztp You may then use the ONOS CLI ztp commands from the consolidated ONOS CLI program, e.g. > onos ztp get roles > onos ztp add role test/samplejson/leaf.json > onos ztp add role test/samplejson/spine.json > onos ztp get role leaf > onos ztp remove role spine More documentation to be added.","title":"How to install and run onos-ztp?"},{"location":"onos-ztp/docs/api/admin/","text":"Protocol Documentation Table of Contents api/admin/admin.proto ZtpAdminService api/admin/roles.proto DeviceConfig DevicePipeline DeviceProperty DeviceRoleChange DeviceRoleChangeRequest DeviceRoleChangeResponse DeviceRoleConfig DeviceRoleRequest DeviceRoleChange.ChangeType DeviceRoleChangeRequest.ChangeType DeviceRoleService Scalar Value Types Top api/admin/admin.proto ZtpAdminService ZtpAdminService provides means for enhanced interactions with the zero-touch-provisioning subsystem. Method Name Request Type Response Type Description Top api/admin/roles.proto DeviceConfig DeviceConfig is a set of initial configuration properties to be applied to a device. Field Type Label Description softwareVersion string properties DeviceProperty repeated DevicePipeline DevicePipeline carries information about the P4 pipeline configuration Field Type Label Description pipeconf string driver string DeviceProperty DeviceProperty is a path/type/value tuple Field Type Label Description path string type string value string DeviceRoleChange DeviceRoleChange is an event describing a change to a device role configuration. Field Type Label Description change DeviceRoleChange.ChangeType config DeviceRoleConfig DeviceRoleChangeRequest DeviceRoleChangeRequest is a request for a change to a device role configuration Field Type Label Description change DeviceRoleChangeRequest.ChangeType config DeviceRoleConfig DeviceRoleChangeResponse DeviceRoleChangeResponse is a response for a change to a device role configuration Field Type Label Description change DeviceRoleChange DeviceRoleConfig DeviceRoleConfig carries the template configuration associated with a device role Field Type Label Description role string config DeviceConfig pipeline DevicePipeline DeviceRoleRequest DeviceRoleRequest is a request for device role configuration. Field Type Label Description role string DeviceRoleChange.ChangeType Name Number Description UPDATED 0 ADDED 1 DELETED 2 DeviceRoleChangeRequest.ChangeType Name Number Description UPDATE 0 ADD 1 DELETE 2 DeviceRoleService DeviceRoleService provides means for setting up device role configurations in support of zero-touch provisioning activities. Method Name Request Type Response Type Description Set DeviceRoleChangeRequest DeviceRoleChangeResponse Set provides means to add, update or delete device role configuration. Get DeviceRoleRequest DeviceRoleConfig stream Get provides means to query device role configuration. Subscribe DeviceRoleRequest DeviceRoleChange stream Subscribe provides means to monitor changes in the device role configuration. Scalar Value Types .proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Admin API"},{"location":"onos-ztp/docs/api/admin/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"onos-ztp/docs/api/admin/#table-of-contents","text":"api/admin/admin.proto ZtpAdminService api/admin/roles.proto DeviceConfig DevicePipeline DeviceProperty DeviceRoleChange DeviceRoleChangeRequest DeviceRoleChangeResponse DeviceRoleConfig DeviceRoleRequest DeviceRoleChange.ChangeType DeviceRoleChangeRequest.ChangeType DeviceRoleService Scalar Value Types Top","title":"Table of Contents"},{"location":"onos-ztp/docs/api/admin/#apiadminadminproto","text":"","title":"api/admin/admin.proto"},{"location":"onos-ztp/docs/api/admin/#ztpadminservice","text":"ZtpAdminService provides means for enhanced interactions with the zero-touch-provisioning subsystem. Method Name Request Type Response Type Description Top","title":"ZtpAdminService"},{"location":"onos-ztp/docs/api/admin/#apiadminrolesproto","text":"","title":"api/admin/roles.proto"},{"location":"onos-ztp/docs/api/admin/#deviceconfig","text":"DeviceConfig is a set of initial configuration properties to be applied to a device. Field Type Label Description softwareVersion string properties DeviceProperty repeated","title":"DeviceConfig"},{"location":"onos-ztp/docs/api/admin/#devicepipeline","text":"DevicePipeline carries information about the P4 pipeline configuration Field Type Label Description pipeconf string driver string","title":"DevicePipeline"},{"location":"onos-ztp/docs/api/admin/#deviceproperty","text":"DeviceProperty is a path/type/value tuple Field Type Label Description path string type string value string","title":"DeviceProperty"},{"location":"onos-ztp/docs/api/admin/#devicerolechange","text":"DeviceRoleChange is an event describing a change to a device role configuration. Field Type Label Description change DeviceRoleChange.ChangeType config DeviceRoleConfig","title":"DeviceRoleChange"},{"location":"onos-ztp/docs/api/admin/#devicerolechangerequest","text":"DeviceRoleChangeRequest is a request for a change to a device role configuration Field Type Label Description change DeviceRoleChangeRequest.ChangeType config DeviceRoleConfig","title":"DeviceRoleChangeRequest"},{"location":"onos-ztp/docs/api/admin/#devicerolechangeresponse","text":"DeviceRoleChangeResponse is a response for a change to a device role configuration Field Type Label Description change DeviceRoleChange","title":"DeviceRoleChangeResponse"},{"location":"onos-ztp/docs/api/admin/#deviceroleconfig","text":"DeviceRoleConfig carries the template configuration associated with a device role Field Type Label Description role string config DeviceConfig pipeline DevicePipeline","title":"DeviceRoleConfig"},{"location":"onos-ztp/docs/api/admin/#devicerolerequest","text":"DeviceRoleRequest is a request for device role configuration. Field Type Label Description role string","title":"DeviceRoleRequest"},{"location":"onos-ztp/docs/api/admin/#devicerolechangechangetype","text":"Name Number Description UPDATED 0 ADDED 1 DELETED 2","title":"DeviceRoleChange.ChangeType"},{"location":"onos-ztp/docs/api/admin/#devicerolechangerequestchangetype","text":"Name Number Description UPDATE 0 ADD 1 DELETE 2","title":"DeviceRoleChangeRequest.ChangeType"},{"location":"onos-ztp/docs/api/admin/#deviceroleservice","text":"DeviceRoleService provides means for setting up device role configurations in support of zero-touch provisioning activities. Method Name Request Type Response Type Description Set DeviceRoleChangeRequest DeviceRoleChangeResponse Set provides means to add, update or delete device role configuration. Get DeviceRoleRequest DeviceRoleConfig stream Get provides means to query device role configuration. Subscribe DeviceRoleRequest DeviceRoleChange stream Subscribe provides means to monitor changes in the device role configuration.","title":"DeviceRoleService"},{"location":"onos-ztp/docs/api/admin/#scalar-value-types","text":".proto Type Notes C++ Type Java Type Python Type double double double float float float float float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long uint32 Uses variable-length encoding. uint32 int int/long uint64 Uses variable-length encoding. uint64 long int/long sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long sfixed32 Always four bytes. int32 int int sfixed64 Always eight bytes. int64 long int/long bool bool boolean boolean string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode bytes May contain any arbitrary sequence of bytes. string ByteString str","title":"Scalar Value Types"}]}